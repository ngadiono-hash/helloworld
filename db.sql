-- phpMyAdmin SQL Dump
-- version 4.4.15.9
-- https://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Nov 17, 2019 at 08:58 AM
-- Server version: 5.6.37
-- PHP Version: 5.6.31

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `database`
--

-- --------------------------------------------------------

--
-- Table structure for table `bug`
--

CREATE TABLE IF NOT EXISTS `bug` (
  `id` int(11) NOT NULL,
  `page` varchar(256) NOT NULL,
  `code` varchar(128) NOT NULL,
  `detail` varchar(256) NOT NULL,
  `sender` varchar(256) NOT NULL,
  `created` varchar(128) NOT NULL,
  `status` int(11) NOT NULL,
  `isNew` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `bug`
--

INSERT INTO `bug` (`id`, `page`, `code`, `detail`, `sender`, `created`, `status`, `isNew`) VALUES
(1, 'http://localhost/auth/sign', '404', 'tidak bisa login', '::1', '1568701488', 1, 0),
(3, 'http://localhost/at/sign', 'undefined', 'tidak bisa login', '::1', '1568721506', 1, 0),
(4, 'http://localhost/at/sign', 'undefined', 'tidak bisa reset password', '::1', '1568730919', 1, 0),
(5, 'http://localhost/u/snippet/view/Uvli10', '404', '', '::1', '1569304848', 1, 0),
(6, 'http://localhost/snippet/s/ywz2ru', '404', 'load more comment tidak bisa', '::1', '1571472211', 1, 1),
(7, 'http://localhost/helloworld/snippet/s/ywz2ru', '500', 'load more', '::1', '1573015614', 1, 1),
(8, 'http://localhost/helloworld/snippet/s/ywz2ru', 'undefined', 'fff', '::1', '1573015706', 1, 1);

-- --------------------------------------------------------

--
-- Table structure for table `login`
--

CREATE TABLE IF NOT EXISTS `login` (
  `id` int(11) NOT NULL,
  `log_time` int(11) NOT NULL,
  `log_email` varchar(128) NOT NULL,
  `log_ip` varchar(128) NOT NULL,
  `log_agent` varchar(256) NOT NULL,
  `log_att` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `notification`
--

CREATE TABLE IF NOT EXISTS `notification` (
  `id` int(11) NOT NULL,
  `user` int(10) NOT NULL,
  `comment` varchar(1) NOT NULL,
  `liked` varchar(1) NOT NULL,
  `security` varchar(1) NOT NULL,
  `isNew` int(1) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `notification`
--

INSERT INTO `notification` (`id`, `user`, `comment`, `liked`, `security`, `isNew`) VALUES
(1, 322184916, '0', '0', '0', 1),
(2, 406080404, '1', '1', '1', 1);

-- --------------------------------------------------------

--
-- Table structure for table `snip`
--

CREATE TABLE IF NOT EXISTS `snip` (
  `id` int(11) NOT NULL,
  `code_id` varchar(128) NOT NULL,
  `code_author` int(11) NOT NULL,
  `code_title` varchar(256) NOT NULL,
  `code_desc` text NOT NULL,
  `code_cdn` varchar(128) DEFAULT NULL,
  `code_tag` varchar(128) NOT NULL,
  `code_html` longtext NOT NULL,
  `code_css` longtext NOT NULL,
  `code_js` longtext NOT NULL,
  `code_update` varchar(128) NOT NULL,
  `code_upload` varchar(128) NOT NULL,
  `code_publish` int(11) NOT NULL,
  `code_like` int(11) NOT NULL DEFAULT '0',
  `code_view` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM AUTO_INCREMENT=45 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `snip`
--

INSERT INTO `snip` (`id`, `code_id`, `code_author`, `code_title`, `code_desc`, `code_cdn`, `code_tag`, `code_html`, `code_css`, `code_js`, `code_update`, `code_upload`, `code_publish`, `code_like`, `code_view`) VALUES
(42, 'u4hqtp', 406080404, 'coba lihat 3d hover effect yang kuambil dari codepen', '3d hover', NULL, '2,1', '&lt;div class=&quot;container mt30&quot;&gt;\n  &lt;div class=&quot;wrapper&quot;&gt;\n    &lt;ul class=&quot;stage clearfix&quot;&gt;\n      &lt;li class=&quot;scene&quot;&gt;\n        &lt;div class=&quot;movie&quot; onlclick=&quot;returntrue&quot;&gt;\n          &lt;div class=&quot;poster&quot;&gt;\n          &lt;/div&gt;\n            &lt;div class=&quot;info&quot;&gt;\n              &lt;header&gt;\n                &lt;h1&gt;Heading&lt;/h1&gt;\n                &lt;span class=&quot;year&quot;&gt;20015&lt;/span&gt;\n                &lt;span class=&quot;rating&quot;&gt;PG&lt;/span&gt;\n                &lt;span class=&quot;duration&quot;&gt;102 M&lt;/span&gt;\n              &lt;/header&gt;\n              &lt;p&gt;\n                CakeCounter provides specially baked cakes and treats that are available for shipping around the Jamshedpur. Our custom baked cakes are made using fresh and wholesome ingredients and are created with skill and artistry. From brownies and cookies or the perfect strawberry cake, our bakery provides just the right items for celebratory moments or everyday treats.\n              &lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n      \n      &lt;li class=&quot;scene&quot;&gt;\n        &lt;div class=&quot;movie&quot; onlclick=&quot;returntrue&quot;&gt;\n          &lt;div class=&quot;poster&quot;&gt;\n          &lt;/div&gt;\n            &lt;div class=&quot;info&quot;&gt;\n              &lt;header&gt;\n                &lt;h1&gt;Heading 2&lt;/h1&gt;\n                &lt;span class=&quot;year&quot;&gt;20015&lt;/span&gt;\n                &lt;span class=&quot;rating&quot;&gt;PG&lt;/span&gt;\n                &lt;span class=&quot;duration&quot;&gt;102 M&lt;/span&gt;\n              &lt;/header&gt;\n              &lt;p&gt;\n                CakeCounter provides specially baked cakes and treats that are available for shipping around the Jamshedpur. Our custom baked cakes are made using fresh and wholesome ingredients and are created with skill and artistry. From brownies and cookies or the perfect strawberry cake, our bakery provides just the right items for celebratory moments or everyday treats.\n              &lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n      \n       &lt;li class=&quot;scene&quot;&gt;\n        &lt;div class=&quot;movie&quot; onlclick=&quot;returntrue&quot;&gt;\n          &lt;div class=&quot;poster&quot;&gt;\n          &lt;/div&gt;\n            &lt;div class=&quot;info&quot;&gt;\n              &lt;header&gt;\n                &lt;h1&gt;Heading 3&lt;/h1&gt;\n                &lt;span class=&quot;year&quot;&gt;20015&lt;/span&gt;\n                &lt;span class=&quot;rating&quot;&gt;PG&lt;/span&gt;\n                &lt;span class=&quot;duration&quot;&gt;102 M&lt;/span&gt;\n              &lt;/header&gt;\n              &lt;p&gt;\n                CakeCounter provides specially baked cakes and treats that are available for shipping around the Jamshedpur. Our custom baked cakes are made using fresh and wholesome ingredients and are created with skill and artistry. From brownies and cookies or the perfect strawberry cake, our bakery provides just the right items for celebratory moments or everyday treats.\n              &lt;/p&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/li&gt;\n    \n    &lt;/ul&gt;\n&lt;/div&gt;\n&lt;/div&gt;', '        *, *:after, *:before { -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box; }\n\nbody {\nbackground: #00F260;  /* fallback for old browsers */\nbackground: -webkit-linear-gradient(to right, #0575E6, #00F260);  /* Chrome 10-25, Safari 5.1-6 */\nbackground: linear-gradient(to right, #0575E6, #00F260); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */\n\n    font-family: ''Lato'', Arial, sans-serif;\n    color: #fff;\n    background-position: center;\n    background-size: cover;\n}\n.mt30{margin-top:30px;}\n.wrapper {\n	margin: 0 auto 100px auto;\n	max-width: 960px;\n}\n\n.stage {\n	list-style: none;\n	padding: 0;\n}\n\n/*************************************\nBuild the scene and rotate on hover\n**************************************/\n\n.scene {\n	width: 260px;\n	height: 400px;\n	margin: 30px;\n	float: left;\n	-webkit-perspective: 1000px;\n	-moz-perspective: 1000px;\n	perspective: 1000px;\n}\n\n.movie {\n	width: 260px;\n	height: 400px;\n	-webkit-transform-style: preserve-3d;\n	-moz-transform-style: preserve-3d;\n	transform-style: preserve-3d;\n	-webkit-transform: translateZ(-130px);\n	-moz-transform: translateZ(-130px);\n	transform: translateZ(-130px);\n	-webkit-transition: -webkit-transform 350ms;\n	-moz-transition: -moz-transform 350ms;\n	transition: transform 350ms;\n}\n\n.movie:hover {\n	-webkit-transform: rotateY(-78deg) translateZ(20px);\n	-moz-transform: rotateY(-78deg) translateZ(20px);\n	transform: rotateY(-78deg) translateZ(20px);\n}\n\n/*************************************\nTransform and style the two planes\n**************************************/\n\n.movie .poster, \n.movie .info {\n	position: absolute;\n	width: 260px;\n	height: 400px;\n	background-color: #fff;\n	-webkit-backface-visibility: hidden;\n	-moz-backface-visibility: hidden;\n	backface-visibility: hidden;\n}\n\n.movie .poster  {\n	-webkit-transform: translateZ(130px);\n	-moz-transform: translateZ(130px);\n	transform: translateZ(130px);\n	background-size: cover;\n	background-repeat: no-repeat;\n}\n\n.movie .info {\n	-webkit-transform: rotateY(90deg) translateZ(130px);\n	-moz-transform: rotateY(90deg) translateZ(130px);\n	transform: rotateY(90deg) translateZ(130px);\n	border: 4px solid #fff;\n	font-size: 0.75em;\n}\n\n/*************************************\nShadow beneath the 3D object\n**************************************/\n\n.csstransforms3d .movie::after {\n	content: '''';\n	width: 260px;\n	height: 260px;\n	position: absolute;\n	bottom: 0;\n	box-shadow: 0 30px 50px rgba(0,0,0,0.3);\n	-webkit-transform-origin: 100% 100%;\n	-moz-transform-origin: 100% 100%;\n	transform-origin: 100% 100%;\n	-webkit-transform: rotateX(90deg) translateY(130px);\n	-moz-transform: rotateX(90deg) translateY(130px);\n	transform: rotateX(90deg) translateY(130px);\n	-webkit-transition: box-shadow 350ms;\n	-moz-transition: box-shadow 350ms;\n	transition: box-shadow 350ms;\n}\n\n.csstransforms3d .movie:hover::after {\n	box-shadow: 20px -5px 50px rgba(0,0,0,0.3);\n}\n\n/*************************************\nMovie information\n**************************************/\n\n.info header {\n	color: #FFF;\n	padding: 7px 10px;\n	font-weight: bold;\n	height: 195px;\n	background-size: contain;\n	background-repeat: no-repeat;\n	text-shadow: 0px 1px 1px rgba(0,0,0,1);\n}\n\n.info header h1 {\n	margin: 0 0 2px;\n	font-size: 1.4em;\n}\n\n.info header .rating {\n	border: 1px solid #FFF;\n	padding: 0px 3px;\n}\n\n.info p {\n	 padding: 1.2em 1.4em;\n    margin: 2px 0 0;\n    color: #395065;\n    text-align: justify;\n    line-height: 1.4em;\n    font-family: sans-serif;\n	 \n}\n\n/*************************************\nGenerate &quot;lighting&quot; using box shadows\n**************************************/\n\n.movie .poster,\n.movie .info,\n.movie .info header {\n	-webkit-transition: box-shadow 350ms;\n	-moz-transition: box-shadow 350ms;\n	transition: box-shadow 350ms;\n}\n\n.csstransforms3d .movie .poster {\n	box-shadow: inset 0px 0px 40px rgba(255,255,255,0);\n  background-size: cover;\n    background-position: top;\n}\n\n.csstransforms3d .movie:hover .poster {\n	box-shadow: inset 300px 0px 40px rgba(255,255,255,0.8);\n}\n\n.csstransforms3d .movie .info, \n.csstransforms3d .movie .info header {\n	box-shadow: inset -300px 0px 40px rgba(0,0,0,0.5);\n}\n\n.csstransforms3d .movie:hover .info, \n.csstransforms3d .movie:hover .info header {\n	box-shadow: inset 0px 0px 40px rgba(0,0,0,0);\n}\n\n/*************************************\nPosters and still images\n**************************************/\n\n.scene:nth-child(1) .movie .poster {\n  background-image: url(&quot;https://cdn.dribbble.com/users/1044993/screenshots/5564939/geek-owl_dribbble.png&quot;);\n}\n\n.scene:nth-child(2) .poster {\n  background-image: url(&quot;https://cdn.dribbble.com/users/1044993/screenshots/5400112/vampire_dribbble.png&quot;);\n}\n\n.scene:nth-child(3) .poster {\n  background-image: url(&quot;https://cdn.dribbble.com/users/226242/screenshots/5011272/schro_dinger_s_cat_fullview_2x.jpg&quot;);\n}\n\n.scene:nth-child(1) .info header {\n	background-image: url(&quot;https://cdn.dribbble.com/users/1044993/screenshots/5564939/geek-owl_dribbble.png&quot;);\n}\n\n.scene:nth-child(2) .info header {\n	background-image: url(&quot;https://cdn.dribbble.com/users/1044993/screenshots/5400112/vampire_dribbble.png&quot;);\n}\n\n.scene:nth-child(3) .info header {\n	background-image: url(&quot;https://cdn.dribbble.com/users/226242/screenshots/5011272/schro_dinger_s_cat_fullview_2x.jpg&quot;);\n}\n\n/*************************************\nFallback\n**************************************/\n.no-csstransforms3d .movie .poster, \n.no-csstransforms3d .movie .info {\n	position: relative;\n}\n\n/*************************************\nMedia Queries\n**************************************/\n@media screen and (max-width: 60.75em){\n	.scene {\n		float: none;\n		margin: 30px auto 60px;\n	}\n}', '', '1573486074', '1570812016', 1, 1, 3),
(40, 'xfgmb9', 406080404, 'dropdown bootstrap', 'cara membuat dropdown dengan bootstrap', '1,3', '3,4', '&lt;div class=&quot;dropdown&quot;&gt;\r\n  &lt;button class=&quot;btn btn-primary dropdown-toggle&quot; type=&quot;button&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown Example\r\n  &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;&lt;/button&gt;\r\n  &lt;ul class=&quot;dropdown-menu&quot;&gt;\r\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;', '', '', '1570773375', '1570773375', 1, 1, 1),
(41, 'ywz2ru', 406080404, 'collapsible panel bootstrap', 'Tujuan kata Hypertext dalam HTML adalah salah satunya untuk membuat sebuah text biasa yang ketika di-klik akan pindah ke halaman lainnya. HTML menggunakan tag a untuk keperluan ini dan inilah yang disebut dengan link atau penghubung antar satu halaman ke halaman lainnya.\n\n\nTujuan kata Hypertext dalam HTML adalah salah satunya untuk membuat sebuah text biasa yang ketika di-klik akan pindah ke halaman lainnya. HTML menggunakan tag a untuk keperluan ini dan inilah yang disebut dengan link atau penghubung antar satu halaman ke halaman lainnya.', '1,3', '1,5', '&lt;div class=&quot;panel-group&quot; id=&quot;accordion&quot;&gt;\n  &lt;div class=&quot;panel panel-default&quot;&gt;\n    &lt;div class=&quot;panel-heading&quot;&gt;\n      &lt;h4 class=&quot;panel-title&quot;&gt;\n        &lt;a data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#collapse1&quot;&gt;\n        Collapsible Group 1&lt;/a&gt;\n      &lt;/h4&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;collapse1&quot; class=&quot;panel-collapse collapse in&quot;&gt;\n      &lt;div class=&quot;panel-body&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;panel panel-default&quot;&gt;\n    &lt;div class=&quot;panel-heading&quot;&gt;\n      &lt;h4 class=&quot;panel-title&quot;&gt;\n        &lt;a data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#collapse2&quot;&gt;\n        Collapsible Group 2&lt;/a&gt;\n      &lt;/h4&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;collapse2&quot; class=&quot;panel-collapse collapse&quot;&gt;\n      &lt;div class=&quot;panel-body&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;panel panel-default&quot;&gt;\n    &lt;div class=&quot;panel-heading&quot;&gt;\n      &lt;h4 class=&quot;panel-title&quot;&gt;\n        &lt;a data-toggle=&quot;collapse&quot; data-parent=&quot;#accordion&quot; href=&quot;#collapse3&quot;&gt;\n        Collapsible Group 3&lt;/a&gt;\n      &lt;/h4&gt;\n    &lt;/div&gt;\n    &lt;div id=&quot;collapse3&quot; class=&quot;panel-collapse collapse&quot;&gt;\n      &lt;div class=&quot;panel-body&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n      sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n      minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n      commodo consequat.&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;', '', '', '1570773608', '1570773559', 1, 1, 0),
(44, 'me3yx6', 406080404, 'scroll jquery mouseenter', 'hahahahaha', '1,3,8', '1,5', '&lt;div id=&quot;scroll&quot;&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here&lt;br /&gt;&lt;br /&gt;\n    Content here and more content here\n&lt;/div&gt;\n\n&lt;a href=&quot;#&quot; id=&quot;scroll-down&quot;&gt;Down&lt;/a&gt; - &lt;a href=&quot;#&quot; id=&quot;scroll-up&quot;&gt;Up&lt;/a&gt;\n', 'body {\n  /*background: aqua;*/\n}\n#scroll {\n  width: 200px;\n  height: 200px;\n  overflow: auto;\n  padding: 4px;\n  margin-bottom: 20px;\n}', '$(function() {\n    var ele   = $(''#scroll'');\n    var speed = 25, scroll = 5, scrolling;\n    \n    $(''#scroll-up'').mouseenter(function() {\n        // Scroll the element up\n        scrolling = window.setInterval(function() {\n            ele.scrollTop( ele.scrollTop() - scroll );\n        }, speed);\n    });\n    \n    $(''#scroll-down'').mouseenter(function() {\n        // Scroll the element down\n        scrolling = window.setInterval(function() {\n            ele.scrollTop( ele.scrollTop() + scroll );\n        }, speed);\n    });\n    \n    $(''#scroll-up, #scroll-down'').bind({\n        click: function(e) {\n            // Prevent the default click action\n            e.preventDefault();\n        },\n        mouseleave: function() {\n            if (scrolling) {\n                window.clearInterval(scrolling);\n                scrolling = false;\n            }\n        }\n    });\n});', '1573478428', '1573060753', 1, 1, 2);

-- --------------------------------------------------------

--
-- Table structure for table `snip_cat`
--

CREATE TABLE IF NOT EXISTS `snip_cat` (
  `id` int(11) NOT NULL,
  `category_id` varchar(128) NOT NULL,
  `category_name` varchar(128) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `snip_cat`
--

INSERT INTO `snip_cat` (`id`, `category_id`, `category_name`) VALUES
(1, '1', 'html'),
(2, '2', 'css'),
(3, '3', 'javascript'),
(4, '4', 'bootstrap'),
(5, '5', 'jquery');

-- --------------------------------------------------------

--
-- Table structure for table `snip_cdn`
--

CREATE TABLE IF NOT EXISTS `snip_cdn` (
  `id` int(11) NOT NULL,
  `cdn_author` varchar(128) DEFAULT NULL,
  `cdn_name` varchar(128) NOT NULL,
  `cdn_version` varchar(128) NOT NULL,
  `cdn_link` varchar(256) NOT NULL,
  `cdn_status` int(11) NOT NULL DEFAULT '0',
  `isNew` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `snip_cdn`
--

INSERT INTO `snip_cdn` (`id`, `cdn_author`, `cdn_name`, `cdn_version`, `cdn_link`, `cdn_status`, `isNew`) VALUES
(1, '1', 'jquery', '3.3.1', 'https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js', 1, 1),
(2, '1', 'font-awesome', '5.3.1', 'https://use.fontawesome.com/releases/v5.3.1/css/all.css', 1, 1),
(3, '1', 'bootstrap', '3.7.7', 'https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css,https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js', 1, 1),
(4, '1', 'sweetalert', '8.5.0', 'https://cdn.jsdelivr.net/npm/sweetalert2@8.5.0/dist/sweetalert2.all.min.js', 1, 1),
(5, '1', 'bootstrap', '4.3.1', 'https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css,https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js,https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js', 1, 1),
(11, '1', 'select2', '4.0.10', 'https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/css/select2.css,https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.10/js/select2.js', 1, 1),
(8, '1', 'datatable', '1.2.4', 'https://cdn.datatables.net/v/ju-1.12.1/rr-1.2.4/datatables.min.css,https://cdn.datatables.net/v/ju/dt-1.10.18/rr-1.2.4/datatables.min.js', 1, 1),
(9, '1', 'jquery-ui', '1.12.1', 'https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css,https://code.jquery.com/ui/1.12.1/jquery-ui.js', 1, 1),
(10, '1', 'typeit', '6.0.2', 'https://cdn.jsdelivr.net/npm/typeit@6.0.2/dist/typeit.min.js', 1, 1),
(12, '1', 'selectpicker', '1.13.7', 'https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.7/dist/css/bootstrap-select.min.css,https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.7/dist/js/bootstrap-select.min.js', 1, 1),
(13, '1', 'datepicker', '1.9.0', 'https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.css,https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js', 0, 1);

-- --------------------------------------------------------

--
-- Table structure for table `timeline`
--

CREATE TABLE IF NOT EXISTS `timeline` (
  `id` int(11) NOT NULL,
  `category` varchar(128) NOT NULL,
  `user` varchar(11) NOT NULL,
  `relation` varchar(128) NOT NULL,
  `created` int(11) NOT NULL,
  `publish` int(11) NOT NULL DEFAULT '0'
) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `timeline`
--

INSERT INTO `timeline` (`id`, `category`, `user`, `relation`, `created`, `publish`) VALUES
(10, '2', '406080404', 'u4hqtp', 1570812016, 1),
(8, '2', '406080404', 'xfgmb9', 1570773375, 1),
(9, '2', '406080404', 'ywz2ru', 1570773559, 1),
(13, '2', '406080404', 'me3yx6', 1573060753, 1);

-- --------------------------------------------------------

--
-- Table structure for table `tutors`
--

CREATE TABLE IF NOT EXISTS `tutors` (
  `id` int(11) NOT NULL,
  `snip_id` varchar(128) NOT NULL,
  `snip_category` varchar(256) NOT NULL,
  `snip_level` varchar(64) NOT NULL,
  `snip_order` int(11) NOT NULL,
  `snip_title` varchar(128) NOT NULL,
  `snip_slug` varchar(256) NOT NULL,
  `snip_meta` varchar(256) NOT NULL,
  `snip_publish` int(1) NOT NULL DEFAULT '0',
  `snip_content` longtext NOT NULL,
  `snip_code` varchar(128) DEFAULT NULL,
  `snip_bin` int(11) NOT NULL DEFAULT '0',
  `snip_upload` int(128) NOT NULL,
  `snip_update` int(128) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tutors`
--

INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(1, 'htdxexm', '1', 'h1', 3, 'HTML Tag Element', 'Tag Atribut dan Element pada HTML', 'tag-atribut-dan-element-pada-html', 1, '<p>Untuk mulai mengenal bagaimana cara kerja HTML, kita harus mengetahui struktur dasarnya. Struktur HTML sendiri terdiri dari tiga bagian utama, yaitu <strong>Tag</strong>, <strong>Elemen</strong>, dan <strong>Atribut</strong>. Selama pembelajaran materi HTML ini, kita tidak akan jauh-jauh dari ketiga aspek struktur dasar ini.</p>\r\n\r\n<h3>Tag HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebagai sebuah bahasa markup, HTML membutuhkan cara untuk memberitahu web browser untuk apa fungsi sebuah text. Apakah text itu ditulis sebagai sebuah <strong>paragraf</strong><em>, </em><strong>list</strong>, atau sebagai <strong>link</strong><em>.</em> Dalam HTML, tanda ini dikenal dengan istilah <strong>tag</strong>.</p>\r\n\r\n<p>Hampir semua tag di dalam HTML ditulis secara berpasangan, yakni <strong>tag pembuka</strong> dan <strong>tag penutup</strong>, dimana objek yang dikenai perintah tag berada di antara<strong> </strong>tag pembuka dan tag penutup. Objek disini dapat berupa text, gambar, maupun video. Penulisan tag berada di antara dua kurung<em> </em>siku:<em> </em>&ldquo;<code>&lt;</code>&rdquo;<em> </em>dan<em> </em>&ldquo;<code>&gt;</code>&rdquo;.</p>\r\n\r\n<p>Coba jalankan kode dibawah ini dengan menekan tombol &quot;<strong>run code</strong>&quot; untuk melihat bagaimana web browser menerjemahkan markup HTML ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h1&gt;haloo, saya adalah sebuah heading&lt;/h1&gt;\r\n\r\n&lt;p&gt;haloo, saya adalah sebuah paragraf.&lt;/p&gt;\r\n\r\n&lt;p&gt;saya adalah sebuah paragraf yang memiliki kata dengan &lt;em&gt;huruf miring&lt;/em&gt; \r\ndan juga kata dengan &lt;strong&gt;huruf tebal&lt;/strong&gt;.&lt;/p&gt;  </code></pre>\r\n\r\n<p>Perbedaan mendasar, antara tag pembuka dan tag penutup adalah pada tag pembuka tidak ada tanda slash <code>(/)</code> sedangkan pada tag penutup dibutuhkan tanda slash.</p>\r\n\r\n<p>Meski kita tidak menuliskan tag penutup, pada HTML5, browser tetap akan menerjemahkan kalimat yang ada di dalam tag ini sebagaimana mestinya, namun hal ini akan sangat membingungkan untuk kita sendiri yang membaca kodenya di dalam text editor, karena kita akan kesulitan untuk membaca akhir dari kalimat yang menggunakan tag tersebut.</p>\r\n</div>\r\n\r\n<div class="note">Selalu biasakan untuk tetap menggunakan tag penutup setiap kali kita menulis kalimat di dalam tag HTML karena nantinya jika sudah berhubungan dengan CSS atau JavaScript, maka elemen tanpa tag penutup akan kacau tampilannya.</div>\r\n\r\n<h3>Attribute HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut adalah informasi tambahan yang diberikan kepada <strong>tag</strong> yang selalu dituliskan pada tag pembuka.</p>\r\n\r\n<p>Ada banyak sekali macam-macam atribut ini dan tentunya memiliki fungsi yang berbeda pula seperti untuk mengatur ukuran atau untuk mendeskripsikan informasi tentang elemen itu sendiri, bisa berupa instruksi untuk warna dari text, informasi yang spesifik dari text, dll.</p>\r\n\r\n<p>Setiap atribut memiliki pasangan <strong>nama</strong> dan <strong>nilai</strong>(value) yang ditulis dengan <strong>name=&quot;value&quot;</strong>. Value diapit tanda kutip, boleh menggunakan tanda kutip satu <code>(&#39;&#39;)</code> atau tanda kutip dua <code>(&quot;&quot;)</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan atribut di dalam tag HTML&lt;/h3&gt;\r\n&lt;a href="http://localhost/helloworld/"&gt;menuju Homepage&lt;/a&gt;</code></pre>\r\n\r\n<p>Dalam contoh di atas, atribut <code class="html-attr" style="color:#90ca1c">href</code> adalah atribut yang dimiliki tag <code class="language-html">&lt;a&gt;</code>. <code class="html-attr" style="color:#90ca1c">href</code> merupakan nama<em> </em>dari<em> </em>atribut, dan <strong>http://localhost</strong> adalah <strong>value</strong> atau nilai dari atribut tersebut.</p>\r\n\r\n<p>Tidak semua tag membutuhkan atribut, tapi kita akan sering melihat sebuah tag dengan atribut, terutama atribut <strong>id</strong> dan <strong>class</strong> yang sering digunakan sebagai penanda untuk manipulasi halaman web menggunakan CSS maupun JavaScript.</p>\r\n\r\n<p>HTML memiliki banyak atribut yang beberapa diantaranya hanya cocok untuk tag tertentu saja. Sebagai contoh, atribut &ldquo;<code class="html-attr" style="color:#90ca1c">href</code>&rdquo; diatas hanya digunakan untuk tag <code class="language-html">&lt;a&gt;</code> saja (dan beberapa tag lain seperti tag <code class="language-html">&lt;link&gt;</code>). Penjelasan tentang tujuan dan pengertian dari atribut seperti href ini akan kita bahas pada materi selanjutnya.</p>\r\n</div>\r\n\r\n<h3>Element HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Elemen adalah isi atau konten dari tag yang berada diantara tag pembuka dan tag penutup, termasuk tag itu sendiri dan atribut yang dimilikinya (jika ada).</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;p&gt;Saya adalah elemen yang diapit oleh tag "p".&lt;/p&gt;</code></pre>\r\n\r\n<p>Dalam pembahasan atau tutorial tentang HTML, tidak jarang istilah <strong>tag</strong> dan <strong>elemen</strong> saling dipertukarkan.</p>\r\n\r\n<p>Jika dijadikan sebuah bagan berbentuk gambar, maka struktur <strong>elemen</strong> di dalam HTML adalah seperti ini:</p>\r\n\r\n<p style="text-align:center"><img alt="element HTML" class="img-responsive" src="http://localhost/helloworld/assets/img/element.png" style="width: 609px; height: 181px;" title="elemen HTML" /></p>\r\n\r\n<p>Untuk penjelasan tentang nama-nama atribut yang ada di HTML, akan kita pelajari bertahap dalam materi-materi selanjutnya.</p>\r\n</div>\r\n', '534', 0, 1554171121, 1573706951),
(2, 'htb9y3e', '1', 'h1', 4, 'HTML Structure', 'Struktur Dasar Dokumen HTML', 'struktur-dasar-dokumen-html', 1, '<p>Setiap halaman HTML setidaknya memiliki struktur dasar yang terdiri dari : Tag <code>DTD</code> atau <code>DOCTYPE</code>, tag <code class="language-html">&lt;html&gt;</code>, tag <code class="language-html">&lt;head&gt;</code>, dan tag <code class="language-html">&lt;body&gt;</code>. Inilah yang merupakan struktur paling dasar dari HTML. Semua dokumen HTML akan selalu memiliki struktur seperti ini.</p>\r\n\r\n<h3>File Dokumen HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di bawah ini adalah contoh kode HTML dengan struktur dasarnya. Cobalah mengetikkan kode ini di text editor masing-masing kemudian menyimpannya dengan nama apapun dan pastikan ekstensinya adalah <strong>.html</strong> . Kemudian buka file yang telah disimpan tadi dan jalankan dengan browser. Pastikan tampilannya akan sama jika kamu menekan tombol <strong>run code</strong>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n\r\n&lt;html&gt;\r\n\r\n  &lt;head&gt;\r\n\r\n    &lt;title&gt;Belajar HTML&lt;/title&gt;\r\n\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n\r\n    &lt;h1&gt;Selamat datang&lt;/h1&gt;\r\n    &lt;p&gt;Ini adalah sebuah paragraf yang dibuat dari kode HTML.&lt;/p&gt;\r\n    &lt;p&gt;Kontennya bisa berupa teks, gambar, tautan, video, ataupun audio.&lt;/p&gt;\r\n\r\n  &lt;/body&gt;\r\n\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Setiap fille HTML akan selalu berekstensi <code><strong>.html</strong><em> </em></code>tetapi ada juga pada versi HTML yang lama, dengan hanya menulis <strong><code>.htm</code></strong> saja. File HTML yang tersimpan dalam komputer biasanya akan langsung bisa dibuka dengan menggunakan browser dan kita akan bisa melihat bagaimana tampilan kode HTML yang diterjemahkan oleh browser.</p>\r\n\r\n<p style="text-align:center"><img alt="ekstensi" src="http://localhost/helloworld/assets/img/ekstensi.png" style="height:149px; width:362px" title="ekstensi .html di google chrome" /></p>\r\n</div>\r\n\r\n<h3>Struktur File HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<h4>Tag DTD atau DOCTYPE</h4>\r\n\r\n<p>Tag paling awal dari contoh HTML diatas adalah DTD atau DOCTYPE. DTD adalah singkatan dari <strong>Document Type Declaration</strong>. Yang berfungsi untuk memberi tahu kepada web browser bahwa dokumen yang akan diproses adalah HTML.</p>\r\n\r\n<p>DTD memiliki banyak versi tergantung kepada versi HTML yang digunakan. Pada contoh diatas, kita menggunakan DTD versi HTML5. Sebelum HTML5, DTD terdiri dari text panjang seperti di bawah ini.</p>\r\n\r\n<pre>\r\n<code>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" \r\n"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;</code></pre>\r\n\r\n<p>Jika kita tidak menuliskan DTD, browser akan tetap menampilkan dan memproses halaman web kita seperti tidak terjadi apa-apa. Namun browser sebenarnya menjalankan halaman HTML tersebut pada mode khusus yang disebut <a href="https://en.wikipedia.org/wiki/Quirks_mode" target="_blank"><strong>quirk mode</strong></a>.</p>\r\n\r\n<p>Pada <strong>quirk mode</strong>, web browser menerjemahkan halaman web (terutama kode CSS) sedikit berbeda dari seharusnya. Ini karena web browser menganggap bahwa ketika DTD tidak ditemuka, halaman tersebut kemungkinan besar merupakan halaman web usang. Agar halaman &lsquo;usang&rsquo; ini tetap tampil baik, web browser perlu menggunakan aturan-aturan yang berbeda, yakni: <strong>quirk mode</strong>.</p>\r\n\r\n<h4>Tag Html</h4>\r\n\r\n<p>Ini adalah tag pembuka dari keseluruhan halaman web. Semua kode HTML harus berada di dalam tag ini. Tag html dimulai dengan <code class="language-html">&lt;html&gt;</code> dan diakhiri dengan <code class="language-html">&lt;/html&gt;</code></p>\r\n\r\n<h4>Tag Head</h4>\r\n\r\n<p>Elemen pada tag <code class="language-html">&lt;head&gt;</code> umumnya akan berisi berbagai definisi halaman, seperti kode CSS, JavaScript, dan kode-kode lainnya yang tidak tampil di browser.</p>\r\n\r\n<p>Tag <code class="language-html">&lt;title&gt;</code> dalam contoh di atas digunakan untuk menampilkan judul dari sebuah halaman web. Title ini biasanya ditampilkan pada bagian paling atas yaitu tab web browser.</p>\r\n\r\n<h4>Tag Body</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;body&gt;</code> akan berisi semua elemen yang akan tampil dalam halaman web, seperti paragraf, tabel, link, gambar, dll. Tag body ini ditutup dengan <code class="language-html">&lt;/body&gt;</code>. Sebagian besar waktu kita dalam merancang web akan dihabiskan di dalam tag &lt;body&gt; ini.</p>\r\n\r\n<p>Perhatikan bahwa setiap tag akan diakhiri dengan penutup tag. Termasuk <code class="language-html">&lt;html&gt;</code> yang merupakan tag paling awal dari sebuah halaman web.</p>\r\n\r\n<p>Stuktur HTML yang kita bahas disini adalah struktur yang sangat sederhana. Sebuah halaman web bisa memiliki ratusan bahkan ribuan baris, yang ditulis dengan berbagai tag HTML.</p>\r\n</div>\r\n\r\n<h3>Penulisan kode HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<h4>Nested Elemen</h4>\r\n\r\n<p>Dalam penulisan elemen, ada yang disebut <strong>nested</strong> yang artinya elemen di dalam elemen (bersarang). Contoh di bawah ini ada terdapat 6 elemen yaitu elemen <code class="language-html">&lt;html&gt;</code>, <code class="language-html">&lt;head&gt;</code>, <code class="language-html">&lt;title&gt;</code>, <code class="language-html">&lt;body&gt;</code>, <code class="language-html">&lt;h1&gt;</code>, dan <code class="language-html">&lt;p&gt;</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Hello World&lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n  \r\n    &lt;h1&gt;Judul Paragraf&lt;/h1&gt;\r\n    &lt;p&gt;Isi dari paragraf.&lt;/p&gt;\r\n  \r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Pada contoh di atas, elemen <code>title</code> berada di dalam elemen <code>head</code> kemudian elemen <code>h1</code> dan <code>p</code> berada di dalam elemen <code>body</code>, sedangkan elemen <code>head</code> dan <code>body</code> berada di dalam elemen <code>html</code>.</p>\r\n\r\n<h4>Penulisan dengan Indent</h4>\r\n\r\n<p>Indent adalah tata cara penulisan untuk memudahkan kita menulis dan membaca kembali kode yang telah dibuat. Dalam hal ini, elemen yang bersarang di dalam elemen lainnya ditulis dengan cara menjorokkannya lebih ke dalam dengan spasi atau tab. Hanya opsional saja sebenarnya, tetapi hal ini akan sangat membantu kita untuk mengetahui letak sebuah elemen itu bersarang di dalam elemen yang lainnya.</p>\r\n\r\n<p>Dokumen HTML seperti di bawah ini jika sampai lebih dari 500 baris akan sangat menyusahkan untuk dibaca ketika kita akan mempadukannya dengan CSS atau mengolahnya dengan JavaScript.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Hello World&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&lt;div&gt;\r\n&lt;h1&gt;Text Dummy Lorem ipsum&lt;/h1&gt;  \r\n&lt;/div&gt;\r\n&lt;div&gt;\r\n&lt;p&gt;\r\nLorem ipsum dolor sit amet, consectetur adipisicing elit, \r\nsed do eiusmod tempor incididunt ut labore et. \r\n&lt;/p&gt;\r\n&lt;p&gt;\r\nUt enim ad minim veniam,\r\nquis nostrud exercitation ullamco laboris \r\nnisi ut aliquip ex ea commodo nulla pariatur. \r\n&lt;/p&gt;\r\n&lt;/div&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Di beberapa aplikasi text editor seperti VS-Code dan sublime-text ada fitur untuk melakukan indent pada elemen bersarang yang dilakukan secara otomatis saat kita menyimpan perubahan pada kode yang telah kita tulis.</p>\r\n</div>\r\n', '725', 0, 1554171121, 1573707005),
(3, 'h3nluzd', '1', 'h1', 5, 'HTML Tag', 'Mengenal Beberapa Tag di dalam HTML', 'mengenal-beberapa-tag-di-dalam-html', 1, '<p>HTML memiliki banyak sekali nama-nama tag yang cukup sering digunakan. Seiring dengan kehadiran HTML5, keberadaan tag-tag ini semakin berkembang dengan kemunculan tag-tag baru yang ditujukan untuk memenuhi kebutuhan editing konten website yang lebih kompleks.</p>\r\n\r\n<p>Untuk kali ini, kita hanya akan fokus belajar tentang tag-tag HTML yang paling umum digunakan saja yaitu tag <strong>Heading</strong>, <strong>Paragraf</strong> dan beberapa tag <strong>Formating Text</strong> lainnya.</p>\r\n\r\n<h3>Tag Heading</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>HTML menyediakan tag khusus untuk membuat judul atau di dalam HTML lebih di kenal dengan istilah: heading. Heading dirancang terpisah dari paragraf. Tag Heading biasanya digunakan untuk judul dari paragraf, atau bagian dari text yang merupakan judul.</p>\r\n\r\n<p>Tag heading di dalam HTML terdiri dari 6 tingkatan, yaitu <code class="language-html">&lt;h1&gt;</code>, <code class="language-html">&lt;h2&gt;</code>, <code class="language-html">&lt;h3&gt;</code>, <code class="language-html">&lt;h4&gt;</code>, <code class="language-html">&lt;h5&gt;</code>, dan <code class="language-html">&lt;h6&gt;</code>. Tag heading secara default akan ditampilkan oleh web browser dengan huruf tebal (bold). Tampilan dari tag header juga dibuat bertingkat. Tag heading <code>h1</code> memiliki ukuran huruf paling besar, sedangkan <code>h6</code> terkecil.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;penggunaan tag heading&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;h1&gt;ini adalah judul dengan h1 &lt;/h1&gt;\r\n  &lt;h2&gt;ini adalah judul dengan h2 &lt;/h2&gt;\r\n  &lt;h3&gt;ini adalah judul dengan h3 &lt;/h3&gt;\r\n  &lt;h4&gt;ini adalah judul dengan h4 &lt;/h4&gt;\r\n  &lt;h5&gt;ini adalah judul dengan h5 &lt;/h5&gt;\r\n  &lt;h6&gt;ini adalah judul dengan h6 &lt;/h6&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Biasanya dalam sebuah halaman akan ada hanya 1 tag <code>h1</code>, dan beberapa tag <code>h2</code> dan <code>h3</code> dengan beberapa tag <code>p</code>. Berikut adalah contoh struktur artikel HTML sederhana dengan menggunakan tag <code>p</code> dan beberapa tag heading:</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Belajar HTML Dasar&lt;/title&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n\r\n    &lt;h1&gt;Judul Artikel&lt;/h1&gt;\r\n    &lt;p&gt;.....pembahasan artikel.....&lt;/p&gt;\r\n    &lt;h2&gt;Sub Judul Artikel 1&lt;/h2&gt;\r\n    &lt;p&gt;.....pembahasan sub artikel 1.....&lt;/p&gt;\r\n    &lt;h2&gt;Sub Judul Artikel 2&lt;/h2&gt;\r\n    &lt;p&gt;.....pembahasan sub artikel 2.1.....&lt;/p&gt;\r\n      &lt;h2&gt;Sub Sub Judul Artikel 2.1&lt;/h2&gt;\r\n      &lt;p&gt;.....pembahasan sub sub artikel 2.1.....&lt;/p&gt;\r\n\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Dengan menggunakan beberapa tag heading dan paragraf, kita sudah bisa membuat struktur sederhana konten HTML.</p>\r\n</div>\r\n\r\n<div class="note">Search Engine seperti Google akan memberikan nilai lebih untuk heading. Biasanya semakin tinggi tingkat heading, semakin tinggi pula penekanan search engine. Tag <code class="language-html">&lt;h1&gt;</code> dianggap lebih bernilai dari pada <code class="language-html">&lt;h2&gt;</code>. Tag <code class="language-html">&lt;h1&gt;</code> umumnya digunakan untuk judul sebuah konten / artikel, sehingga dianggap dapat mewakili keseluruhan artikel.</div>\r\n\r\n<h3>Tag Paragraf</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Seperti yang sudah kita ketahui bersama, paragraf adalah sekumpulan kalimat yang membentuk sebuah pokok tema pembahasan dari sebuah konten halaman. Bisa jadi dalam satu halaman memiliki beberapa pokok pembahasan berbeda yang tersusun dari judul dan isi artikelnya.</p>\r\n\r\n<p>Coba jalankan kode dibawah ini pada browser dan perhatikan tampilannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Judul dari Website&lt;/title&gt;\r\n&lt;/head&gt;\r\n  &lt;body&gt;\r\n    &lt;h1&gt;Ini adalah Judul&lt;/h1&gt;\r\n    Ini adalah paragraf pertama\r\n    Ini adalah paragraf kedua\r\n	\r\n	\r\n	\r\n    Ini adalah paragraf ketiga\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Jika kita perhatikan apa yang tampil di browser, saat kita menulis kalimat tanpa mengapitnya dengan tag <code class="language-html">&lt;p&gt;</code> maka secara otomatis browser akan menerjemahkannya sebagai teks biasa tanpa mengenal <strong>breakspace</strong> (baris baru) yang kita berikan dengan menekan tombol <kbd>enter</kbd> pada keyboard.</p>\r\n\r\n<p>Tetapi jika kita menggunakan tag <code class="language-html">&lt;p&gt;</code> sebagai pembungkusnya, maka tampilannya akan sesuai dengan apa yang diharapkan. Masing-masing paragraf ditampilkan dalam baris yang berbeda.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Title dari Websiteku&lt;/title&gt;\r\n&lt;/head&gt;\r\n  &lt;body&gt;\r\n    &lt;h1&gt;Ini adalah Judul&lt;/h1&gt;\r\n    &lt;p&gt;Ini adalah paragraf pertama&lt;/p&gt;\r\n    &lt;p&gt;Ini adalah paragraf kedua&lt;/p&gt;\r\n	\r\n	\r\n	\r\n    &lt;p&gt;Ini adalah paragraf ketiga&lt;/p&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Preformated</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dari contoh tag paragraf di atas, kita bisa melihat bagaimana kalimat yang di tampilkan di dalam tag p. Saat kita menekan tombol <kbd>enter</kbd> untuk memberikan jarak spasi baris yang lebih banyak antar paragraf maka sebanyak apapun <strong>breakspace </strong>akan tetap dianggap satu baris saja.</p>\r\n\r\n<p>Lalu bagaimana jika kita ingin menampilkan kata/kalimat yang kita tulis tampil apa adanya dengan spasi dan baris baru? Untuk itu, ada yang namanya tag Preformated atau <code class="language-html">&lt;pre&gt;</code> yang bisa menampilkan karakter spasi (<strong>whitespace</strong>) atau baris baru (<strong>breakspace</strong>) tampil selayaknya apa yang kita tulis pada kode editor. Namun teks di dalam tag ini secara default, jenis fontnya juga akan berbeda dengan yang lainnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag pre&lt;/h3&gt;\r\n\r\n&lt;pre&gt;\r\n  Naik-naik ke puncak gunung,,,\r\n     Tinggi-tinggi sekali,,,\r\n\r\n  Kiri-kanan kulihat saja,,,\r\n     Banyak pohon cemara,,,\r\n&lt;/pre&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Break</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebenarnya ada cara lain untuk mengakali agar teks yang kita tulis bisa berpindah baris. HTML menyediakan tag untuk pindah baris baru meskipun masih dalam satu paragraf, yaitu tag Break atau <code><code class="language-html">&lt;br&gt;</code>. </code></p>\r\n\r\n<p>Sedangkan tag Horizontal atau <code class="language-html">&lt;hr&gt;</code> sering digunakan untuk membuat sebuah garis horizontal sebagai batas saat berpindah baris baru.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag br dan hr&lt;/h3&gt;\r\n\r\n&lt;p&gt;Ini adalah sebuah paragraf normal.&lt;/p&gt;\r\n&lt;br&gt;\r\n&lt;br&gt;\r\n&lt;br&gt;\r\n&lt;p&gt;\r\n  Ini juga adalah \r\n  &lt;br&gt; sebuah paragraf yang dipisahkan dengan tag br,\r\n  &lt;hr&gt; dan ini juga masih dalam satu paragraf tapi dipisahkn dengan tag hr.\r\n&lt;/p&gt;\r\n\r\n&lt;hr&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Perhatikan penulisan tag break <code class="language-html">&lt;br&gt;</code>, dan tag horizontal <code class="language-html">&lt;hr&gt;</code> . Keduanya merupakan tag yang tidak memiliki tag penutup, dan bisa ditulis sebagai <code class="language-html">&lt;br&gt;</code> atau <code class="language-html">&lt;br/&gt;</code>. Penulisan <code>&lt;br/&gt;</code> merupakan bawaan dari xHTML yang dianggap lebih rapi. Namun dalam standar HTML5, penulisan <code>&lt;br&gt;</code> maupun <code>&lt;br/&gt;</code> tetap dianggap valid. Kontennya sendiripun untuk tag break berupa baris baru sedangkan tag horizontal berupa garis.</div>\r\n\r\n<h3>Tag Comment</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Yang dimaksud dengan tag komentar di sini adalah tag yang berguna untuk menandai kode yang tidak ingin dijalankan atau tidak akan tercetak di browser.</p>\r\n\r\n<p>Hal ini penting untuk memberikan tanda informasi bagi kita yang menulis kode untuk mengetahui maksud kegunaan kode-kode yang kita tulis atau untuk dibaca orang lain yang ingin melihat kode kita. Umumnya kita akan sering lupa tentang cara kerja kode yang kita buat sendiri setelah beberapa bulan berikutnya.</p>\r\n\r\n<p>Untuk membuat komentar di HTML, kita menggunakan awalan <code>&lt;!&ndash;&ndash;</code> dan penutup <code>&ndash;&ndash;&gt;</code> pada setiap kalimat atau text yang ingin kita komentari agar tidak dieksekusi oleh browser.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html &gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n   &lt;title&gt;Belajar Tag Komentar&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n   &lt;!-- &lt;p&gt;Ini berada di dalam tag komentar, \r\n           dan tidak akan tampil di browser&lt;/p&gt; --&gt;\r\n   &lt;p&gt;Ini bukan komentar, dan akan tampil di browser&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Contoh lain penggunaannya selain untuk mengomentari elemen yang tidak ingin dieksekusi browser adalah sebagai informasi untuk kita sendiri tentang kode-kode yang telah ditulis.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html &gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n   &lt;title&gt;Belajar Tag Komentar&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;!-- artikel tentang sesuatu --&gt;\r\n  &lt;h1&gt;Judul Pertama&lt;/h1&gt;\r\n  &lt;p&gt;\r\n     Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n     consequat.\r\n   \r\n  &lt;!-- artikel tentang sesuatu yang lain --&gt;\r\n  &lt;h1&gt;Judul Kedua&lt;/h1&gt; \r\n  &lt;p&gt;\r\n     Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n     cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n     proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n  &lt;/p&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<p class="reff">Referensi <a href="https://www.w3schools.com/tags/ref_byfunc.asp" target="_blank">w3schools.com/tags/ref_byfunc.asp</a></p>\r\n', '1004', 0, 1554171121, 1573707042),
(4, 'hpvt9q2', '1', 'h1', 6, 'HTML Attribute', 'Mengenal Beberapa Atribut pada tag HTML', 'mengenal-beberapa-atribut-pada-tag-html', 1, '<p>Seperti yang sudah kita bahas pada materi awal, Atribut adalah informasi tambahan pada sebuah tag, bisa berupa intruksi untuk mengubah tampilan elemen atau berupa informasi yang spesifik terhadap elemen itu sendiri.</p>\r\n\r\n<h3>Aturan Penulisan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut terdiri atas <strong>nama atribut</strong> dan <strong>nilai atribut</strong> yang mana keduanya ini dipisahkan dengan tanda sama dengan (<code>=</code>). Nlai dari atribut harus berada di dalam tanda kutip, bisa berupa tanda kutip ganda atau tanda kutip tunggal. Untuk aturan penulisan hurufnya disarankan menggunakan huruf kecil semua.</p>\r\n\r\n<pre>\r\n<code>&lt;tag_pembuka nama_atribut="nilai_atribut"&gt;konten elemen&lt;/tag_penutup&gt;</code></pre>\r\n\r\n<p>Penulisannya harus diletakkan pada tag pembuka dari sebuah tag, termasuk juga tag yang tidak membutuhkan tag penutup seperti tag <code class="language-html">&lt;input&gt;</code> atau tag <code class="language-html">&lt;img&gt;</code> . Pada masing-masing tag juga diperbolehkan memiliki atribut yang jumlahnya lebih dari satu.</p>\r\n</div>\r\n\r\n<p>Pada setiap atribut ada beberapa yang hanya akan cocok digunakan pada tag tertentu saja. Berikut ini akan kita bahas beberapa nama atribut yang paling umum digunakan sebagai informasi tambahan pada sebuah tag.</p>\r\n\r\n<h3>Atribut Href</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">href</code> ini seringkali digunakan oleh tag <code class="language-html">&lt;a&gt;</code> karena fungsinya yaitu untuk menempatkan link <strong>URL</strong> yang ada di dalam tag <code>a</code> sebagai tautan yang bisa menghubungkan antar halaman. Selain tag <code>a</code>, ada juga tag yang membutuhkan atribut ini yaitu tag <code class="language-html">&lt;link&gt;</code> yang fungsinya untuk memanggil file yang akan dimasukkan ke dalam halaman yang bersangkutan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan atibut href&lt;/h3&gt;\r\n\r\n&lt;a href="http://localhost/helloworld/"&gt;menuju Homepage&lt;/a&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Tag Image</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Ketiga atribut ini akan sering kita jumpai pada tag <code class="language-html">&lt;img&gt;</code> yang fungsinya untuk menampilkan gambar pada dokumen HTML. Ketiga atribut ini juga langsung bisa ditulis bersamaan dalam sebuah tag <code>img</code>. Atribut source atau <code class="html-attr" style="color:#90ca1c">src</code> ini digunakan untuk menampung <strong>URL</strong> sumber tempat dimana file gambar itu berada, sedangkan atribut <code class="html-attr" style="color:#90ca1c">width</code> untuk mengatur lebar dimensi gambar dan atribut <code class="html-attr" style="color:#90ca1c">height</code> untuk mengatur tinggi dimensi gambar.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan atribut src, width, dan height&lt;/h3&gt;\r\n\r\n&lt;img src="http://localhost/helloworld/assets/img/feed/hai.gif" width="100" height="100"&gt;</code></pre>\r\n\r\n<p>Untuk atribut <code class="html-attr" style="color:#90ca1c">src</code> sendiri, tidak hanya tag <code>img</code> saja yang bisa menggunakannya. Tag <code class="language-html">&lt;script&gt;</code> juga bisa untuk menggunakannya, yang fungsinya adalah untuk mengambil sumber file, yang dikhususkan untuk file berekstensi <code>.js</code> atau file JavaScript. Kita akan pelajari hal ini pada materi-materi selanjutnya.</p>\r\n</div>\r\n\r\n<h3>Atribut Title</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">title</code> ini digunakan untuk menampilkan informasi terhadap sebuah text yang akan ditampilkan ketika pointer mouse berada pada elemen text itu sendiri. Penggunaan atribut ini biasanya untuk menampilkan informasi tambahan terhadap sebuah link atau tombol, atau bisa juga untuk beberapa text yang memiliki arti lebih.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan atribut title pada sebuah link&lt;/h3&gt;\r\n\r\n&lt;a href="http://localhost/helloworld/" title="Anda Mau ke Homepage?"&gt;klik&lt;/a&gt;\r\n\r\n&lt;hr&gt;\r\n\r\n&lt;h3&gt;contoh penggunaan atribut title pada sebuah text&lt;/h3&gt;\r\n\r\n&lt;p&gt;&lt;strong title="HyperText Markup Language"&gt;HTML&lt;/strong&gt; adalah hal pertama yang harus dikuasai untuk belajar Web Programing.&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">style</code> bisa digunakan oleh hampir semua tag. Fungsinya sendiri adalah untuk memberikan instruksi tampilan pada elemennya. Tampilan di sini adalah berupa instruksi kode dari <strong>CSS</strong> yang dimasukkan sebagai nilai dari atribut ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan atribut style&lt;/h3&gt;\r\n\r\n&lt;p style="color: blue"&gt;saya adalah paragraf yang memiliki warna biru&lt;/p&gt;\r\n\r\n&lt;p style="background-color: yellow"&gt;saya adalah paragraf yang memiliki background warna kuning&lt;/p&gt;</code></pre>\r\n\r\n<p>Ingat bahwa nilai dari atribut style adalah kode CSS, jadi cara penulisannya pun agak berbeda dari kebanyakan nilai atribut HTML yang lainnya, yaitu dengan adanya tanda titik dua (<code>:</code>) sebagai aturan dari syntax CSS.</p>\r\n</div>\r\n\r\n<p class="reff">Referensi <a href="https://www.w3schools.com/tags/ref_standardattributes.asp" target="_blank">w3schools.com/tags/ref_standardattributes.asp</a>.</p>\r\n', '491', 0, 1554171121, 1573707122),
(5, 'h7614my', '1', 'h1', 7, 'HTML Style', 'Mendesain HTML dengan Atribut Style', 'mendesain-html-dengan-atribut-style', 1, '<p>Atribut <code class="html-attr" style="color:#90ca1c">style</code> adalah atribut yang digunakan untuk memberikan instruksi style pada elemen HTML. Style ini yang dimaksud adalah style dari CSS, <u>bukan</u> dari HTML. HTML hanya menyediakan objek untuk dihias dengan adanya atribut style itu, sedangkan yang menghias adalah CSS.</p>\r\n\r\n<h3>Aturan Penulisan</h3>\r\n\r\n<div class="wrapper-content">\r\n<pre>\r\n<code>&lt;tag_pembuka style="property : value"&gt;konten&lt;/tag_penutup&gt;</code></pre>\r\n\r\n<p><code class="css-code" style="color:#18c4e7">property</code> adalah nama property dari CSS sedangkan <code class="css-code" style="color:#18c4e7">value</code> adalah nilai dari properti CSSnya. Property dan value harus dipisahkan dengan tanda titik-dua <code>(:)</code></p>\r\n\r\n<p>Di dalam satu atribut style ini, kita juga bisa mengisi lebih dari satu property, dan antar property dipisahkan dengan tanda titik-koma <code>(;)</code>.</p>\r\n</div>\r\n\r\n<h3>Style Background Color</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dengan property <code class="css-code" style="color:#18c4e7">background-color</code> kita bisa memberikan warna background pada sebuah elemen, seperti contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body style="background-color: cyan"&gt;\r\n  &lt;h3&gt;Contoh penggunaan atribut style dengan property background-color&lt;/h3&gt;\r\n  &lt;h4 style="background-color: lightblue"&gt;saya punya background warna biru muda&lt;/h4&gt;\r\n  &lt;p style="background-color : yellow;"&gt;saya punya background berwarna kuning&lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Style Property Color</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Berbeda dengan property background-color, property <code class="css-code" style="color:#18c4e7">color</code> ini digunakan untuk memberikan warna hanya pada text dari sebuah elemen.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3 style="color:blue;"&gt;Saya berwarna biru&lt;/h3&gt;\r\n&lt;p style="color: red;"&gt;\r\nLorem ipsum dolor sit amet, &lt;span style="color: yellow"&gt;consectetur adipisicing&lt;/span&gt; elit, sed do eiusmod\r\ntempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\nquis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\nconsequat. Duis aute &lt;span style="color: green;"&gt;irure dolor&lt;/span&gt; in reprehenderit in voluptate velit esse\r\ncillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\nproident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Style Property lainnya</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Contoh penggunaan atribut style dengan beberapa property sekaligus dalam sebuah elemen.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n &lt;div style="background-color: aqua; width: 100px; height: 100px; padding: 30px; margin: 10px auto;"&gt;\r\n  &lt;p style="color: orange; font-size: 20px;"&gt;Hello World&lt;/p&gt;\r\n &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tentang Atribut Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut style memang dipergunakan untuk memberikan instruksi tampilan terhadap sebuah elemen dengan bantuan kode CSS sebagai property nya. Untuk menggunakannya, kita juga harus tahu lebih banyak tentang nama-nama property CSS beserta value yang benar agar elemen yang kita hias bisa tampil seperti apa yang kita mau.</p>\r\n\r\n<p>Namun penggunaan atribut style akan sangat menyusahkan kita karena jika di dalam satu halaman HTML terdapat banyak tag elemen, maka kita harus memberikan style pada masing-masing elemennya agar tampil seragam sesuai apa yang diharapkan.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body style="padding 20px; margin: 0; background-color: lightgray"&gt;\r\n \r\n &lt;div style="background-color: aqua; width: 500px; padding: 30px; margin: 10px auto;"&gt;\r\n  &lt;h3 style="color: orange; text-align: center"&gt;Hello World&lt;/h3&gt;\r\n  &lt;p style="color: blue; font-family: verdana;"&gt;\r\n   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n   tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n   quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n &lt;/p&gt;\r\n &lt;/div&gt;\r\n \r\n &lt;div style="background-color: lavenderblush; width: 300px; margin: 20px auto; padding: 10px;"&gt;\r\n  &lt;h3 style="color: orange; text-align: center;"&gt;Hello World&lt;/h3&gt;\r\n  &lt;p style="color: red; font-family: verdana;"&gt;\r\n   consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n   cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n   proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n  &lt;/p&gt;\r\n &lt;/div&gt;\r\n \r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Dari kode di atas, kode HTML terlihat tidak terstruktur dengan baik atau tidak rapi. Antara HTML dan desainnya bercampur menjadi satu . Nah untuk itulah perlu kita memisahkan antara struktur utama HTML dengan desainnya yaitu dengan CSS. Meski sebenarnya hal ini sah-sah saja untuk digunakan, namu tentunya akan sangat merepotkan saat kita menulis kodenya dalam jumlah yang lebih banyak.</p>\r\n\r\n<p>Cara di atas sering juga disebut dengan metode <strong>CSS inline</strong>, yaitu dengan memasukkan kode CSS langsung kepada elemen yang dimaksud dengan atribut style dari HTML. Di dalam CSS sendiri, ada kelebihan jika menggunakan metode ini dan tentunya juga lebih banyak kekurangannya yaitu kode terlihat tidak rapi. Jadi penggunaanya harus sesuai dengan keperluan.</p>\r\n</div>\r\n', '579', 0, 1554171121, 1573707145),
(6, 'ha4g7az', '1', 'h1', 8, 'HTML CSS', 'Memasukkan kode CSS ke dalam HTML', 'memasukkan-kode-css-ke-dalam-html', 1, '<p>Untuk mempelajari HTML, memang kita tidak bisa lepas dari CSS sebagai pendukungnya. Begitu juga sebaliknya, CSS juga tidak akan berguna jika tidak ada HTML.</p>\r\n\r\n<p>Dalam membuat sebuah halaman HTML yang bagus, kode yang ditulis juga haruslah terstruktur dengan baik. Terstruktur di sini yang dimaksud adalah, selain kita menulis kode untuk diterjemahkan oleh aplikasi browser, kode-kode ini juga harus bisa dimengerti oleh manusia seperti kita sebagai pembuatnya. Jangan sampai kita menjadi bingung sendiri gara-gara menulis kode secara asal-asalan.</p>\r\n\r\n<p>Melanjutkan materi sebelumnya tentang style, di sini kita akan membahas lebih jauh tentang cara menghubungkan HTML dengan CSS untuk membuat halaman HTML yang lebih baik.</p>\r\n\r\n<p>Di dalam prakteknya, penulisan kode CSS terbagi menjadi 3 metode yaitu <strong>CSS inline</strong>, <strong>CSS internal</strong> dan <strong>CSS external</strong>. Pada materi ini, kita akan fokus membahas pada CSS internal saja. Untuk CSS external akan kita bahas pada materi terpisah.</p>\r\n\r\n<h3>Memasukkan CSS ke HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebelumnya, mari kita ulang pada materi sebelumnya tentang penggunaan atribut <code class="html-attr" style="color:#90ca1c">style</code> atau bisa disebut sebagai metode CSS inline. Perhatikan contoh struktur halaman HTML di bawah ini yang menggunakan CSS metode inline.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;title&gt;Hello World&lt;/title&gt;\r\n &lt;/head&gt;\r\n \r\n &lt;body style="padding 20px; margin: 0; background-color: lightgray"&gt;\r\n  &lt;div style="background-color: aqua; width: 500px; padding: 30px; margin: 10px auto;"&gt;\r\n   &lt;h3 style="color: orange; text-align: center"&gt;Hello World&lt;/h3&gt;\r\n   &lt;p style="color: blue; font-family: verdana;"&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;/div&gt;\r\n &lt;/body&gt;\r\n \r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Kemudian bandingkan dengan memasukkan kode CSS secara internal. Perhatikan contoh di bawah ini dengan konten yang sama terhadap contoh di atas.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n &lt;head&gt;\r\n  &lt;title&gt;Hello World&lt;/title&gt;\r\n  &lt;style&gt;\r\n   body {\r\n    padding 20px; \r\n    margin: 0; \r\n    background-color: lightgray;\r\n   }\r\n   div {\r\n    background-color: aqua; \r\n    width: 500px; \r\n    padding: 30px; \r\n    margin: 10px auto;\r\n   }\r\n   h3 {\r\n    color: orange; \r\n    text-align: center;\r\n   }\r\n   p {\r\n    color: blue; \r\n    font-family: verdana;\r\n   }\r\n  &lt;/style&gt;\r\n &lt;/head&gt;\r\n \r\n &lt;body&gt;\r\n  &lt;div&gt;\r\n   &lt;h3&gt;Hello World&lt;/h3&gt;\r\n   &lt;p&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;/div&gt;\r\n &lt;/body&gt;\r\n \r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Kode HTMLnya terlihat lebih rapi bukan? Itu semua karena kode HTML sebagai struktur utamanya terpisah dengan kode CSS sebagai desain tampilannya.</p>\r\n</div>\r\n\r\n<h3>Syntax Penulisan CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk memasukkan CSS ke dalam HTML secara internal, kita membutuhkan satu tag HTML lagi yaitu tag <code class="language-html">&lt;style&gt;</code>. Text yang berada di dalam tag <code>style</code> ini tidak akan tampil di browser. Dan yang <u>harus</u> ada di dalamnya adalah syntax atau kode-kode dari CSS saja. Penempatan tag style sendiri disarankan agar ditempatkan di dalam tag <code class="language-html">&lt;head&gt;</code>. Hal itu peruntukkan agar kode CSS yang ada di dalam tag <code>style</code> tidak tercampur dengan elemen <code class="language-html">&lt;body&gt;</code> sebagai objek utama untuk dimodifikasi tampilannya.</p>\r\n\r\n<p>Agar kode CSS bisa dimengerti oleh browser, kita diharuskan untuk menulis kode sesuai aturan yang ada, tak terkecuali dalam penulisan kode CSS. Aturan struktur penulisan CSS yang diwajibkan adalah seperti ini.</p>\r\n\r\n<pre>\r\n<code>&lt;style&gt;\r\n selector {\r\n  property: value;\r\n }\r\n&lt;/style&gt;\r\n\r\n</code></pre>\r\n\r\n<p>Terdapat komponen utama CSS, yaitu <code class="css-code" style="color:#18c4e7">selector</code>, <code class="css-code" style="color:#18c4e7">property</code> dan <code class="css-code" style="color:#18c4e7">value</code>.</p>\r\n\r\n<p><strong>Selector</strong> adalah komponen CSS yang berfungsi untuk memilih elemen HTML yang mana yang akan diberi efek CSSnya. Dalam hal ini, kita bisa memilih elemen HTML dari nama tag-nya untuk dijadikan selector.</p>\r\n\r\n<p><strong>Property</strong> adalah jenis style yang akan diberikan, bisa berupa <code class="css-code" style="color:#18c4e7">color</code> untuk warna textnya, <code class="css-code" style="color:#18c4e7">background</code>, <code class="css-code" style="color:#18c4e7">border</code>, <code class="css-code" style="color:#18c4e7">font-family</code> dll.</p>\r\n\r\n<p>Sedangkan <strong>Value</strong> adalah nilai dari property.</p>\r\n\r\n<p>Misalkan untuk property <code class="css-code" style="color:#18c4e7">background-color : red;</code> , &quot;<strong>red</strong>&quot; adalah nilai atau value dari property background-color. Setiap property memiliki value yang berbeda-beda, jadi kita tidak bisa menulis secara asal value dari setiap property seperti saat kita menulis property <code class="css-code" style="color:#18c4e7">color : 16px;</code> , hal itu tidak akan dimengerti oleh browser, atau dianggap <strong>invalid value</strong> karena property diisi dengan value yang tidak tepat.</p>\r\n</div>\r\n\r\n<h3>Kelebihan CSS Internal</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selain struktur HTML menjadi lebih rapi, keuntungan lainnya adalah kita bisa menghemat tempat untuk menulis sebanyak apapun kode akan memiliki style yang sama di dalam setiap halaman. Hal ini tergantung pada <code class="css-code" style="color:#18c4e7">selector</code> yang kita pilih untuk diberikan style CSS.</p>\r\n\r\n<p>Perhatikan contoh penulisan kode dibawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n body {\r\n  padding 20px; \r\n  font-family: verdana;\r\n  color: gray;\r\n }\r\n div {\r\n  background-color: aqua; \r\n  width: 500px; \r\n  padding: 30px 10px; \r\n  margin: 10px auto;\r\n  border: 2px solid red;\r\n }\r\n h3 {\r\n  color: salmon; \r\n  text-align: center;\r\n  font-size: 25px;\r\n }\r\n p {\r\n  text-align: justify;\r\n }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n &lt;div&gt;\r\n  &lt;h3&gt;Hello World Satu&lt;/h3&gt;\r\n  &lt;p&gt;\r\n   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n   tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n   quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n &lt;/div&gt;\r\n &lt;div&gt;\r\n  &lt;h3&gt;Hello World Dua&lt;/h3&gt;\r\n  &lt;p&gt;\r\n   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n   tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n   quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n &lt;/div&gt;  \r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Di dalam setiap halaman bisa terdiri lebih dari satu bagian konten. Dan konten tersebut diwakili oleh nama-nama tag yang sesuai. Misalkan untuk judul dibungkus di dalam tag <code>h3</code> dan isi paragrafnya dibungkus dalam tag <code>p</code>. Jika masing-masing paragraf beserta judulnya ingin ditampilkan seragam, maka yang harus ditulis dalam kode sebagai selector CSS nya adalah nama tag nya. Misalkan, kita ingin menambah beberapa paragaf lagi, maka style nya tetap akan sama seperti sebelumnya, karena tag <code>p</code> telah diatur desainnya di awal. Begitu pula jika kita menulis tag <code>h3</code> atau tag <code>div</code> di halaman itu, stylenya pun masih akan sama.</p>\r\n\r\n<p>Hal ini sering disebut dengan <strong>system templating </strong>internal. Yaitu memberikan style untuk setiap halaman agar tampil seragam sesuai dengan kebutuhan dengan menulis kode-kode CSS di dalam tag style. Kita bisa menghemat tempat dan tidak perlu menulis kode CSS berulang kali untuk memberikan style pada masing-masing elemen HTML.</p>\r\n\r\n<p>Untuk nama-nama property yang kita gunakan di atas, kita akan membahasnya satu per satu pada materi lain, khususnya materi tentang CSS sendiri.</p>\r\n</div>\r\n', '943', 0, 1554171121, 1573707169);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(7, 'htbp5mz', '1', 'h1', 9, 'HTML Color', 'Penggunaan Warna pada HTML', 'penggunaan-warna-pada-html', 1, '<p>Semua warna yang ditampilkan pada komputer atau TV pada dasarnya merupakan kombinasi dari warna utama berupa merah (<span style="color:#c0392b">red</span>) - hijau (<span style="color:#33cc33">green</span>) - biru (<span style="color:#2980b9">blue</span>). Untuk menampilkan warna tertentu selain ketiga warna ini adalah dengan menambahkan atau mengurangi kadar warna utamanya.</p>\r\n\r\n<p>Begitu pula di HTML atau lebih tepatnya warna di dalam CSS, terdapat 3 cara penulisan untuk memberikan style warna, yaitu dengan memberi warna dengan <strong>Nama Warna</strong>, <strong>Kode RGB</strong>, dan <strong>Kode Hexa</strong>.</p>\r\n\r\n<h3>Nama Warna</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Memberikan warna pada elemen HTML dengan menuliskan Nama Warna langsung seperti <span style="color:#c0392b">red</span>, <span style="color:#2ecc71">green</span>, <span style="color:#2980b9">blue</span>, <span style="color:#f1c40f">yellow</span>, atau <span style="color:#33ffff">cyan</span> dan warna-warna lainnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;Nama Warna&lt;/h3&gt;\r\n&lt;h3 style="background-color: red"&gt;\r\n  Elemen h3 dengan background-color merah\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color: green"&gt;\r\n  Elemen h3 dengan background-color hijau\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color: blue"&gt;\r\n  Elemen h3 dengan background-color biru\r\n&lt;/h3&gt;\r\n</code></pre>\r\n\r\n<p>Ada sekitar 140 nama warna yang didukung oleh CSS. Untuk melihat referesi lebih lengkapnya, kita bisa lihat di <a href="https://www.w3schools.com/colors/colors_names.asp" target="_blank">w3schools.com/colors/colors_names.asp</a></p>\r\n</div>\r\n\r\n<h3>Kode RGB</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kode RGB adalah kode yang ditulis untuk memadukan ketiga warna utama dalam bentuk angka bulat. Dengan menulis kode rgb<code>(x,x,x)</code> atau kode warna berdasarkan paduan antara (R) <span style="color:#e74c3c">red</span> (G) <span style="color:#27ae60">green</span> (B) <span style="color:#3498db">blue</span>.</p>\r\n\r\n<p>Nilai yang bisa diisikan di dalam tanda kurungnya adalah angka bulat antara 0 sampai dengan 255.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;Warna dengan kode RGB&lt;/h3&gt;\r\n&lt;h3 style="background-color:rgb(255,0,0)"&gt;\r\nElemen h3 dengan background-color rgb(255,0,0)\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:rgb(0,255,0)"&gt;\r\nElemen h3 dengan background-color rgb(0,255,0)\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:rgb(0,0,255)"&gt;\r\nElemen h3 dengan background-color rgb(0,0,255)\r\n&lt;/h3&gt;</code></pre>\r\n\r\n<p>Sedangkan untuk warna abu-abu (gray), hitam (black) dan putih (white) akan seperti di bawah ini ini :</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3 style="background-color:rgb(0,0,0);color:white"&gt;\r\nElemen h3 dengan background-color rgb(0,0,0)\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:rgb(128,128,128);color:white"&gt;\r\nElemen h3 dengan background-color rgb(128,128,128)\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:rgb(255,255,255);"&gt;\r\nElemen h3 dengan background-color rgb(255,255,255)\r\n&lt;/h3&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Kode Hexa</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Nilai dari <code>rgb(x,x,x)</code> yang pada mulanya berisi angka bulat saja antara 0 sampai 255 dikonversi menjadi bentuk hexadecimal <code>#RRGGBB</code> dimana RR (<span style="color:#e74c3c">red</span>), GG (<span style="color:#2ecc71">green</span>) dan BB (<span style="color:#3498db">blue</span>). Di dalam bentuk Kode Hexa, Kode rgb dikoversi menjadi nilai antara angka <code>00</code> sampai dengan huruf <code>FF</code>. Angka 00 pada kode Hexa berarti sama dengan angka 0 pada kode RGB, sedangkan huruf FF sama artinya dengan angka 255 pada kode RGB.</p>\r\n\r\n<p>Syntax kode Hexa ini harus diawali tanda pagar <code>(#)</code> dan umumnya harus berisi 3 atau 6 digit kode Hexa.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;Warna dengan kode Hexadecimal&lt;/h3&gt;\r\n&lt;h3 style="background-color:#FF0000"&gt;\r\nrgb(255,0,0) dikonversi menjadi #FF0000\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:#00FF00"&gt;\r\nrgb(0,255,0) dikonversi menjadi #00FF00\r\n&lt;/h3&gt;\r\n&lt;h3 style="background-color:#0000FF"&gt;\r\nrgb(0,0,255)dikonversi menjadi #0000FF\r\n&lt;/h3&gt;</code></pre>\r\n\r\n<p>Kita akan pelajari lebih detail tentang materi warna ini lebih mendetail beserta perkembangan kode untuk warna pada materi CSS.</p>\r\n</div>\r\n\r\n<div class="note">Disarankan agar tidak hanya selalu terpaku pada penggunaan nama warna saja seperti black, white, dll dalam memberi warna pada elemen HTML. Karena pada dasarnya ada jutaan warna yang bisa dipakai untuk mewarnai elemen HTML. Kode RGB dan Kode Hexa memang tidak mungkin untuk dihafal satu per satu, namun pemberian warna dengan metode ini adalah yang paling fleksibel.</div>\r\n', '436', 0, 1554171121, 1573707187),
(8, 'h8cwynt', '1', 'h1', 10, 'HTML Text Formatting', 'Tag HTML untuk Formatting Text', 'tag-html-untuk-formatting-text', 1, '<p>Dari materi-materi sebelumnya, kita telah belajar bagaimana memformat tampilan text dengan instruksi dari atribut style beserta property CSS nya. Untuk kali ini, kita akan belajar tentang beberapa tag yang telah disiapkan HTML untuk membuat tampilan text dengan format tertentu tanpa menggunakan atribut style atau CSS.</p>\r\n\r\n<h3>Tag Bold</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita bisa gunakan tag <code class="language-html">&lt;b&gt;</code> atau <strong>bold</strong> untuk membuat text menjadi tercetak lebih tebal. Dan gunakan tag <code class="language-html">&lt;strong&gt;</code> untuk mencetak text tebal khusus untuk menandai text yang mempunyai penekanan arti yang lebih penting.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan tag b dan tag strong&lt;/h3&gt;\r\n\r\n&lt;p&gt;ini paragraf biasa&lt;/p&gt;\r\n&lt;p&gt;&lt;b&gt;sedangkan ini akan tercetak lebih tebal&lt;/b&gt;&lt;p&gt;\r\n&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; adalah kepanjangan dari Hypertext Markup Language&lt;/p&gt;</code></pre>\r\n\r\n<p>Meski keduanya sama-sama menampilkan teks tebal, tetapi keduannya memiliki perbedaan fungsi. Kita bisa menggunakan tag <code>b</code> hanya sekedar untuk mencetak text tebal saja, sedangkan tag <code>strong</code> penggunaannya dikhususkan pada text yang punya penekanan arti, atau istilah yang penting.</p>\r\n</div>\r\n\r\n<h3>Tag Italic</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita bisa menggunakan tag <code class="language-html">&lt;i&gt;</code> atau <strong>italic</strong> untuk mencetak teks miring. Dan gunakan tag <code class="language-html">&lt;em&gt;</code> atau <strong>emphasized</strong> untuk menandai text penting untuk dicetak miring.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag i dan tag em&lt;/h3&gt;\r\n\r\n&lt;p&gt;ini sebuah text normal&lt;/p&gt;\r\n&lt;p&gt;&lt;i&gt;sedangkan ini akan tercetak miring&lt;/i&gt;&lt;p&gt;\r\n&lt;p&gt;HTML adalah kepanjangan dari &lt;em&gt;Hypertext Markup Language&lt;/em&gt;&lt;/p&gt;</code></pre>\r\n\r\n<p>Sama seperti tag <code>b</code> dan tag <code>strong</code>, tag <code>i</code> dan tag <code>em</code> juga memiliki perbedaan penggunaan terhadap text yang ada di dalamnya. Tag <code>i</code> hanya untuk text yang tampil miring biasa, sedangkan <code>em</code> untuk text yang memiliki penekanan arti.</p>\r\n</div>\r\n\r\n<h3>Tag Underline</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Gunakan tag <code class="language-html">&lt;u&gt;</code> untuk mencetak text dengan efek bergaris bawah.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag underline&lt;/h3&gt;\r\n&lt;p&gt;HTML &lt;u&gt;bukanlah&lt;/u&gt; bahasa program, &lt;u&gt;tetapi&lt;/u&gt; hanya bahasa markup&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Deleted</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;del&gt;</code> atau <strong>deleted</strong> digunakan untuk menandai bahwa sebuah text itu tidak digunakan, atau istilahnya telah dihapus.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag del&lt;/h3&gt;\r\n&lt;p&gt;Warna favorit saya adalah &lt;del&gt;merah&lt;/del&gt; biru&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Subscript</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;sub&gt;</code> atau <strong>subscript</strong> digunakan untuk mencetak teks dengan format lebih kecil ke bawah daripada teks yang lain</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag subscript&lt;/h3&gt;\r\n&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O adalah nama senyawa dari air&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Superscript</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;sup&gt;</code> atau <strong>superscript</strong> digunakan untuk mencetak teks dengan format lebih kecil ke atas daripada teks yang lain</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag superscript&lt;/h3&gt;\r\n&lt;p&gt;E = mc&lt;sup&gt;2&lt;/sup&gt; adalah rumus relativitas dari ahli fisika yaitu Einstein&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Small</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Gunakan tag <code class="language-html">&lt;small&gt;</code> untuk mencetak text menjadi lebih kecil ukurannya berdasarkan ukuran aslinya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag small&lt;/h3&gt;\r\n&lt;p&gt;ini adalah text yang &lt;small&gt;berada di dalam tag p&lt;/small&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Marked</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Gunakan tag <code class="language-html">&lt;mark&gt;</code> untuk menandai text dengan &quot;highlight&quot; berupa warna background yang berbeda seperti efek stabilo pada kertas.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag marked&lt;/h3&gt;\r\n&lt;h2&gt;HTML &lt;mark&gt;Marked&lt;/mark&gt; Formatting&lt;/h2&gt;</code></pre>\r\n</div>\r\n', '383', 0, 1554171121, 1573707203),
(9, 'h8kh9zg', '1', 'h1', 11, 'HTML Link', 'Membuat Link Tautan pada HTML', 'membuat-link-tautan-pada-html', 1, '<p>Tujuan kata <strong>Hypertext</strong> dalam HTML adalah salah satunya untuk membuat sebuah text biasa yang ketika di-klik akan pindah ke halaman lainnya. HTML menggunakan tag <code>a</code> untuk keperluan ini dan inilah yang disebut dengan link atau penghubung antar satu halaman ke halaman lainnya.</p>\r\n\r\n<h3>Aturan Penulisan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penulisan link ini harus ada di dalam tag <code class="language-html">&lt;a&gt;</code> yang merupakan kepanjangan dari <strong>anchor</strong> (jangkar) dan ditambahkan atribut<em> </em><code class="html-attr" style="color:#90ca1c">href</code> (<strong>hypertext reference</strong>) dengan nilai berupa <strong>URL</strong> sebagai alamat tujuan dari link tersebut.</p>\r\n\r\n<pre>\r\n<code>&lt;a href="URL"&gt; text yang ditampilkan &lt;/a&gt;</code></pre>\r\n\r\n<p>Text yang ditampilkan dalam tag ini, tidak selalu harus berupa text huruf saja, melainkan bisa juga untuk dimasukkan file gambar atau ikon di dalamnya.</p>\r\n\r\n<p>Berikut ini adalah contoh penerapannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh link dengan konten berupa text biasa&lt;/h3&gt;\r\n&lt;a href="http://localhost/helloworld/"&gt;ini adalah link menuju homepage&lt;/a&gt;\r\n\r\n&lt;hr&gt;\r\n&lt;h3&gt;contoh link dengan konten berupa gambar&lt;/h3&gt;\r\n&lt;a href="http://localhost/helloworld/"&gt;\r\n  &lt;img src="http://localhost/helloworld/assets/img/feed/myc.gif"&gt;\r\n&lt;/a&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Default dari Link</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Secara default, tampilan text yang ada di dalam tag <code>a</code> memiliki varian style yang tergantung pada event yang kita lakukan terhadap link tersebut. Hal ini berlaku di semua macam browser.</p>\r\n\r\n<p>Event nya adalah sebagai berikut :</p>\r\n\r\n<ul>\r\n	<li>ketika link pertama kali tampil dan belum pernah diklik (<code>:link</code>), link akan bergaris bawah dan berwarna biru</li>\r\n	<li>ketika mouse berada di atasnya (<code>:hover</code>), pointer akan berubah menjadi ikon tangan menunjuk</li>\r\n	<li>ketika link sudah diklik (<code>:visited</code>), warnanya akan berubah menjadi ungu gelap</li>\r\n	<li>ketika link di event klik (<code>:active</code>), text link akan berwarna merah</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;style default dari link&lt;/h3&gt;\r\n&lt;p&gt;perhatikan style dari link ini saat sebelum diklik, saat pointer mouse berada di atasnya, \r\ndan saat setelah diklik.&lt;/p&gt;\r\n\r\n&lt;a href="http://localhost/helloworld/"&gt;ini adalah link menuju homepage&lt;/a&gt;</code></pre>\r\n\r\n<p>Kita bisa mengubah tampilan default ini dengan CSS menjadi seperti apa yang kita mau dengan menambahkan nama event di selectornya. Atau bisa juga menjadikan link tampil sebagai sebuah tombol.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;mengubah tampilan default dari sebuah link&lt;/h3&gt;\r\n\r\n&lt;style&gt;\r\n  a { font-size: 25px; font-weight: bold; }\r\n  a:link    {color: gray; text-decoration:none}\r\n  a:visited {color: pink; text-decoration:none}\r\n  a:hover   {color: green; text-decoration:underline}\r\n  a:active  {color: yellow; text-decoration:underline}\r\n&lt;/style&gt;\r\n\r\n&lt;a href="http://localhost/helloworld/"&gt;menuju homepage&lt;/a&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Target</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam tag <code class="language-html">&lt;a&gt;</code>, ada atribut <code class="html-attr" style="color:#90ca1c">target</code> yang berfungsi untuk mengatur kemana akan dibuka link tersebut. Defaultnya jika kita tidak menuliskan atribut ini, maka setiap link yang kita tulis akan terbuka pada jendela yang sama (menimpa halaman web saat ini).</p>\r\n\r\n<p>Nilai dari atribut target ini, beberapa di antaranya :</p>\r\n\r\n<ul>\r\n	<li><code class="html-attr" style="color:#90ca1c">_self</code> untuk membuka dokumen pada halaman saat ini (default)</li>\r\n	<li><code class="html-attr" style="color:#90ca1c">_blank</code> untuk membuka dokumen di tab baru pada browser</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;link dengan atribut target _self&lt;/h3&gt;\r\n&lt;a href="http://localhost/helloworld/" target="_self"&gt;link menuju homepage&lt;/a&gt;\r\n&lt;hr&gt;\r\n\r\n&lt;h3&gt;link dengan atribut target _blank&lt;/h3&gt;\r\n&lt;a href="http://localhost/helloworld/" target="_blank"&gt;link menuju homepage yang akan terbuka pada tab baru&lt;/a&gt;\r\n&lt;hr&gt;</code></pre>\r\n</div>\r\n\r\n<h3>URL</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>URL sendiri adalah kepanjangan dari <strong>Uniform Resource Locator</strong> yang pada dasarnya merupakan suatu karakter yang mempunyai standar tertentu atau juga ditujukan sebagai alamat dari sumber &ndash; sumber di internet, bisa berupa dokumen, gambar atau yang lain. Rangkaian karakter yang akan digunakan bisa saja berupa huruf, angka maupun simbol sesuai dengan standar yang sudah ditentukan. Salah satu standard yang dimaksudkan ialah URL tidak akan mengenal adanya spasi, biasanya juga diawali dengan <strong>HTTP</strong> maupun biasa juga disebut dengan <strong>Hypertext Transfer Protocol</strong> atau <strong>HTTPS</strong> atau <strong>Hypertext Transfer Protocol Secure</strong>. Untuk perbedaan keduanya, silahkan kalian coba cari di sumber lain.</p>\r\n\r\n<h4>URL Absolute</h4>\r\n\r\n<p>URL absolute adalah alamat lengkap yang dapat menyertakan nama dari domain, yang langsung akan menentukan lokasi dari file/dokumen maupun direktori yang ada pada internet.</p>\r\n\r\n<p>Contoh URL absolute adalah seperti di bawah ini.</p>\r\n\r\n<p><a href="http://localhost/helloworld/assets/img/feed/hai.gif" target="_blank">http://localhost/helloworld/assets/img/feed/hai.gif</a></p>\r\n\r\n<p>Pada dasarnya, URL di atas akan menuju sebuah gambar yang bernama &quot;<code>hai.gif</code>&quot;, dan gambar tersebut ada di dalam direktori atau folder &quot;<code>assets/</code>&quot; kemudian masuk lagi ke direktori &quot;<code>img/</code>&quot; dan terakhir masuk ke direktori &quot;<code>feed/</code>&quot;. Nah, dengan tambahan alamat berupa nama domain website &quot;<code>http://localhost/helloworld/</code>&quot; inilah yang disebut dengan absolut karena dengan link tersebut, file gambar akan bisa diakses dari halaman manapun selama kita terhubung dengan jaringan internet dan selama gambar itu masih ada di website itu.</p>\r\n\r\n<h4>URL Relative</h4>\r\n\r\n<p>Sebuah URL bisa disebut relative ini, adalah karena semuanya bersifat &quot;relative&quot;. Relative di sini adalah bergantung pada halaman saat ini tempat dimana sebuah link berisi URL itu ditulis.</p>\r\n\r\n<p>Sebagai contoh, kita akan akan membuat perumpamaan. Silahkan nantinya kalian bisa praktekkan di dalam komputer kalian masing-masing dengan kasus yang sama seperti di bawah ini.</p>\r\n\r\n<p>Kita memiliki struktur folder bernama &quot;BELAJAR HTML&quot; seperti gambar di bawah ini. Kita akan mencoba menghubungkan kedua file HTML dan juga mengubungkannya ke file &quot;gambar1.jpg&#39; dan file &quot;gambar2.jpg&quot;.</p>\r\n\r\n<p style="text-align:center"><img alt="direct" src="http://localhost/helloworld/assets/img/direct-link.png" style="height:177px; width:253px" title="direktori file" /></p>\r\n\r\n<p>Di dalam file <strong><u>belajarhtml.html</u></strong></p>\r\n\r\n<ul>\r\n	<li>untuk terhubung ke halaman <strong>belajarcss</strong>, maka URL nya : &quot;<code>css/belajarcss.html</code>&quot;</li>\r\n	<li>untuk terhubung ke <strong>gambar 1</strong>, maka URL nya : &quot;<code>gambar1.jpg</code>&quot;</li>\r\n	<li>untuk terhubung ke <strong>gambar 2</strong>, maka URL nya : &quot;<code>baru/gambar2.jpg</code>&quot;</li>\r\n</ul>\r\n\r\n<p>Di dalam file <strong><u>belajarcss.html</u></strong></p>\r\n\r\n<ul>\r\n	<li>untuk terhubung ke halaman <strong>belajarhtml</strong>, maka URL nya : &quot;<code>../belajarhtml.html</code>&quot;</li>\r\n	<li>untuk terhubung ke <strong>gambar 1</strong>, maka URL nya : &quot;<code>../gambar1.jpg</code>&quot;</li>\r\n	<li>untuk terhubung ke <strong>gambar 2</strong>, maka URL nya : &quot;<code>../baru/gambar2.jpg</code>&quot;</li>\r\n</ul>\r\n\r\n<p>Perhatikan bahwa untuk menulis URL relative di dalam atribut <code class="html-attr" style="color:#90ca1c">href</code>, kita harus tahu betul tempat dimana file itu berada untuk bisa menghubungkannya dengan file-file lainnya. Jika salah penulisan URL, yang terjadi adalah alamat yang dituju tidak ditemukan. Atau jika nantinya kita mengubah struktur direktori dari folder tersebut dengan memindah salah satu file untuk ditempatkan di dalam folder lainnya, maka URL relative yang telah ditulis sebelumnya juga harus disesuaikan lagi.</p>\r\n\r\n<p>Frase <code>../namaFile.extensi</code> di dalam URL tersebut berarti bahwa alamat yang dituju berada satu root atau tingkat direktori di atasnya.</p>\r\n</div>\r\n\r\n<div class="note">Mengetahui jenis link ini sangatlah penting jika nantinya halaman yang kita buat sudah berada di server hosting atau sudah mengudara di internet. Kita tidak akan menginginkan jika sebuah tombol link diklik akan menuju halaman 404 alias halaman/file tidak ditemukan. Hal itu akan sedikit mengurangi reputasi website kita.</div>\r\n\r\n<h3>Internal Link</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita juga bisa memanfaatkan tag link ini untuk menuju bagian dari satu halaman yang sama secara spesifik.</p>\r\n\r\n<p>Jika kita memiliki sebuah halaman dengan konten yang banyak sampai harus melakukan scroll mouse berkali-kali untuk menuju bagian paling bawah atau bagian tengah halaman, maka kita bisa mengakalinya dengan memberikan link untuk menuju bagian atas atau bagian bawah halaman. Caranya adalah dengan memberikan nilai atribut <code class="html-attr" style="color:#90ca1c">href</code> pada tag <code class="language-html">&lt;a&gt;</code> dengan identitas bagian halaman itu. Sedangkan cara memberikan identitas pada setiap bagian halaman adalah dengan menambahkan atribut <code class="html-attr" style="color:#90ca1c">id</code>. Nama atau nilai dari atribut id ini tidak boleh ada yang kembar di dalam satu halaman, karena id harus bersifat <strong>unique</strong>.</p>\r\n\r\n<p>Atribut href nantinya akan berisi seperti ini <code class="language-html">&lt;a href=&quot;#identitas_per_bagian&quot;&gt;link&lt;/a&gt;</code>. Selalu tambahkan tanda pagar (<code>#</code>) untuk memberi tahu tag <code>a</code> bahwa <code class="html-attr" style="color:#90ca1c">href</code> nya adalah sebuah nama id.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;html&gt;\r\n	&lt;head&gt;\r\n  &lt;style&gt;\r\n    html, body { \r\n      scroll-behavior :smooth; /*untuk membuat efek transisi scroll menjadi lebih halus*/\r\n      background-color: #eee;\r\n      font-family: verdana;\r\n    }\r\n    h3 { \r\n     padding: 10px; \r\n     text-align: center; \r\n     background-color: yellow; \r\n    }\r\n    a {\r\n      margin-left: 10px;\r\n    }\r\n    p { \r\n      height: 450px;\r\n      padding: 20px; \r\n      background-color : lightgreen; \r\n    }\r\n  &lt;/style&gt;\r\n	&lt;/head&gt;\r\n  &lt;body&gt;\r\n    \r\n    &lt;h1 id="satu"&gt;Link Internal dalam satu halaman&lt;/h1&gt;\r\n    \r\n      &lt;a href="#dua"&gt;artikel-2&lt;/a&gt;\r\n      &lt;a href="#tiga"&gt;artikel-3&lt;/a&gt;\r\n      &lt;a href="#empat"&gt;artikel-4&lt;/a&gt;\r\n      &lt;a href="#lima"&gt;artikel-5&lt;/a&gt;\r\n      &lt;a href="#enam"&gt;artikel-6&lt;/a&gt;\r\n      \r\n    &lt;h3&gt;Judul artikel 1&lt;/h3&gt;\r\n      &lt;p&gt;Isi dari artikel 1&lt;/p&gt;\r\n    &lt;h3 id="dua"&gt;Judul artikel 2&lt;/h3&gt;\r\n      &lt;a href="#satu"&gt;kembali ke atas&lt;/a&gt;\r\n      &lt;p&gt;Isi dari artikel 2&lt;/p&gt;\r\n    &lt;h3 id="tiga"&gt;Judul artikel 3&lt;/h3&gt;\r\n      &lt;a href="#satu"&gt;kembali ke atas&lt;/a&gt;\r\n      &lt;p&gt;Isi dari artikel 3&lt;/p&gt;\r\n    &lt;h3 id="empat"&gt;Judul artikel 4&lt;/h3&gt;\r\n      &lt;a href="#satu"&gt;kembali ke atas&lt;/a&gt;\r\n      &lt;p&gt;Isi dari artikel 4&lt;/p&gt;\r\n    &lt;h3 id="lima"&gt;Judul artikel 5&lt;/h3&gt;\r\n      &lt;a href="#satu"&gt;kembali ke atas&lt;/a&gt;\r\n      &lt;p&gt;Isi dari artikel 5&lt;/p&gt;\r\n    &lt;h3 id="enam"&gt;Judul artikel 6&lt;/h3&gt;\r\n      &lt;a href="#satu"&gt;kembali ke atas&lt;/a&gt;\r\n      &lt;p&gt;Isi dari artikel 6&lt;/p&gt;\r\n    &lt;br&gt;&lt;br&gt;\r\n    \r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Untuk pengertian tentang atribut <code class="html-attr" style="color:#90ca1c">id</code>, kita akan bahas lebih lanjut pada materi lainnya.</p>\r\n</div>\r\n\r\n<div class="note">Perlu diketahui bahwa saat kita menulis tag <code class="language-html">&lt;a&gt;</code> tanpa mengisi nilai atribut <code class="html-attr" style="color:#90ca1c">href</code>, saat link diklik maka akan mereload atau memuat ulang halaman itu sendiri. Untuk mencegah ini, tuliskan tanda pagar <code>#</code> pada atribut href yang tidak memiliki url tujuan.</div>\r\n', '1182', 0, 1554171121, 1573707254),
(10, 'h6vi7r4', '1', 'h1', 12, 'HTML Image', 'Menampilkan Gambar pada HTML', 'menampilkan-gambar-pada-html', 1, '<p>Gambar merupakan kebutuhan yang sangatlah penting untuk menunjang konten dari sebuah halaman website modern saat ini. Ini karena sebuah gambar yang tepat, bisa digunakan untuk merepresentasikan sebagian kontent dari sebuah artikel.</p>\r\n\r\n<p>Untuk menampilkan gambar di dalam dokumen HTML, tag yang digunakan adalah tag <code class="language-html">&lt;img&gt;</code> yang merupakan kepanjangan dari <strong>image</strong>. Kita bisa menampilkan gambar dengan jenis ekstensi yang berbeda-beda seperti <code>.jpg</code>, <code>.png</code>, atau <code>.gif</code> dan beberapa ekstensi file gambar lainnya.</p>\r\n\r\n<h3>Aturan Penulisan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Karena tag <code>img</code> adalah tag yang tidak memiliki tag penutup, maka aturan penulisannya adalah seperti di bawah ini, dengan atribut wajibnya berupa atribut <code class="html-attr" style="color:#90ca1c">src</code>.</p>\r\n\r\n<pre>\r\n<code>&lt;img src="nama_file.ekstensi"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Source</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">src</code> (<strong>source</strong>) digunakan untuk menempatkan URL sumber dari gambar yang akan ditampilkan. Tag <code>img</code> tidak akan bekerja sebagaimana mestinya jika tidak ada atribut ini di dalamnya.</p>\r\n\r\n<p>Sebagai contoh, kita menampilkan gambar emotikon berekstensi <code>.gif</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;img src="http://localhost/helloworld/assets/img/feed/semangka.gif"&gt;</code></pre>\r\n\r\n<p>Kita bisa memakai URL relative atau absolute tergantung kebutuhannya. Jika belum tahu apa itu URL Absolute dan URL Relative, silahkan baca materi sebelumnya tentang <strong>HTML Link</strong>.</p>\r\n</div>\r\n\r\n<h3>Atribut Pendukung</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada tag <code>img</code> ada atribut untuk mengatur ukuran gambar yaitu <code class="html-attr" style="color:#90ca1c">width</code> untuk mengatur lebarnya dan <code class="html-attr" style="color:#90ca1c">height</code> untuk mengatur tingginya. Satuan nilai yang diisikan dalam atribut ini adalah satuan dalam ukuran pixel. Atau cara lainnya untuk mengatur lebar dan tinggi gambar ini adalah dengan bantuan CSS dengan nama property <code class="css-code" style="color:#18c4e7">width</code> dan <code class="css-code" style="color:#18c4e7">height</code> juga.</p>\r\n\r\n<p>Sedangkan untuk atribut <code class="html-attr" style="color:#90ca1c">alt</code> atau kepanjangan dari alternative ini adalah sebagai petunjuk gambar apabila gambar gagal dimunculkan oleh browser karena kesalahan penulisan URL di dalam atribut <code class="html-attr" style="color:#90ca1c">src</code>.</p>\r\n\r\n<p>Atau bisa juga menggantikan gambar jika web broser telah disetting untuk tidak menampilkan gambar.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;gambar dengan atribut width, height dan alt&lt;/h3&gt;\r\n&lt;img src="http://localhost/helloworld/assets/img/aurora.jpg" width="400" height="200" alt="gambar-langit"&gt;</code></pre>\r\n\r\n<div class="note">Atribut <code class="html-attr" style="color:#90ca1c">alt</code> juga berperan penting untuk mesin pencari seperti Google. Karena cara kerja google yang meng-index seluruh situs dengan memproses tulisan yang ada, Google tidak mengerti isi dari gambar tanpa bantuan deskripsi yang ditulis dalam atribut alt. Hal ini menambah pentingnya menambahkan atribut alt.</div>\r\n</div>\r\n\r\n<h3>Gambar dari Web Lain</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Setiap gambar yang diunggah ke internet akan selalu memiliki alamat URL. Kita juga bisa menampilkan gambar dengan sumber berupa link URL dari halaman web lainnya. Istilah ini biasa disebut <strong>hotlink</strong>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh gambar yang diambil dari situs w3schools&lt;/h3&gt;\r\n&lt;img src="http://www.w3schools.com/html/pic_mountain.jpg" alt="gambar-hotlink-dari-w3schools"&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Tag Picture HTML5</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>HTML5 memperkenalkan tag <code class="language-html">&lt;picture&gt;</code> untuk menambahkan lebih banyak fleksibilitas untuk menentukan gambar mana yang akan ditampilkan oleh browser berdasarkan lebar perangkat yang sedang mengaksesnya.</p>\r\n\r\n<p>Di dalam tag <code>picture</code> berisi sejumlah elemen dalam tag <code class="language-html">&lt;source&gt;</code>, yang masing-masing isinya merujuk kepada gambar yang berbeda. Dengan cara ini browser dapat memilih gambar yang paling sesuai dengan tampilan perangkat saat ini.</p>\r\n\r\n<p>Di setiap elemen tag <code>source</code> kita bisa memberikan nilai berupa gambar yang akan ditampilkan sesuai lebar perangkat. Cara menggunakannya yaitu menambahkan atribut <code class="html-attr" style="color:#90ca1c">media</code> dan atribut <code class="html-attr" style="color:#90ca1c">scrset</code>. Atribut <code>media</code> diisikan dengan nilai lebar layar minimal atau maksimal untuk ditampilkan gambarnya, sedangkan <code>scrset</code> untuk diisikan sumber gambarnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag picture&lt;/h3&gt;\r\n\r\n&lt;picture&gt;\r\n  &lt;!--gambar yang akan tampil di perangkat dengan lebar layar minimal 650px--&gt;\r\n  &lt;source media="(min-width: 650px)" srcset="http://localhost/helloworld/assets/img/pink_flowers.jpg"&gt;\r\n  &lt;!--gambar yang akan tampil di perangkat dengan lebar layar minimal 465px--&gt;\r\n  &lt;source media="(min-width: 465px)" srcset="http://localhost/helloworld/assets/img/white_flower.jpg"&gt;\r\n  &lt;!--gambar yang akan tampil jika browser tidak suport tag picture--&gt;\r\n  &lt;img src="http://localhost/helloworld/assets/img/feed/hai.gif" alt="hai" style="width: auto;"&gt;\r\n&lt;/picture&gt;\r\n\r\n&lt;h3&gt;cobalah mengatur lebar jendela browser agar mengetahui bagaimana cara kerjanya&lt;/h3&gt;</code></pre>\r\n\r\n<div class="note">Selalu tambahkan elemen <code class="language-html">&lt;img&gt;</code> sebagai elemen cadangan terakhir dari elemen <code class="language-html">&lt;picture&gt;</code>. Elemen <code>img</code> akan digunakan oleh browser yang tidak mendukung tag <code>picture</code>, atau jika tidak ada lebar layar yang cocok untuk menampilkan spesifikasi yang ada dalam tag <code class="language-html">&lt;source&gt;</code>.</div>\r\n</div>\r\n', '543', 0, 1554171121, 1573707271),
(11, 'h59vuc0', '1', 'h1', 13, 'HTML Table', 'Membuat Tabel dengan HTML', 'membuat-tabel-dengan-html', 1, '<p>Tabel seringkali digunakan untuk menampilkan data dalam bentuk baris dan kolom agar tampilannya bisa terstruktur dengan baik dan cara membacanya pun menjadi lebih mudah. Data yang disajikan di dalam tabel bisa bermacam-macam, baik itu text biasa, gambar, link, dan juga bisa diisikan tabel lagi di dalamnya.</p>\r\n\r\n<p>Di HTML, kita bisa menggunakan tag <code class="language-html">&lt;table&gt;</code> untuk membuat tabel ini. Tetapi tag <code>table</code> tidak akan bekerja tanpa dukungan dari beberapa tag lainnya, termasuk juga beberapa atribut yang bisa dipakai.</p>\r\n\r\n<h3>Struktur Tabel</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk membuat tabel di HTML, kita membutuhkan setidaknya 4 tag, yaitu tag <code class="language-html">&lt;table&gt;</code>, <code class="language-html">&lt;tr&gt;</code>, <code class="language-html">&lt;th&gt;</code>, dan tag <code class="language-html">&lt;td&gt;</code>.</p>\r\n\r\n<ul>\r\n	<li>Tag <code>table</code> digunakan untuk memulai tabel</li>\r\n	<li>Tag <code>tr</code> adalah singkatan dari <strong>table row</strong>, digunakan untuk membuat baris dari tabel</li>\r\n	<li>Tag <code>th</code> adalah singkatan dari <strong>table head</strong>, digunakan untuk membuat heading atau judul per kolomnya yang secara default akan tampil dengan text lebih tebal dan berada di tengah</li>\r\n	<li>Tag <code>td</code> adalah singkatan dari <strong>table data</strong>, digunakan untuk menginput isi data ke dalam tabel</li>\r\n</ul>\r\n\r\n<p>Berikut ini adalah contoh sebuah tabel dengan menggunakan 4 tag di atas.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh struktur dasar tabel sederhana&lt;/h3&gt;\r\n&lt;table border="1" width="100%"&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Judul kolom 1&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 2&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 3&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 1, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 2, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 2, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 2, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt; Baris 3, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt; Baris 3, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 3, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n\r\n<p>Kita perlu menambahkan atribut <code class="html-attr" style="color:#90ca1c">border</code> pada tag <code>table</code> dan mengisinya dengan nilai <code>1</code> (satuan pixel) untuk memunculkan garis tepi di masing-masing cell tabel. Secara default, tabel tidak akan memiliki garis tepi (border) jika kita tidak menuliskan atribut ini atau kita mengisi nilainya dengan nilai <code>0</code>.</p>\r\n\r\n<p>Sedangkan atribut <code class="html-attr" style="color:#90ca1c">width</code> digunakan untuk mengatur lebar tabel. Jika tidak menuliskannya, maka tabel akan tampil default sesuai lebar isi konten data di dalamnya.</p>\r\n</div>\r\n\r\n<h3>Cellpadding</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dengan menambahkan atribut <code class="html-attr" style="color:#90ca1c">cellpadding</code> kita bisa mengatur jarak dari border sisi dalam tabel dengan isi text tabel itu sendiri. Nilai dari atribut ini berupa angka yang diukur dalam satuan <code>pixel</code>. Hal ini akan membuat data dari tabel lebih mudah untuk dibaca karena ruang data pada tabel menjadi lebih luas.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh tabel dengan tambahan atribut cellpadding&lt;/h3&gt;\r\n&lt;table border="1" width="100%" cellpadding="7"&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Judul kolom 1&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 2&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 3&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 1, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 2, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 2, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 2, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Cellspacing</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">cellspacing</code> digunakan untuk mengatur jarak antar border pada masing-masing cell. Nilai dari atribut ini juga berupa angka yang diukur dalam satuan pixel.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh tabel dengan tambahan atribut cellspacing&lt;/h3&gt;\r\n&lt;table border="1" width="100%" cellpadding="7" cellspacing="7"&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Judul kolom 1&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 2&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 3&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 1, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 2, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 2, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 2, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Rowspan dan Colspan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Terkadang kita butuh membuat tabel dengan jumlah kolom yang berbeda antara baris pertama dan baris lainnya, atau menggabungkan sebuah cell tabel dengan cell lainnya. Untuk keperluan ini, HTML menyediakan atribut <code class="html-attr" style="color:#90ca1c">rowspan</code> dan <code class="html-attr" style="color:#90ca1c">colspan</code>. Kedua atribut ini digunakan untuk membuat cell tabel &lsquo;bersatu&rsquo; dengan cell yang lain. Berbeda dengan atribut <code>cellpadding</code> dan <code>cellspacing</code> yang khusus ditempatkan di dalam tag <code class="language-html">&lt;table&gt;</code> atribut <code>rowspan</code> dan <code>colspan</code> ini diletakkan pada tag<strong> </strong><code class="language-html">&lt;td&gt;</code> dari<strong> </strong>sebuah tabel.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh tabel dengan colspan dan rowspan&lt;/h3&gt;\r\n&lt;table border="1" width="100%" cellpadding="7" cellspacing="7"&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Judul kolom 1&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 2&lt;/th&gt;\r\n    &lt;th&gt;Judul kolom 3&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 1, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt;Baris 1, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;Baris 2, Kolom 1&lt;/td&gt;\r\n    &lt;td colspan="2" &gt;Baris 2, Kolom 2 &amp; 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td rowspan="2"&gt; Baris 3 &amp; 4, Kolom 1&lt;/td&gt;\r\n    &lt;td&gt; Baris 3, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 3, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt; Baris 4, Kolom 2&lt;/td&gt;\r\n    &lt;td&gt; Baris 4, Kolom 3&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;</code></pre>\r\n\r\n<p>Dalam contoh diatas, kita dapat melihat bahwa tag <code>td</code> yang memiliki atribut <code>colspan</code>, akan membuat sel tabel bersatu dengan kolom disebelahnya. Sedangkan atribut <code>rowspan</code> akan membuat sel tabel bersatu dengan baris dibawahnya. Kedua atribut ini membutuhkan nilai (value), dimana nilai ini adalah seberapa banyak cell tabel yang dijadikan satu cell.</p>\r\n</div>\r\n\r\n<h3>Tabel Kompleks</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Seperti yang telah kita ketahui tentang pembuatan tabel, sebuah tabel dapat dirancang dengan menggunakan 4 tag saja, yaitu tag <code class="language-html">&lt;table&gt;</code>, tag <code class="language-html">&lt;tr&gt;</code>, tag <code class="language-html">&lt;th&gt;</code> dan tag <code class="language-html">&lt;td&gt;</code>. Namun jika kita membutuhkan pembagian struktur tabel HTML yang lebih jelas, HTML menyediakan tag khusus untuk keperluan ini, terdiri dari tag <code class="language-html">&lt;thead&gt;</code>, <code class="language-html">&lt;tfoot&gt;</code> dan <code class="language-html">&lt;tbody&gt;</code>.</p>\r\n\r\n<p>Fungsinya adalah untuk membagi struktur tabel menjadi 3 bagian, yaitu bagian header yang diwakili tag <code>thead</code>, <code>tbody</code> untuk bagian badan atau konten utama dari tabel sedangkan <code>tfoot</code> untuk bagian footer dari tabel.</p>\r\n\r\n<p>Ketiga tag ini mungkin tidak akan sering dipakai, terutama untuk membuat tabel sederhana dengan jumlah baris kurang dari 10. Namun untuk tabel yang kompleks, struktur HTML seperti ini akan memudahkan dalam mengatur tampilan tabel, terutama jika menggunakan kode CSS nantinya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    /*border-spacing: 10px;*/\r\n  }\r\n  table, th, td {\r\n    border: 2px solid blue;\r\n  }\r\n  thead th {\r\n    padding: 15px;\r\n  }\r\n  tbody td {\r\n    padding: 10px;\r\n  }\r\n  tfoot td {\r\n    padding: 15px;\r\n    text-align: center;\r\n    background-color: lightgreen;\r\n  }\r\n  table tr:nth-child(even) {\r\n    background-color: #eee;\r\n  }\r\n  table tr:nth-child(odd) {\r\n    background-color: #fff;\r\n  }\r\n  table th {\r\n    color: ;\r\n    background-color: lightgreen;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;h3&gt;contoh tabel dengan struktur lengkap&lt;/h3&gt;\r\n&lt;table&gt;\r\n  &lt;thead&gt;  \r\n    &lt;tr&gt;\r\n      &lt;th&gt;Judul kolom 1&lt;/th&gt;\r\n      &lt;th&gt;Judul kolom 2&lt;/th&gt;\r\n      &lt;th&gt;Judul kolom 3&lt;/th&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/thead&gt;\r\n  &lt;tbody&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt;Baris 1, Kolom 1&lt;/td&gt;\r\n      &lt;td&gt;Baris 1, Kolom 2&lt;/td&gt;\r\n      &lt;td&gt;Baris 1, Kolom 3&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt;Baris 2, Kolom 1&lt;/td&gt;\r\n      &lt;td&gt;Baris 2, Kolom 2&lt;/td&gt;\r\n      &lt;td&gt;Baris 2, Kolom 3&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt; Baris 3, Kolom 1&lt;/td&gt;\r\n      &lt;td&gt; Baris 3, Kolom 2&lt;/td&gt;\r\n      &lt;td&gt; Baris 3, Kolom 3&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt; Baris 4, Kolom 1&lt;/td&gt;\r\n      &lt;td&gt; Baris 4, Kolom 2&lt;/td&gt;\r\n      &lt;td&gt; Baris 4, Kolom 3&lt;/td&gt;\r\n    &lt;/tr&gt;\r\n  &lt;/tbody&gt;\r\n  &lt;tfoot&gt;\r\n    &lt;tr&gt;\r\n      &lt;td&gt;Footer kolom 1&lt;/td&gt;\r\n      &lt;td&gt;Footer kolom 2&lt;/td&gt;\r\n      &lt;td&gt;Footer kolom 3&lt;/td&gt;\r\n    &lt;/tr&gt;    \r\n  &lt;/tfoot&gt;\r\n&lt;/table&gt;</code></pre>\r\n\r\n<p>Dari contoh di atas, kita mengatur style tampilan tabel dengan menggunakan CSS, tanpa menambahkan satu atribut ke dalam tag table. Hal seperti inilah yang disarankan untuk dipakai nantinya jika sudah memiliki struktur tabel yang lebih kompleks yang menampung data sampai ratusan atau ribuan baris.</p>\r\n\r\n<p>Ada beberapa tambahan di dalam property CSS nya yaitu <code class="css-code" style="color:#18c4e7;">border-spacing</code> dan <code class="css-code" style="color:#18c4e7;">border-collapse</code>. Fungsi dari <code>border-spacing</code> sama seperti atribut <code>cellspacing</code> yang ada pada tag <code>table</code>, yaitu untuk memberi jarak spasi antar bordernya. sedangkan property <code>border-collapse</code> berguna untuk menyatukan semua border yang dimiliki setiap cell pada tabel menjadi satu atau dalam pengertian tidak terlihat dobel lagi.</p>\r\n\r\n<div class="note">Untuk penggunaan property border-spacing dan border-collapse, keduanya tidak bisa dipakai secara bersamaan. Kita harus memilih salah satunya untuk diterapkan pada tabel.</div>\r\n\r\n<div class="note">Pada setiap tabel ada dua istilah penamaan baris yaitu <code>odd</code> dan <code>even</code>. Yang disebut sebagai odd adalah urutan baris ganjil (1, 3, 5 dst) sedangkan even adalah baris genap (2, 4, 6 dst). Dengan begitu, kita bisa memberikan style yang berselang-seling antar baris di dalam sebuah tabel.</div>\r\n</div>\r\n', '1114', 0, 1554171121, 1573707292),
(12, 'h4l92tz', '1', 'h1', 14, 'HTML List', 'Membuat Daftar List di HTML', 'membuat-daftar-list-di-html', 1, '<p>Dalam HTML, untuk membuat daftar list/ daftar urutan text yang tersusun dari atas ke bawah terdiri dari 3 jenis yaitu <strong>ordered list</strong> (berurutan), <strong>unordered list</strong> (tidak berurutan) dan <strong>description list</strong>. (daftar yang memiliki deskripsi). Ordered list akan ditampilkan dengan angka atau huruf, sedangkan unordered list dengan bulatan atau kotak.</p>\r\n\r\n<h3>Unordered List</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Unordered list adalah daftar list yang listnya tidak selalu berurutan atau acak. Gunakan tag <code class="language-html">&lt;ul&gt;</code> untuk memulai list kemudian diikuti dengan tag <code class="language-html">&lt;li&gt;</code> untuk setiap listnya.</p>\r\n\r\n<p>Secara default, list yang akan tampil akan diawali dengan tanda bulatan hitam (<strong>disc</strong>). Kita bisa merubahnya menjadi beberapa tanda selain dengan bulatan hitam ini dengan menambahkan atribut style dengan nama property <code class="html-attr" style="color:#90ca1c">list-style-type</code> pada tag <code class="language-html">&lt;ul&gt;</code> atau bisa juga menuliskan stylenya pada CSS.</p>\r\n\r\n<p>Berikut adalah style property yang bisa jadi pilihannya:</p>\r\n\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">disc</code></td>\r\n			<td>membentuk tanda bulatan hitam (default)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">circle</code></td>\r\n			<td>membentuk tanda bulatan putih</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">square</code></td>\r\n			<td>membentuk tanda kotak hitam</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">none</code></td>\r\n			<td>membuat susunan daftar list tidak memiliki tanda apapun</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<p>Berikut ini adalah contoh penggunaannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nul{ \r\n  list-style-type: circle; \r\n  /*list-style-type: square;*/\r\n  /*list-style-type: none;*/\r\n}\r\n&lt;/style&gt;\r\n&lt;h1&gt;unordered list&lt;/h1&gt;\r\n&lt;h4&gt;Daftar materi belajar HTML&lt;/h4&gt;\r\n\r\n&lt;ul&gt;\r\n  &lt;li&gt;Menampilkan gambar di HTML&lt;/li&gt;\r\n  &lt;li&gt;Membuat link di HTML&lt;/li&gt;\r\n  &lt;li&gt;Membuat tabel di HTML&lt;/li&gt;\r\n  &lt;li&gt;Membuat daftar list di HTML&lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Ordered List</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Berbeda dengan unordered list yang digunakan untuk menampilkan susunan daftar list yang bersifat acak, ordered list digunakan untuk membuat daftar yang bersifat berurutan dengan tanda berupa nomor atau huruf. Gunakan tag <code class="language-html">&lt;ol&gt;</code> untuk memulai list dan setiap listnya menggunakan tag <code class="language-html">&lt;li&gt;</code>. Kita bisa merubah urutan tandanya dengan atribut <code class="html-attr" style="color:#90ca1c">type</code> dengan nilai yang berbeda atau bisa juga menulisnya di dalam CSS.</p>\r\n\r\n<p>Di bawah ini adalah pilihan nilai dari atribut type.</p>\r\n\r\n<div>\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="html-attr" style="color:#90ca1c">type=&quot;1&quot;</code></td>\r\n			<td>membentuk list dengan urutan nomor, dimulai dari angka 1, 2, 3 dst (default)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="html-attr" style="color:#90ca1c">type=&quot;A&quot;</code></td>\r\n			<td>membentuk list dengan urutan huruf kapital, dimulai dari A, B, C dst</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="html-attr" style="color:#90ca1c">type=&quot;a&quot;</code></td>\r\n			<td>membentuk list dengan urutan huruf kecil, dimulai dari a, b, c dst</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="html-attr" style="color:#90ca1c">type=&quot;I&quot;</code></td>\r\n			<td>membentuk list dengan urutan huruf romawi kapital, dimulai dari I, II, III dst</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="html-attr" style="color:#90ca1c">type=&quot;i&quot;</code></td>\r\n			<td>membentuk list dengan urutan huruf romawi kecil, dimulai dari i, ii, iii dst</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Berikut ini adalah contoh penggunaannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan unordered list&lt;/h3&gt;\r\n\r\n&lt;h4&gt;Daftar urutan materi yang harus dikuasai untuk membuat web&lt;/h4&gt;\r\n&lt;ol type="A"&gt;\r\n  &lt;li&gt;Materi HTML&lt;/li&gt;\r\n  &lt;li&gt;Materi CSS&lt;/li&gt;\r\n  &lt;li&gt;Materi JavaScript&lt;/li&gt;\r\n  &lt;li&gt;Materi PHP&lt;/li&gt;\r\n&lt;/ol&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Description List</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Description list digunakan untuk membuat list yang setiap listnya memiliki deskripsi yang berbeda-beda. Untuk membuatnya, kita menggunakan tiga tag, yaitu:</p>\r\n\r\n<div>\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="language-html">&lt;dl&gt;</code></td>\r\n			<td>untuk memulai daftar list</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="language-html">&lt;dt&gt;</code></td>\r\n			<td>untuk setiap listnya</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="language-html">&lt;dd&gt;</code></td>\r\n			<td>untuk setiap deskripsi pada listnya</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Berikut ini adalah contoh penggunaannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan description list&lt;/h3&gt;\r\n\r\n&lt;h4&gt;Deskripsi singkatan/akronim dari setiap materi web&lt;/h4&gt;\r\n&lt;dl&gt;\r\n  &lt;dt&gt;HTML&lt;/dt&gt;\r\n  &lt;dd&gt;Hypertext Markup Language&lt;/dd&gt;\r\n  &lt;dt&gt;CSS&lt;/dt&gt;\r\n  &lt;dd&gt;Cascading Style Sheets&lt;/dd&gt;\r\n  &lt;dt&gt;PHP&lt;/dt&gt;\r\n  &lt;dd&gt;PHP: Hypertext Preprocessor&lt;/dd&gt;\r\n&lt;/dl&gt;</code></pre>\r\n</div>\r\n\r\n<p>Penggunaan tag list pada HTML tidak hanya untuk membuat daftar saja. Dengan CSS, tag list dapat digunakan untuk membuat menu navigasi di dalam halaman web, seperti menu home, contact us, dll. Tag list juga dapat digunakan untuk nested list atau list bersarang, yang artinya sebuah list yang berada di dalam list lainnya.</p>\r\n', '441', 0, 1554171121, 1573707303);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(13, 'hgmdgvp', '1', 'h1', 15, 'HTML Block-Inline', 'Mengenal Sifat setiap Tag di HTML', 'mengenal-sifat-setiap-tag-di-html', 1, '<p>Setiap tag di HTML memiliki sifat tampilan default. Tampilan default ini menentukan sebuah elemen harus ditampilkan <strong>block</strong> atau <strong>inline</strong>.</p>\r\n\r\n<h3>Tipe Block</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Block adalah sifat tag yang tampilan lebarnya otomatis memenuhi lebar halaman browser dan selalu diawali dengan baris baru begitupun dengan akhirannya. Tidak peduli sedikit apapun kontennya, setiap kita menuliskan tag serupa di bawahnya maka secara otomatis akan mengambil baris baru di bawahnya.</p>\r\n\r\n<p>Beberapa tag dengan sifat block ini, diantaranya:</p>\r\n\r\n<ul>\r\n	<li><code class="language-html">&lt;h1&gt;</code> - <code class="language-html">&lt;h6&gt;</code></li>\r\n	<li><code class="language-html">&lt;p&gt;</code></li>\r\n	<li><code class="language-html">&lt;li&gt;</code> yang termasuk di dalam <code class="language-html">&lt;ul&gt;</code> atau <code class="language-html">&lt;ol&gt;</code></li>\r\n	<li><code class="language-html">&lt;div&gt;</code></li>\r\n	<li>dan beberapa tag lainnya</li>\r\n</ul>\r\n\r\n<p>Pada contoh di bawah ini, untuk mengetahui bahwa elemen memiliki lebar penuh selebar viewport browser, kita perlu menambahkan style berupa border atau warna background.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n h1, p, li, div {\r\n   border: 2px solid lightgreen;\r\n }  \r\n&lt;/style&gt;\r\n\r\n&lt;h3&gt;contoh elemen di dalam tag yang bersifat block&lt;/h3&gt;\r\n\r\n&lt;h1&gt;elemen dalam tag h1&lt;/h1&gt;\r\n&lt;p&gt;elemen dalam tag p&lt;/p&gt;\r\n&lt;ul&gt;\r\n  &lt;li&gt;elemen di dalam tag li&lt;/li&gt;\r\n&lt;/ul&gt;\r\n&lt;div&gt;elemen di dalam tag div&lt;/div&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Div</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;div&gt;</code> ini adalah tag yang paling umum digunakan untuk membangun sebuah halaman di dalam website. Elemen yang berada di dalam tag ini akan otomatis memiliki tambilan block. Penggunaannya sering ditambahkan atribut <code class="html-attr" style="color:#90ca1c">class</code> ataupun <code class="html-attr" style="color:#90ca1c">id</code> untuk memudahkan pemberian style dengan CSS.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n*{ font-family: verdana; }\r\n.div-pertama, .div-kedua {\r\n  padding: 10px;\r\n  margin: 10px;\r\n}\r\n.div-pertama{ \r\n  background-color: salmon; \r\n}\r\n.div-kedua{\r\n  background-color: lightblue;\r\n}\r\n&lt;/style&gt;\r\n&lt;h3&gt;Elemen di dalam tag div&lt;/h3&gt;\r\n&lt;div class="div-pertama"&gt;\r\n  - Apapun yang akan kita tulis di sini secara default akan ditampilkan selebar halaman browser.&lt;br&gt;\r\n  - Untuk mengetahui bahwa elemen ini bersifat block, kita tambahkan warna background.&lt;br&gt;\r\n  - Jangkauan warna background yang kita lihat menunjukkan lebar dari elemen tag div.\r\n&lt;/div&gt;\r\n&lt;div class="div-kedua"&gt;\r\n  Mirip dengan fungsi tag &amp;lt;br&amp;gt;, tag div ini akan membuat tampilan konten di dalamnya memiliki lebar 100% dari lebar layar browser.&lt;br&gt;\r\n  Tetapi fungsi aslinya adalah untuk membagi setiap bagian dari halaman untuk diberikan style yang berbeda.\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tipe Inline</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Inline adalah sifat tag yang tampilan lebarnya hanya selebar elemen itu sendiri dan tidak akan mengambil baris baru selama lebarnya masih lebih kecil dibanding lebar viewport browser. Sehingga jika menulis elemen ini lebih dari satu elemen maka tampilannya akan berjajar dari kiri ke kanan.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<p>Untuk tag yang bersifat inline adalah sebagai berikut:</p>\r\n\r\n<ul>\r\n	<li><code class="language-html">&lt;span&gt;</code></li>\r\n	<li><code class="language-html">&lt;a&gt;</code></li>\r\n	<li><code class="language-html">&lt;img&gt;</code></li>\r\n	<li><code class="language-html">&lt;input&gt;</code></li>\r\n	<li><code class="language-html">&lt;strong&gt;</code>, <code class="language-html">&lt;em&gt;</code> dan beberapa tag text formatting lainnya</li>\r\n</ul>\r\n\r\n<p>Berikut ini adalah contoh penggunakan tag yang bersifat inline secara bersamaan. Dan yang akan terjadi adalah elemen-elemen ini terlihat saling menempel ke kiri karena masing-masing lebarnya masih lebih kecil dari lebar viewport browser.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  a, img, input, strong {\r\n    border: 2px solid tomato;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;h3&gt;contoh elemen di dalam tag yang bersifat inline&lt;/h3&gt;\r\n\r\n&lt;a href="#"&gt;elemen link&lt;/a&gt;\r\n&lt;img src="http://localhost/helloworld/assets/img/feed/hai.gif"&gt;\r\n&lt;input type="text"&gt;\r\n&lt;strong&gt;text bold&lt;/strong&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Span</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code><code class="language-html">&lt;span&gt;</code> </code>biasa digunakan untuk membungkus kalimat atau kata untuk diberikan style tersendiri di dalam sebuah paragraf.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n*{ font-family: verdana; }\r\np{\r\n  line-height: 2;\r\n  background-color: lightgray;\r\n  padding: 5px;\r\n}\r\nspan{\r\n  background-color: aqua;\r\n  padding: 10px;\r\n}\r\n&lt;/style&gt;\r\n\r\n&lt;h3&gt;contoh elemen di dalam tag span&lt;/h3&gt;\r\n&lt;p&gt;\r\n  Ini adalah contoh kalimat di dalam tag p. \r\n  &lt;span&gt;Dan ini ada di dalam tag span&lt;/span&gt;. \r\n  Style bisa dilakukan di dalam tag p ini dan style berbeda bisa diberikan pada tag span. \r\n  Hal yang sama dengan tag &lt;a href="#"&gt;link&lt;/a&gt; yang akan default bersifat inline. \r\n&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Perlu diketahui bahwa sifat dasar masing-masing tag ini tidak mutlak untuk menampilkan sebuah elemen dengan sifatnya sendiri-sendiri. Kita masih dapat mengubah tampilan dasar tag-tag ini dengan menggunakan CSS seperti tag yang memiliki tampilan inline diubah menjadi tampilan block, atau sebaliknya.</div>\r\n', '538', 0, 1554171121, 1573707563),
(14, 'hqzv0lk', '1', 'h1', 16, 'HTML Attribute Class', 'Fungsi Atribut Class dan Id pada HTML', 'fungsi-atribut-class-dan-id-pada-html', 1, '<p>Kedua atribut ini sama-sama memiliki kegunaan sebagai penanda dari sebuah elemen untuk lebih memudahkan dalam proses penyeleksiannya terutama jika sudah menghubungkan HTML dengan CSS atau JavaScript. Hal ini menjadi penting karena jika kita hanya menggunakan nama tag saja sebagai penyeleksinya, yang tentunya kurang efektif jika pada pada satu halaman web kita terdapat banyak sekali elemen dengan tag yang sama, sedangkan kita menginginkan style yang berbeda-beda pada masing-masing elemennya.</p>\r\n\r\n<p>Untuk itulah ada atribut <code class="html-attr" style="color:#90ca1c">class</code> dan atribut <code class="html-attr" style="color:#90ca1c">id</code> yang bisa digunakan untuk memberikan identitas pada masing-masing tag HTML. Meski sama kegunaannya, tetapi ada perbedaan sifat yang mendasar dari keduanya.</p>\r\n\r\n<h3>Atribut Class</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">class</code> adalah atribut HTML berupa identitas yang bersifat umum. Maksud dari umum di sini adalah seperti perumpamaan di dalam sebuah sekolah yang memiliki banyak kelas. Dimana masing-masing kelas memiliki identitas yang tentunya berbeda dengan kelas-kelas yang lainnya.</p>\r\n\r\n<p>Hal sama pada HTML, jika di dalam sebuah halaman kita memiliki banyak elemen, maka kita bisa mengelompokkan semua elemen menjadi beberapa bagian berdasarkan letak dan fungsinya. Misalkan di dalam sebuah halaman, terbagi menjadi 3 bagian yaitu bagian header, menu atas, menu samping, konten utama, dan footer. Maka kita bisa memberikan nama class untuk masing-masing bagian ini untuk kemudian diberikan style yang berbeda sesuai kebutuhannya.</p>\r\n\r\n<p>Aturan penggunaan atribut <code>class</code> ini bebas. Kita dibebaskan untuk memberi nilai atribut sesuai keinginan kita asal nama atribut tidak diawali dengan angka. Boleh menggunakan tanda penghubung jika namanya terdiri dari dua kata. Sedangkan identitas yang bisa digunakan sebagai selecornya di CSS harus diawali dengan tanda titik (<code>.</code>).</p>\r\n\r\n<p>Kita juga diperbolehkan untuk memberikan nama atribut class lebih dari satu nilai. Hal ini, berguna jika kita ingin menambahkan beberapa pebedaan style terhadap elemen tersebut, tanpa menghilangkan efek style dari class sebelumnya. Caranya dengan membatasi nama class yang satu dan yang lainnya dengan tanda spasi saja.</p>\r\n\r\n<p>Perhatikan contoh penggunaanya di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nbody { font-family: verdana; }\r\n.nav-menu {\r\n  background: lightblue;\r\n  padding: 10px;\r\n}\r\n.konten {\r\n  background-color: lime;\r\n  padding: 10px;\r\n  margin: 10px;\r\n  text-align: justify;\r\n  color: white;\r\n}\r\n.berbeda {\r\n  color: blue;\r\n}\r\n.footer {\r\n  text-align: center;\r\n  background: orange;\r\n  padding: 20px;\r\n}\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div class="nav-menu"&gt;\r\n    &lt;a href="#"&gt;menu 1&lt;/a&gt;\r\n    &lt;a href="#"&gt;menu 2&lt;/a&gt;\r\n    &lt;a href="#"&gt;menu 3&lt;/a&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class="konten"&gt;\r\n    &lt;p&gt;Ini adalah contoh sebuah paragraf dengan yang dibungkus di dalam tag div dengan nama class "konten". &lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class="konten"&gt;\r\n    &lt;p&gt;Ini juga adalah contoh sebuah paragraf dengan yang dibungkus di dalam tag div lainnya dengan nama class "konten".&lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class="konten berbeda"&gt;\r\n    &lt;p&gt;Ketiga div ini memiliki nama class yang sama. Namun untuk div yang ini, memiliki nama class lagi yaitu "berbeda".&lt;/p&gt;\r\n    &lt;p&gt;Efek dari class "konten" akan mengenai ketiga div ini, sedangkan efek untuk class "berbeda" hanya untuk div ini saja.&lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;div class="footer"&gt;\r\n    &lt;p&gt;ini footer&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Karena sifat atribut <code>class</code> yang umum, maka setiap elemen bisa menggunakan nilai atau nama class yang sama untuk memberikan efek style yang sama.</p>\r\n\r\n<h4>Berbeda Tag dengan Nama Class yang sama</h4>\r\n\r\n<p>Meski di dalam HTML antar masing-masing tag memiliki tampilan default yang berbeda-beda, kita bisa memanipulasi tampilan itu menjadi sama dengan memberikan nama class yang sama pula. Seperti hal tag <code>h1</code> yang defaultnya akan tampil dengan ukuran huruf yang lebih besar dan lebih tebal daripada tag <code>p</code>. Dengan bantuan atribut class ini, kita bisa membuat kedua tag ini memiliki ukuran yang sama.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n.sama {\r\n  font-size: 16px;\r\n  font-weight: 200;\r\n}\r\n&lt;/style&gt;\r\n\r\n&lt;h1 class="sama"&gt;Ini adalah Heading&lt;/h1&gt;\r\n&lt;p class="sama"&gt;Ini adalah Paragraf&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Id</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika di dalam atribut <code>class</code>, bisa kita ibaratkan sebuah kelas di dalam sekolah, maka atribut <code>id</code> bisa kita umpakan sebagai seorang murid yang ada di dalam kelas yang berada di dalam sekolah. Setiap murid pasti akan berbeda dengan murid lainnya meski ia di dalam satu kelas yang sama.</p>\r\n\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">id</code> merupakan atribut yang nilainnya harus bersifat unik dan kita tidak diperbolehkan untuk memberikan nama id yang sama terhadap beberapa elemen di dalam sebuah halaman. Untuk memanggil selectornya ke dalam CSS, kita perlu menambahkan tanda pagar (<code>#</code>) kemudian diikuti nama atau nilai dari atribut id nya. Aturan pemberian nilai atributnya juga sama seperti class, tidak boleh diawali dengan karakter angka.</p>\r\n\r\n<p>Meski nama <code class="html-attr" style="color:#90ca1c">class</code> dan <code class="html-attr" style="color:#90ca1c">id</code> tidak bersifat <strong>case-sensitive</strong> atau mengabaikan huruf kapital, tapi lebih disarankan memakai namanya dengan huruf kecil semua.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nbody { font-family: verdana; }\r\n#id-pertama{\r\n  background-color: lightgray;\r\n  padding: 5px;\r\n}\r\n#id-kedua{\r\n  background-color: red;\r\n  padding: 10px;\r\n}\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;p id="id-pertama"&gt;Ini adalah contoh tag paragraf&lt;/p&gt;\r\n  &lt;p id="id-kedua"&gt;Ini juga adalah contoh tag paragraf&lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Penggunaan atribut <code>id</code> sebagai selector di dalam CSS sebenarnya sudah bisa ditangani dengan baik oleh atribut <code>class</code>. Atribut <code>id</code> biasanya dikhususkan untuk mengaitkan HTML dengan JavaScript yang lebih membutuhkan selector akurat termasuk sifat <strong>case-sensitif</strong> yang berlaku pada JavaScript.</p>\r\n</div>\r\n', '740', 0, 1554171121, 1573707585),
(15, 'hp0077s', '1', 'h1', 17, 'HTML Layout', 'Tag untuk Layout Halaman HTML', 'tag-untuk-layout-halaman-html', 1, '<p>Untuk membuat struktur sebuah halaman website, kita juga harus tahu bagaimana struktur itu dibentuk. HTML5 memperkenalkan sekitar 30an tag baru (dan mungkin akan terus bertambah), sebagian besar diantaranya berfungsi untuk membuat struktur HTML, atau yang dikenal dengan semantic tag.</p>\r\n\r\n<h3>Semantic Tag</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Apa yang dimaksud dengan semantic tag? <strong>Semantic Tag</strong> atau Semantic Markup, adalah sebutan untuk tag-tag HTML yang memiliki &lsquo;arti&lsquo; atau &lsquo;makna&rsquo;. Kata semantic berasal dari kata yunani yang berarti &lsquo;mempelajari arti&lsquo; (the study of meaning).</p>\r\n\r\n<p>HTML ditujukan untuk membuat struktur halaman web. Tag <code>p</code> misalnya, digunakan untuk membuat paragraf, tag <code>h1</code> untuk membuat judul/header, dan tag <code>table</code> untuk membuat tabel. Kesemua tag ini memiliki arti yang jelas, karena itu termasuk kedalam semantic tag.</p>\r\n\r\n<p>Sedangkan tag seperti <code class="language-html">&lt;div&gt;</code> dan <code class="language-html">&lt;span&gt;</code> tidak memiliki arti apa-apa, namun sering dijumpai untuk membuat struktur halaman. Jika kita pernah melihat rancangan web menggunakan CSS, tag <code>div</code> adalah tag yang sangat sering digunakan. Untuk membuat bagian header yang berisi menu navigasi atau logo, biasanya kita menggunakan tag <code class="language-html">&lt;div id=&quot;header&quot;&gt;</code>, untuk membuat footer biasanya menggunakan <code class="language-html">&lt;div id=&quot;footer&quot;&gt;</code>, sedangkan untuk menu utama bisa menggunakan <code class="language-html">&lt;div id=&quot;menu&quot;&gt;</code>. Walaupun dengan atribut <code class="html-attr" style="color:#90ca1c">id</code> kita bisa melihat &lsquo;arti&lsquo; dari tag-tag tersebut, akan tetapi tag <code>div</code> itu sendiri tidak memiliki arti apa-apa (<strong>non semantic tag</strong>).</p>\r\n\r\n<p>HTML5 memperkenalkan tag-tag baru yang ditujukan untuk mengatasi hal ini. Daripada menggunakan <code class="language-html">&lt;div id=&quot;header&quot;&gt;</code>, kita bisa menggunakan tag <code class="language-html">&lt;header&gt;</code> sebagai penanda bagian atas halaman HTML, dan tag <code class="language-html">&lt;footer&gt;</code> untuk penanda bagian bawah halaman web.</p>\r\n\r\n<p>Beberapa semantic tag yang dibawa oleh HTML5 adalah sebagai berikut:</p>\r\n\r\n<ul>\r\n	<li><code class="language-html">&lt;header&gt;</code></li>\r\n	<li><code class="language-html">&lt;nav&gt;</code></li>\r\n	<li><code class="language-html">&lt;section&gt;</code></li>\r\n	<li><code class="language-html">&lt;aside&gt;</code></li>\r\n	<li><code class="language-html">&lt;main&gt;</code></li>\r\n	<li><code class="language-html">&lt;article&gt;</code></li>\r\n	<li><code class="language-html">&lt;footer&gt;</code></li>\r\n</ul>\r\n\r\n<p>Sebagian besar dari <strong>semantic tag</strong> tersebut digunakan untuk membuat struktur atau layout halaman. Penjelasan tentang masing-masing tag ini ada di bawah.</p>\r\n</div>\r\n\r\n<h3>Default Semantic Tag</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebuah hal menarik dari semantic tag yang ada pada HTML5 adalah sebagian besar tidak memiliki style bawaan.</p>\r\n\r\n<p>Jika kita menggunakan tag <code>p</code> atau tag <code>h1</code>, kedua tag ini akan tampil pada baris baru dan berjarak beberapa spasi dari kalimat yang berada sebelumnya. Tag <code>h1</code> juga akan ditampilkan secara tebal (<strong>bold</strong>). Ini adalah style bawaan dari tag HTML.</p>\r\n\r\n<p>Tag-tag semantic pada HTML5 umumnya tidak membawa style apa-apa. Tag <code class="language-html">&lt;header&gt;</code> tidak akan membuat huruf menjadi besar seperti layaknya tag <code>h1</code>. Jadi apa fungsi tag ini?</p>\r\n\r\n<p>Kembali ke tujuan awal HTML, bahwa ia dirancang untuk membuat struktur halaman, bukan tampilkan. Efek tampilan seperti spasi (<strong>margin</strong>), huruf tebal, huruf miring, dll sebaiknya ditambahkan menggunakan CSS.</p>\r\n\r\n<p>Style bawaan dari tag <code>p</code> dan <code>h1</code> juga sering menjadi masalah apabila kita ingin mengubahnya. Bahkan adalah hal wajib bagi desainer web untuk menghapus style bawaan ini dengan metode yang dikenal dengan CSS reset. CSS reset bertujuan untuk membuang seluruh style bawaan, sehingga tag-tag HTML menjadi tanpa style sama sekali. Hal ini memudahkan perancangan desain web.</p>\r\n\r\n<p>Karena hal inilah, tag-tag semantic pada HTML5 dirancang tidak memiliki style. Tetapi kita bisa dengan mudah memperindahnya menggunakan CSS.</p>\r\n</div>\r\n\r\n<h3>Semantic Tag Layout</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Perbedaan Struktur Layout HTML versi sebelumnya dengan HTML versi 5</p>\r\n\r\n<div><img alt="Layout HTML" class="img-left" src="http://localhost/helloworld/assets/img/4.png" style="height:371px; width:315px" title="Layout HTML" /><img alt="HTML 5" class="img-right" src="http://localhost/helloworld/assets/img/5.png" style="height:373px; width:318px" title="Layout HTML 5" /></div>\r\n\r\n<p>Seperti yang telah kita bahas di atas tentang semantic tag, HTML5 mencoba menggantikan tag tanpa arti yaitu <code>div</code> yang sering digunakan untuk membuat struktur halaman web.</p>\r\n\r\n<h4>Tag Header</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;header&gt;</code> digunakan untuk bagian halaman web yang merupakan header. Tag ini bisa muncul lebih dari 1 kali, tergantung kebutuhan. Bagian atas web dimana kita meletakkan logo dan judul situs adalah tempat terbaik untuk tag <code>header</code>. Namun di bagian atas artikel dinama terdapat judul dan sub judul artikel juga bisa dibungkus dengan tag ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;header&gt;\r\n  &lt;h1&gt;Judul Website&lt;/h1&gt;\r\n  &lt;img src="http://localhost/helloworld/assets/img/feed/myc.gif" alt="logo"&gt;\r\n&lt;/header&gt;</code></pre>\r\n\r\n<h4>Tag Nav</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;nav&gt;</code> digunakan sebagai &lsquo;<strong>container</strong>&lsquo; dari menu navigasi. Sebaiknya digunakan untuk menu utama yang dirasa penting seperti pada bagian header.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;nav&gt;\r\n  &lt;a href="#"&gt;menu 1&lt;/a&gt;\r\n  &lt;a href="#"&gt;menu 2&lt;/a&gt;\r\n  &lt;a href="#"&gt;menu 3&lt;/a&gt;\r\n  &lt;a href="#"&gt;menu 4&lt;/a&gt;\r\n&lt;/nav&gt;</code></pre>\r\n\r\n<h4>Tag Section</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;section&gt;</code> digunakan untuk memisahkan bagian-bagian dari struktur web. Tag ini bisa digunakan sebagai container untuk kumpulan artikel, gallery, atau bagian lain dari halaman web yang perlu pemisahan. Walaupun tag <code>section</code> terkesan &lsquo;generik&rsquo;, tetapi jika yang kita butuhkan hanya container tanpa makna apa-apa, sebaiknya tetap menggunakan tag <code>div</code>.</p>\r\n\r\n<h4>Tag Main</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;main&gt;</code> cocok digunakan untuk menandakan bagian utama dari sebuah halaman. Berbeda dari tag <code>section</code>, tag <code>main</code> umumnya hanya digunakan 1 kali untuk bagian paling penting, yang biasanya berupa konten/artikel utama.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;main&gt;\r\n  &lt;h1&gt;Judul Utama&lt;/h1&gt;\r\n  &lt;p&gt;...penjelasan...&lt;/p&gt;\r\n  &lt;article&gt;\r\n    &lt;h2&gt;Judul Artikel 1&lt;/h2&gt;\r\n    &lt;p&gt;...penjelasan artikel 1...&lt;/p&gt;\r\n    &lt;p&gt;... &lt;/p&gt;\r\n    &lt;p&gt;... &lt;/p&gt;\r\n  &lt;/article&gt;\r\n  &lt;article&gt;\r\n    &lt;h2&gt;Judul Artikel 2&lt;/h2&gt;\r\n    &lt;p&gt;...penjelasan artikel 2...&lt;/p&gt;\r\n    &lt;p&gt;... &lt;/p&gt;\r\n    &lt;p&gt;... &lt;/p&gt;\r\n  &lt;/article&gt;\r\n&lt;/main&gt;</code></pre>\r\n\r\n<h4>Tag Article</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;article&gt;</code> bertujuan untuk menampung konten web yang merupakan artikel. Umumnya tag ini berada di dalam tag <code>section</code> atau <code>main</code>. Tag ini cocok sebagai container untuk artikel dalam sebuah blog.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;article&gt;\r\n  &lt;h2&gt;Judul Artikel&lt;/h2&gt;\r\n  &lt;p&gt;...penjelasan artikel...&lt;/p&gt;\r\n  &lt;p&gt;... &lt;/p&gt;\r\n  &lt;p&gt;... &lt;/p&gt;\r\n&lt;/article&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Desain Layout HTML5</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Desain website rata-rata menggunakan tata letak pada masing-masing elemennya. Seperti menggunakan 2 kolom, 3 kolom bahkan dengan 4 kolom, seperti layaknya halaman koran. Itu semua bisa diterapkan namun perlu dukungan dari CSS untuk menampilkan seperti apa yang diinginkan.</p>\r\n\r\n<p>Berikut ini adalah contoh penerapan tag Semantic untuk membuat struktur halaman yang &quot;<strong>responsive</strong>&quot; dengan CSS. Menggunakan 2 kolom saat lebar layar di atas 768pixel dan menjadi 1 kolom pada saat lebar layar dibawah 768pixel.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Layout HTML&lt;/title&gt;\r\n&lt;style&gt;\r\n  body { \r\n    font-family: verdana; \r\n    padding: 0; \r\n    margin: 0; \r\n    box-sizing: border-box;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n  header {\r\n    background-color: black;\r\n    color: white;\r\n    text-align: center;\r\n    padding: 5px;\r\n  }\r\n  header img {\r\n    width: 50px;\r\n    border-radius: 50%;\r\n  }\r\n  header h1 {\r\n    display: inline-block;\r\n  }\r\n  nav {\r\n    padding-top: 10px;\r\n    background-color: #ccc;\r\n    height: 35px;\r\n    text-align: center;\r\n  }\r\n  nav a {\r\n    font-size: 20px;\r\n    padding: 5px 10px;\r\n    border-radius: 30px;\r\n    background-color: yellow;\r\n    text-decoration: none;\r\n  }\r\n  aside {\r\n    float: left;\r\n    width: 30%;\r\n    background-color: #ccc;\r\n  }\r\n  section {\r\n    display: inline-block;\r\n    margin: 10px;\r\n    border: 2px solid gray;\r\n  }\r\n  section.atas, section.bawah {\r\n    padding: 15px;\r\n    min-height: 200px;\r\n  }\r\n  section.atas {\r\n    background-color: lightgreen;\r\n  }\r\n  section.bawah {\r\n    background-color: salmon;\r\n  }  \r\n  main {\r\n    width: 70%;\r\n    float: left;\r\n    text-align: center;\r\n  }\r\n  article{\r\n    padding: 10px;\r\n    display: block;\r\n    padding: 5px;\r\n    float: left;\r\n    margin : 10px;\r\n    border-radius: 10px;\r\n    width: 95%;\r\n    min-height: 200px;\r\n  }\r\n  #html { background: orange; }\r\n  #css { background-color: blue; color: white; }\r\n  #js { background-color: yellow; }\r\n  #php { background-color: purple; color: white; }\r\n  \r\n  footer {\r\n    background-color: black;\r\n    color: white;\r\n    clear: both;\r\n    text-align:center;\r\n    padding:5px;\r\n    line-height: 50px;\r\n    width: 100%;\r\n  }\r\n  @media only screen and (max-width : 768px){\r\n    aside {\r\n      float: none;\r\n      width: 100%;\r\n    }\r\n    section.atas, section.bawah {\r\n      width: 92%;\r\n      min-height: 50px;\r\n    }\r\n    main {\r\n      float: none;\r\n      width: 100%;\r\n    }\r\n  }\r\n&lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n\r\n  &lt;header&gt;\r\n    &lt;img src="http://localhost/helloworld/assets/img/feed/myc.gif"&gt;\r\n    &lt;h1&gt;Website HTML&lt;/h1&gt;\r\n  &lt;/header&gt;\r\n\r\n  &lt;nav&gt;\r\n    &lt;a href="#"&gt;Menu 1&lt;/a&gt;\r\n    &lt;a href="#"&gt;Menu 2&lt;/a&gt;\r\n    &lt;a href="#"&gt;Menu 3&lt;/a&gt;\r\n    &lt;a href="#"&gt;Menu 4&lt;/a&gt;\r\n  &lt;/nav&gt;\r\n  \r\n  &lt;aside&gt;\r\n    &lt;section class="atas"&gt;\r\n      &lt;h3&gt;Ini adalah contoh layout HTML&lt;/h3&gt;\r\n      &lt;p&gt;Dibuat dengan menggunakan tag semantic HTML5&lt;/p&gt;\r\n    &lt;/section&gt;\r\n    &lt;section class="bawah"&gt;\r\n      &lt;h3&gt;Layout HTML5 &amp; CSS&lt;/h3&gt;\r\n      &lt;p&gt;Dengan CSS sebagai peran utama dalam desainnya, membuat halaman ini bisa tampil berbeda sesuai lebar browser&lt;/p&gt;\r\n    &lt;/section&gt;\r\n  &lt;/aside&gt;\r\n  \r\n  &lt;main&gt;\r\n    &lt;article id="html"&gt;\r\n      &lt;h3&gt;Belajar HTML&lt;/h3&gt;\r\n      &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut&lt;/p&gt;\r\n    &lt;/article&gt;      \r\n    &lt;article id="css"&gt;\r\n      &lt;h3&gt;Belajar CSS&lt;/h3&gt;\r\n      &lt;p&gt;Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.&lt;/p&gt;  \r\n    &lt;/article&gt;\r\n    &lt;article id="js"&gt;\r\n      &lt;h3&gt;Belajar JavaScript&lt;/h3&gt;\r\n      &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor dolore magna aliqua.&lt;/p&gt;\r\n    &lt;/article&gt;\r\n    &lt;article id="php"&gt;\r\n      &lt;h3&gt;Belajar PHP&lt;/h3&gt;\r\n      &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor dolore magna aliqua..&lt;/p&gt;\r\n    &lt;/article&gt;    \r\n  &lt;/main&gt;  \r\n \r\n  &lt;footer&gt;\r\n    &lt;p&gt;Copyright © Allright Reserved&lt;/p&gt;\r\n  &lt;/footer&gt;\r\n  \r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Untuk beberapa property CSS yang mungkin belum begitu familiar dengan kalian yang baru belajar, kita akan memperdalam masing-masing property di materi tentang CSS sendiri.</p>\r\n</div>\r\n', '1176', 0, 1554171121, 1573707711),
(16, 'hja7y2p', '1', 'h1', 18, 'HTML Head', 'Meta Data di dalam Tag Head', 'meta-data-di-dalam-tag-head', 1, '<p>Kembali kita mengulang materi awal tentang tag <code>head</code>. Kali ini kita akan membahas tentang apa saja yang bisa ditempatkan di dalam tag ini.</p>\r\n\r\n<p>Tag <code>head</code> digunakan untuk menempatkan semua informasi tentang halaman dokumen HTML seperti yang ada di dalam tag <code class="language-html">&lt;title&gt;</code>, <code class="language-html">&lt;style&gt;</code>, <code class="language-html">&lt;meta&gt;</code>, <code class="language-html">&lt;link&gt;</code>, <code class="language-html">&lt;script&gt;</code> dan <code class="language-html">&lt;noscript&gt;</code> Semua tag ini termasuk dalam <strong>Meta Data </strong>termasuk apa yang ada di dalam tag <code class="language-html">&lt;meta&gt;</code> itu sendiri.</p>\r\n\r\n<p>Meta data adalah beberapa tag dimana tag ini ditujukan bukan kepada user, tetapi kepada web browser atau kepada &lsquo;robot program&lsquo; seperti mesin pencari (<em>search engine</em>).</p>\r\n\r\n<h3>Penulisan Tag Utama</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sejak ada HTML5 penulisan tag <code class="language-html">&lt;html&gt;</code>, <code class="language-html">&lt;head&gt;</code>, dan tag <code class="language-html">&lt;body&gt;</code> sebenarnya bisa ditinggalkan atau tidak perlu ditulis, karena browser terupdate akan mengetahui sendiri bahwa ini adalah dokumen HTML5 dan browser akan secara otomatis memberikan tag <code>html</code>, <code>head</code> dan <code>body</code> sesuai urutannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;title&gt;Judul Tab&lt;/title&gt;\r\n\r\n&lt;h1&gt;Ini heading&lt;/h1&gt;\r\n&lt;p&gt;dan ini adalah sebuah paragraf.&lt;/p&gt;</code></pre>\r\n\r\n<p>Tetapi lebih disarankan kita untuk tetap, agar kita bisa memberikan informasi yang mudah dibaca untuk kita sendiri terhadap kode yang kita buat di kemudian hari.</p>\r\n</div>\r\n\r\n<h3>Elemen Tag Title</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;title&gt;</code> digunakan untuk menujukkan judul pada tab browser disamping favicon atau logo ikon kecil yang akan selalu tampil di setiap tab browser. Kegunaannya sangatlah penting bagi <em>search engine</em>, karena inilah yang akan ditampilkan oleh halaman search engine di index pencariannya sebagai text yang mewakili seluruh isi dari halaman.</p>\r\n\r\n<p>Menuliskan tag ini adalah sebuah keharusan untuk memberikan identitas utama dari setiap halaman.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Belajar HTML - Meta Data&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Belajar Meta Data&lt;/h1&gt;\r\n  &lt;p&gt;Konten pembahasan tentang Meta Data&lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Element Tag Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;style&gt;</code> digunakan untuk menempatkan kode CSS, kode CSS menentukan tampilan HTML agar lebih menarik saat di-<em>render </em>oleh browser.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Hello Word&lt;/title&gt;\r\n  &lt;style&gt;\r\n    body { font-family: verdana; }\r\n    h1{\r\n        text-align: center;\r\n    }\r\n    article{\r\n        text-align: justify;\r\n    }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n  &lt;h1&gt;Lorem ipsum&lt;/h1&gt;\r\n  &lt;article&gt;\r\n    &lt;p&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.      \r\n    &lt;/p&gt;\r\n  &lt;/article&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Elemen Tag Link</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;link&gt;</code> sering kali digunakan untuk memanggil file external untuk diaplikasikan pada halaman HTML. Lebih spesifik lagi, tag ini akan memanggil file yang berjenis <code>stylesheet</code> atau file yang berhubungan dengan CSS dan tampilan. Tag ini merupakan tag kosog, tidak butuh tag penutup dan tidak butuh konten, hanya perlu mengisi atributnya saja berupa <code class="html-attr" style="color:#90ca1c">rel</code> dan <code class="html-attr" style="color:#90ca1c">href</code>.</p>\r\n\r\n<p>Kita akan mempelajari tentang tag ini pada materi CSS.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Hello Word&lt;/title&gt;\r\n  &lt;link rel="stylesheet" href="http://localhost/helloworld/assets/css/external-demo.css"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;article class="external-css"&gt;\r\n    &lt;h1&gt;Lorem ipsum&lt;/h1&gt;\r\n    &lt;p&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.      \r\n    &lt;/p&gt;\r\n  &lt;/article&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Elemen Tag Meta</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Elemen tag <code class="language-html">&lt;meta&gt;</code> digunakan untuk memberika informasi tentang <code>keyword</code>, <code>deskripsi</code>, <code>author</code> atau yang lainnya.</p>\r\n\r\n<p>Hal ini penting untuk menjelaskan tentang apa saja yang ingin diindex oleh mesin pencari. Di dalam tag ini, kita juga bisa menentukan karakter apa yang dipakai. Jenis character set yang biasa dipakai pada HTML5 adalah UTF-8. Kamu bisa temukan perbedaan macam-macam charset <a href="https://www.w3schools.com/html/html_charset.asp" target="_blank">disini</a>.</p>\r\n\r\n<p>Penggunaan tag <code class="language-html">&lt;meta&gt;</code> akan lebih bermanfaat jika halaman website kita sudah <em>live</em> di internet. Bisa digunakan untuk keperluan SEO (<em>Search Engine Optimization</em>).</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html lang="id"&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Hello Word&lt;/title&gt;\r\n  &lt;meta charset="UTF-8"&gt;\r\n  &lt;meta name="keywords" content="HTML, CSS, JavaScript"&gt;\r\n  &lt;meta name="description" content="Web Belajar HTML dan CSS"&gt;\r\n  &lt;meta name="author" content="Hello World"&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;Konten utama Hello World&lt;/h1&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Mengatur Viewport</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>HTML5 memperkenal metode untuk para web developer dalam mengatur viewport. Kita bisa mengatur kemampuan yang browser miliki dalam menentukan tampilan konten di dalam website sesuai dengan lebar layar perangkat yang sedang mengaksesnya.</p>\r\n\r\n<p>Misalkan sebuah website ditampilkan di layar laptop tentu ukuran skala kontennya tidak akan sama apabila dibandingkan dengan website yang diakses menggunakan layar di perangkat smartphone atau tablet. Di layar smartphone, ukuran skala in akan lebih dikecilkan lagi agar sesuai dengan viewport layar yang ada.</p>\r\n\r\n<p>Untuk mengaturnya, kita hanya perlu menambahkan satu baris kode yang ditempatkan di dalam tag <code class="language-html">&lt;meta&gt;</code></p>\r\n\r\n<pre>\r\n<code>&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</code></pre>\r\n\r\n<p><code>width = device-width</code> dimaksudkan agar halaman yang ditampilkan mengikuti lebar layar perangkat yang sedang mengkasesnya, baik itu di layar desktop, tablet, atau smartphone.</p>\r\n\r\n<p><code>initial-scale = 1.0</code> untuk mengatur <em>zoom</em> awal pada saat halaman dimuat pertama kalinya oleh browser.</p>\r\n\r\n<p>Untuk mengetahui perbedaan penggunaan pengaturan ini kita harus menyediakan viewport yang berbeda, yang pertama viewport dari browser di layar desktop dan satu lagi viewport browser dari layar smartphone. Jika kalian pernah membuka sebuah website ataupun blog dari browser di layar smartphone dan mendapati halaman pertama kali dimuat hurufnya masih kevil dan diperlukan aksi zooming untuk memperbesar ukurannya, hal itu karena tidak ada pengaturan yang menyertakan tag meta di atas.</p>\r\n\r\n<p><img alt="no viewport" class="img-left" src="http://localhost/helloworld/assets/img/no-viewport.png" style="height:375px; width:219px" title="tampilan tanpa viewport" /> <img alt="viewport" class="img-right" src="http://localhost/helloworld/assets/img/viewport.png" style="height:375px; width:219px" title="tsmpilsn dengan viewport" /></p>\r\n</div>\r\n\r\n<h3>Elemen Tag Script</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam tag <code class="language-html">&lt;script&gt;</code>, kita bisa meletakkan kode JavaScript. Dengan Javascript, halaman web kita nantinya akan lebih interaktif kepada pengunjung seperti melakukan aksi tertentu ketika sebuah tombol diklik.</p>\r\n\r\n<p>Sedangkan tag <code class="language-html">&lt;noscript&gt;</code> digunakan untuk menampilkan notifikasi apabila browser tidak mengaktifkan fitur javascriptnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Hello Word&lt;/title&gt;\r\n  &lt;link rel="stylesheet" href="http://localhost/helloworld/assets/css/external-demo.css"&gt;\r\n  &lt;script&gt;\r\n    function belajar(){\r\n      alert(''Teks dari JavaScript - Hello World'');\r\n    }\r\n  &lt;/script&gt;\r\n  &lt;style&gt;\r\n  button{\r\n    padding: 10px;\r\n    margin: 10px auto;\r\n    display: block;\r\n    background-color: #ccc;\r\n    color: #000fff;\r\n    font-size: 16px;\r\n  }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;noscript&gt;Your browser does not support JavaScript!&lt;/noscript&gt;\r\n  &lt;div class="external-css"&gt;\r\n    &lt;h1&gt;Ini Judul&lt;/h1&gt;\r\n    &lt;p&gt;Ini adalah paragraf pertama&lt;/p&gt;\r\n    &lt;p&gt;Ini adalah paragraf kedua&lt;/p&gt;\r\n    &lt;p&gt;Ini adalah paragraf ketiga&lt;/p&gt;\r\n    &lt;a href="#"&gt;Ini adalah link tautan&lt;/a&gt;\r\n    &lt;button onclick="belajar()"&gt;coba klik&lt;/button&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;\r\n\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n', '942', 0, 1554171121, 1573710162),
(17, 'hq49hiq', '1', 'h1', 19, 'HTML Entities Symbol', 'Menampilkan Karakter Khusus di HTML', 'menampilkan-karakter-khusus-di-html', 0, '<p>Untuk menampilkan beberapa karakter pada browser, kita harus mengetahui apa itu entitas/entity. Ada sejumlah karakter yang telah ditentukan oleh HTML sebagai markupnya seperti tanda lebih kecil dari <code>(&lt;)</code> atau lebih besar dari <code>(&gt;)</code>. Agar bisa menampilkan karakter ini seperti apa adanya (bukan sebagai kode), kita harus mengkonversi karakter ini dengan menulis nama entity nya. Dengan metode ini, kita bisa menampilkan karakter apa saja yang bahkan tidak ada pada keyboard kita.</p>\r\n\r\n<h3>Syntax Entity</h3>\r\n\r\n<div class="wrapper-content">\r\n<pre>\r\n<code>&amp;nama_entity;\r\natau\r\n&amp;#nomor_entity;</code></pre>\r\n\r\n<p>Berikut adalah tabel beberapa nama karakter yang sering digunakan</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-bordered" style="width:100%">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">symbol</th>\r\n			<th scope="col">nama karakter</th>\r\n			<th scope="col">nama entity</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td></td>\r\n			<td>non-breaking space</td>\r\n			<td>&amp;nbsp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&lt;</td>\r\n			<td>less than</td>\r\n			<td>&amp;lt;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&gt;</td>\r\n			<td>greater than</td>\r\n			<td>&amp;gt;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&amp;</td>\r\n			<td>ampersand</td>\r\n			<td>&amp;amp;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&copy;</td>\r\n			<td>copyright</td>\r\n			<td>&amp;copy;</td>\r\n		</tr>\r\n		<tr>\r\n			<td>&reg;</td>\r\n			<td>trademark</td>\r\n			<td>&amp;reg;</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n\r\n<pre>\r\n<code class="language-html">&lt;table border="1" cellpadding="1" cellspacing="1" width="100%"&gt;\r\n	&lt;thead&gt;\r\n		&lt;tr&gt;\r\n			&lt;th&gt;symbol karakter&lt;/th&gt;\r\n			&lt;th&gt;nama karakter&lt;/th&gt;\r\n			&lt;th&gt;nama entity&lt;/th&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/thead&gt;\r\n	&lt;tbody&gt;\r\n		&lt;tr&gt;\r\n			&lt;td&gt;&amp;nbsp;&lt;/td&gt;\r\n			&lt;td&gt;non-breaking space&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;nbsp;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td style="text-align:center"&gt;&amp;lt;&lt;/td&gt;\r\n			&lt;td&gt;less than&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;lt;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td style="text-align:center"&gt;&amp;gt;&lt;/td&gt;\r\n			&lt;td&gt;greater than&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;gt;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td style="text-align:center"&gt;&amp;amp;&lt;/td&gt;\r\n			&lt;td&gt;ampersand&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;amp;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td style="text-align:center"&gt;&amp;copy;&lt;/td&gt;\r\n			&lt;td&gt;copyright&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;copy;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n		&lt;tr&gt;\r\n			&lt;td style="text-align:center"&gt;&amp;reg;&lt;/td&gt;\r\n			&lt;td&gt;trademark&lt;/td&gt;\r\n			&lt;td&gt;&amp;amp;reg;&lt;/td&gt;\r\n		&lt;/tr&gt;\r\n	&lt;/tbody&gt;\r\n&lt;/table&gt;</code></pre>\r\n\r\n<p class="reff">Referensi <a href="https://dev.w3.org/html5/html-author/charref" target="_blank">dev.w3.org/html5/html-author/charref</a></p>\r\n', '', 0, 1554171121, 1570769881);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(18, 'h9uk9gv', '1', 'h1', 20, 'HTML Form - Part 1', 'Membuat Form dengan HTML', 'membuat-form-dengan-html', 1, '<p>Form biasanya digunakan untuk mengumpulkan data dari pengunjung web kita. Mulai dari form untuk login, form kontak, form untuk pendaftaran user, form pencarian, bahkan untuk mengirimkan data antar halaman web. Untuk pembahasannya karena memang materi tentang form ini akan lebih kompleks dari materi lainnya, kita akan membaginya menjadi 4 bagian. Elemen-elemen yang ada di dalam form ini sangat banyak sehingga tidak efisien jika dijelaskan dalam satu halam penuh.</p>\r\n\r\n<p>Penggunaan form hanya menggunakan HTML saja tidak akan terlalu berguna. Form biasanya hanya berupa <em>interface</em> yang disediakan untuk mengumpulkan data dari user, dan akan diproses dengan bahasa pemograman web seperti <strong>JavaScript</strong> atau yang lebih umumnya akan diproses oleh bahasa <em>serverside</em> seperti <strong>PHP</strong>, dan disimpan di dalam tabel <em>database</em> seperti <strong>MySQL</strong>.</p>\r\n\r\n<p>Tag dasar yang akan kita gunakan untuk membuat form di HTML adalah tag<strong> </strong><code class="language-html">&lt;form&gt;</code>, <code class="language-html">&lt;input&gt;</code>, <code class="language-html">&lt;textarea&gt;</code>, dan <code class="language-html">&lt;select&gt;</code>.</p>\r\n\r\n<h3>Tag Form</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebuah form dalam HTML harus berada di dalam tag <code class="language-html">&lt;form&gt;</code> dan diakhiri dengan <code class="language-html">&lt;/form&gt;</code>. Tag <code>form</code> akan membutuhkan beberapa atribut untuk dapat berfungsi dengan sebagaimana mestinya.</p>\r\n\r\n<p>Atribut pertama adalah <code class="html-attr" style="color:#90ca1c">action</code>, yang berfungsi untuk menjelaskan kemana data form akan dikirimkan. Biasanya nilai dari atribut <code>action</code> ini adalah alamat dari sebuah halaman PHP yang digunakan untuk memproses isi data form.</p>\r\n\r\n<p>Atribut kedua adalah <code class="html-attr" style="color:#90ca1c">method</code>, yang berfungsi untuk menjelaskan bagaimana data isian form akan dikirim oleh web browser. Nilai dari atribut method ini hanya bisa berupa <code>GET</code> atau <code>POST</code>. Penulisan nilai atribut ini tidak <em>case-sensitif</em>, <code>get</code> dengan <code>GET</code> tetap dianggap sama.</p>\r\n\r\n<p>Sebuah form bisa dikatakan utuh adalah form yang memiliki atribut action dan memiliki beberapa kolom input di dalamnya serta sebuah tombol submit untuk mengirim form sehingga dapat berfungsi sebagaimana mestinya. Berikut ini adalah struktur utama dari form, meski jika dijalankan tidak akan terjadi proses apa-apa, karena isi dari formnya masih kosong.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;struktur utama sebuah form&lt;/h3&gt;\r\n\r\n&lt;form action="url-untuk-proses-data" method="post"&gt;\r\n   ...isi form...\r\n&lt;/form&gt;</code></pre>\r\n\r\n<h4>Get dan Post, Apa perbedaan keduanya ?</h4>\r\n\r\n<p>Jika kita mengisi atribut <code class="html-attr" style="color:#90ca1c">method</code> dengan nilai <code>GET</code> (nilai default seandainya atribut <code>method</code> tidak ditulis) maka isian form akan terlihat pada kolom URL<em> </em>browser. Method ini biasanya digunakan untuk <em>query</em> pencarian. Seperti pada saat kita mengetik suatu pencarian di google, maka input pencarian kita akan tampil juga pada URL browser berupa <em>query</em> yang telah menjadi standard aturan dari website itu.</p>\r\n\r\n<p style="text-align: center;"><img alt="search google" src="http://localhost/helloworld/assets/img/get.png" style="height:73px; width:744px" title="tampilan url pencarian" /></p>\r\n\r\n<p>Sedangkan untuk <code class="html-attr" style="color:#90ca1c">method</code> <code>POST</code> biasanya digunakan untuk data yang lebih sensitif seperti yang berisi <em>password login</em>, atau <em>data registrasi</em>. Data hasil form tidak akan terlihat pada URL browser, sehingga tidak akan tercatat di history browser.</p>\r\n\r\n<p>Sebenarnya, kedua materi tentang <code>GET</code> dan <code>POST</code> ini akan lebih tepat jika dijelaskan pada materi lain yang berhubungan dengan bahasa program <em>serverside</em>. Karena kita sekarang hanya akan belajar tentang struktur tampilan pembentuk sebuah form saja.</p>\r\n</div>\r\n\r\n<p>Seperti halnya pada tag <code class="language-html">&lt;table&gt;</code> dan <code class="language-html">&lt;ul&gt;</code> yang tidak bisa bekerja sendiri tanpa ada tag pendukung lainnya, tag form juga membutuhkan isi berupa kolom input untuk dikirimkan datanya.</p>\r\n\r\n<h3>Tag Input</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;input&gt;</code> merupakan tag yang paling banyak digunakan di dalam form dan memiliki banyak bentuk, mulai dari kolom input <em>text</em> (text biasa), <em>password</em>, <em>checkbox</em>, <em>radio</em>, sampai dengan tombol <em>submit</em>, semuanya dalam bentuk tag <code class="language-html">&lt;input&gt;</code>. Tag input juga merupakan tag yang bisa berdiri sendiri tanpa butuh tag penutup seperti pada tag <code class="language-html">&lt;img&gt;</code></p>\r\n\r\n<p>Hal yang akan menjadi perbedaan dalam tag <code>input</code> ini sehingga bisa tampil dalam bermacam bentuk adalah berdasarkan nilai atribut <code class="html-attr" style="color:#90ca1c">type</code> yang diisikan. Type input ini juga semakin bertambah dengan adanya HTML5 yang memperkenalkan beberapa input type yang baru. Berikut ini adalah beberapa nilai atribut <code class="html-attr" style="color:#90ca1c">type</code> yang bisa kita pakai untuk membentuk kolom <code>input</code>. Nantinya akan kita bahas lebih lanjut pada materi berikutnya, penjelasan masing-masing dari setiap type input</p>\r\n\r\n<h4>input <code class="html-attr" style="color:#90ca1c">type</code> <code>text </code></h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh input type text&lt;/h3&gt;\r\n\r\n&lt;input type="text"&gt;</code></pre>\r\n\r\n<h4>input <code class="html-attr" style="color:#90ca1c">type</code> <code>password</code></h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh input type password&lt;/h3&gt;\r\n\r\n&lt;input type="password"&gt;</code></pre>\r\n\r\n<h4>input <code class="html-attr" style="color:#90ca1c">type</code> <code>checkbox</code></h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh input type checkbox&lt;/h3&gt;\r\n\r\n&lt;input type="checkbox"&gt;</code></pre>\r\n\r\n<h4>input <code class="html-attr" style="color:#90ca1c">type</code> <code>radio</code></h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh input type radio&lt;/h3&gt;\r\n\r\n&lt;input type="radio"&gt;</code></pre>\r\n\r\n<h4>input <code class="html-attr" style="color:#90ca1c">type</code> <code>submit</code></h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh input type submit&lt;/h3&gt;\r\n\r\n&lt;input type="submit"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Textarea</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;textarea&gt;</code> pada dasarnya sama dengan <code>input type text</code>, namun bisa lebih besar dan dapat berisi banyak baris. Panjang dan banyak baris input untuk <code>textarea</code> di atur melalui atribut <code class="html-attr" style="color:#90ca1c">rows</code> untuk jumlah baris (tinggi textarea) dan <code class="html-attr" style="color:#90ca1c">cols</code>, untuk jumlah kolom (lebar textarea) atau bisa juga mengaturnya melalui property dari CSS berupa <code class="css-code" style="color:#18c4e7">width</code> dan <code class="css-code" style="color:#18c4e7">height</code>. Tag ini biasanya sering dipakai untuk kolom inputan berupa komentar atau postingan di forum-forum yang ada di internet.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag textarea&lt;/h3&gt;\r\n\r\n&lt;textarea rows="10" cols="50"&gt;\r\n...isi textarea...\r\n&lt;/textarea&gt;</code></pre>\r\n\r\n<p>Text yang berada diantara tag ini adalah nilai yang akan dikirimkan jika form disubmit.</p>\r\n</div>\r\n\r\n<h3>Tag Select</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;select&gt;</code> digunakan untuk membuat kolom inputan yang telah tersedia nilai pilihannya berupa piilihan dalam bentuk menu <em>drop-down</em>, dan user hanya dapat memilih dari nilai yang ada. Tag <code>select</code> digunakan bersama-sama dengan tag <code class="language-html">&lt;option&gt;</code> untuk membuat box pilihannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag select&lt;/h3&gt;\r\n\r\n&lt;select&gt;\r\n  &lt;option&gt;Pilihan 1&lt;/option&gt;\r\n  &lt;option&gt;Pilihan 2&lt;/option&gt;\r\n  &lt;option&gt;Pilihan 3&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n\r\n<p>Tag <code>select</code> memiliki atribut <code class="html-attr" style="color:#90ca1c">selected</code> yang dapat ditambahkan pada tag option agar saat halaman pertama kali dimuat, kolom input <code>select</code> ini memiliki nilai atau <code class="html-attr" style="color:#90ca1c">value</code> default yang kita tetapkan sebelum nantinya dipilih lagi oleh user.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh penggunaan tag select dengan atribut selected&lt;/h3&gt;\r\n\r\n&lt;select&gt;\r\n  &lt;option&gt;Pilihan 1&lt;/option&gt;\r\n  &lt;option selected&gt;Pilihan 2&lt;/option&gt;\r\n  &lt;option&gt;Pilihan 3&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n\r\n<div class="note">Jika tag <code class="language-html">&lt;option&gt;</code> ditulis tanpa tambahan atribut <code class="html-attr" style="color:#90ca1c">value</code>, maka yang akan menjadi nilai dari pilihannya adalah text yang ada di antara tag ini. Tetapi jika ada atribut <code class="html-attr" style="color:#90ca1c">value</code> dan diisikan nilainya, maka yang dijadikan nilai pilihan adalah nilai dari atribut <code class="html-attr" style="color:#90ca1c">value</code> nya.</div>\r\n</div>\r\n\r\n<h3>Atribut Name</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Setiap tag inputan di dalam form harus ditambahkan atribut <code class="html-attr" style="color:#90ca1c">name</code> agar dapat diproses oleh web server nantinya. Ketika form dikirim, proses yang terjadi di dalam halaman <em>serverside </em>(URL yang ada di dalam attribut <code class="html-attr" style="color:#90ca1c">action</code> form) adalah, nilai dari atribut <code>name</code> pada masing-masing kolom input akan diterima menjadi variabel form sebagai <strong>identitas</strong> atau <strong>key</strong> untuk dikelola dari apa yang diinputkan oleh user. Tanpa atribut <code class="html-attr" style="color:#90ca1c">name</code> ini, bahasa <em>serverside</em> tidak akan tahu tentang apa yang diinputkan.</p>\r\n\r\n<p>Sebagai contoh, kami membuatkan halaman proses berupa bahasa <em>serverside</em> <code>PHP</code> untuk nantinya dikirimkan data dari form yang masing-masing kolom inputnya memiliki atribut name yang berbeda-beda. Halaman <em>serverside</em> hanya akan menerima atribut <code class="html-attr" style="color:#90ca1c">name</code> dan <code class="html-attr" style="color:#90ca1c">value</code> yang diinputkan dan tidak mempedulikan jenis inputnya, entah itu <code>input text</code>, <code>textarea</code>, ataupun <code>select</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;Coba masukkan datamu untuk dikirim ke file server proses.php&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;span&gt;Nama kamu : &lt;/span&gt;\r\n  &lt;input type="text" name="nama_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;span&gt;Alamat : &lt;/span&gt;\r\n  &lt;textarea name="alamat_user" cols="20" rows="5"&gt;&lt;/textarea&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;span&gt;Browser : &lt;/span&gt;\r\n  &lt;select name="browser_user"&gt;\r\n    &lt;option&gt;Google Chrome&lt;/option&gt;\r\n    &lt;option&gt;Firefox&lt;/option&gt;\r\n    &lt;option&gt;Safari&lt;/option&gt;\r\n    &lt;option&gt;Opera&lt;/option&gt;\r\n  &lt;/select&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;input type="submit" value="kirimkan data"&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Value</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">value</code> adalah atribut yang digunakan untuk menetapkan nilai default dari sebuah kolom input. Kita memberikan nilai pada atribut ini agar saat form dikirimkan (menekan tombol submit), setiap input (<code class="html-attr" style="color:#90ca1c">name</code>) akan membawa nilai default seandainya user tidak mengubahnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;coba tekan tombol submit tanpa mengubah input manapun&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;span&gt;Nama kamu : &lt;/span&gt;\r\n  &lt;input type="text" name="nama_user" value="default input text"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;span&gt;Jenis kelamin : &lt;/span&gt;\r\n  &lt;input type="radio" name="gender_user" value="Laki-laki" checked&gt; Laki-laki\r\n  &lt;input type="radio" name="gender_user" value="Perempuan"&gt; Perempuan\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;span&gt;Alamat : &lt;/span&gt;\r\n  &lt;textarea name="alamat_user" cols="20" rows="5"&gt;default textarea&lt;/textarea&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;span&gt;Browser : &lt;/span&gt;\r\n  &lt;select name="browser_user"&gt;\r\n    &lt;option&gt; --- &lt;/option&gt;\r\n    &lt;option value="Chrome"&gt;Google Chrome&lt;/option&gt;\r\n    &lt;option value="Firefox"&gt;Firefox&lt;/option&gt;\r\n    &lt;option value="Safari"&gt;Safari&lt;/option&gt;\r\n    &lt;option value="Opera" selected&gt;Opera&lt;/option&gt;\r\n  &lt;/select&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;input type="submit" value="kirimkan data"&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tag Label</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tag <code class="language-html">&lt;label&gt;</code> dalam HTML berfungsi sebagai pelengkap keterangan untuk beberapa objek form seperti input <code>text</code> <code>radio</code> atau <code>checkbox</code>. Selain memberikan keterangan, tag label juga memudahkan penggunan dalam memasukkkan data. Caranya adalah dengan menambahkan atribut <code class="html-attr" style="color:#90ca1c">for</code> untuk <code>label</code> dan diisi nilainya sesuai dengan nama <code class="html-attr" style="color:#90ca1c">id</code> sesuai kolom inputnya.</p>\r\n\r\n<p>Secara tampilan, tag label tidak akan berpengaruh apa-apa di dalam form (kecuali kita mengubahnya menggunakan CSS). Sehingga tanpa atau dengan tag label, kita tidak akan melihat perbedaannya.</p>\r\n\r\n<p>Berikut ini akan kami contohkan penggunaannya untuk mengetahui perbedaan kolom input yang menggunakan tag <code>label</code> dan yang tidak mengunakan tag <code>label</code></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;contoh kolom input tanpa menggunakan tag label&lt;/h3&gt;\r\n\r\n  &lt;span&gt;Nama : &lt;/span&gt;\r\n    &lt;input type="text" name="nama_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  \r\n  &lt;span&gt;Jenis kelamin : &lt;/span&gt;\r\n  &lt;input type="radio" name="genders" value="Laki-laki" checked&gt; Laki-laki\r\n  &lt;input type="radio" name="genders" value="Perempuan"&gt; Perempuan\r\n  &lt;br&gt;&lt;br&gt;\r\n  \r\n  &lt;span&gt;Program belajar : &lt;/span&gt;\r\n  &lt;input type="checkbox"&gt; Belajar HTML\r\n  &lt;input type="checkbox"&gt; Belajar CSS\r\n  &lt;input type="checkbox"&gt; Belajar JavaScript\r\n  &lt;br&gt;&lt;br&gt;\r\n  \r\n&lt;h3&gt;contoh kolom input yang menggunakan tag label&lt;/h3&gt;\r\n\r\n  &lt;label for="nama"&gt;Nama : &lt;/label&gt;\r\n    &lt;input id="nama" type="text" name="nama_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  \r\n  &lt;span&gt;Jenis kelamin : &lt;/span&gt;\r\n  &lt;input id="lk" type="radio" name="gender" value="Laki-laki" checked&gt;\r\n    &lt;label for="lk"&gt;Laki-laki&lt;/label&gt;\r\n  &lt;input id="pr" type="radio" name="gender" value="Perempuan"&gt;\r\n    &lt;label for="pr"&gt;Perempuan&lt;/label&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  \r\n  &lt;span&gt;Program belajar : &lt;/span&gt;\r\n  &lt;input id="html" type="checkbox"&gt;\r\n    &lt;label for="html"&gt;Belajar HTML&lt;/label&gt;\r\n  &lt;input id="css" type="checkbox"&gt;\r\n    &lt;label for="css"&gt;Belajar CSS&lt;/label&gt;\r\n  &lt;input id="js" type="checkbox"&gt;\r\n    &lt;label for="js"&gt;Belajar JavaScript&lt;/label&gt;\r\n    </code></pre>\r\n</div>\r\n', '1318', 0, 1554171121, 1573707927),
(19, 'h1kh3fq', '1', 'h1', 21, 'HTML Form - Part 2', 'Type Tag Input di dalam Form HTML', 'type-tag-input-di-dalam-form-html', 1, '<p>Seperti yang telah dijelaskan pada materi HTML Form (Part 1) tentang komponen form berupa tag <code class="language-html">&lt;input&gt;</code>. Tag ini merupakan tag yang paling banyak digunakan sebagai isi dari form karena memiliki bermacam-macam tampilan yang berbeda sesuai dengan nilai atribut <code class="html-attr" style="color:#90ca1c">type</code> nya. Dengan hadirnya HTML5, type tag <code>input</code> ini juga diperbanyak lagi untuk bisa diterapkan di berbagai keperluan kolom input pada website modern saat ini.</p>\r\n\r\n<p>Berikut ini akan kami jelaskan masing-masing <code class="html-attr" style="color:#90ca1c">type</code> tag <code>input</code></p>\r\n\r\n<h3>Input Type Text</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Type <code class="html-attr" style="color:#90ca1c">text</code> digunakan untuk membuat input yang diperuntukkan untuk kolom input berjenis text biasa. Kita bisa menambahkan atribut <code class="html-attr" style="color:#90ca1c">size</code> untuk mengatur lebar tampilan kolom inputnya dengan mengisikan nilai dalam satuan <code>pixel</code>. Atau jika telah menguasai CSS, maka serahkan semua tampilan ini kepada CSS saja tanpa menuliskan atribut untuk tampilan pada tag HTMLnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type text&lt;/h3&gt;\r\n\r\n&lt;label&gt;Nama Depan : &lt;/label&gt;\r\n&lt;input type="text" name="nama_user"&gt;\r\n&lt;br&gt;&lt;br&gt;\r\n&lt;label&gt;Nama Belakang : &lt;/label&gt;\r\n&lt;input type="text" name="nama_user" size="5"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Password</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Type <code class="html-attr" style="color:#90ca1c">password</code> digunakan untuk membuat input yang diperuntukkan khusus untuk kolom input password. Hal ini berguna untuk memberikan keamanan terhadap user agar saat mengisikan karakter di dalam kolom ini, semua karakter akan diubah menjadi karakter bintang atau bulatan hitam sebagai proteksi default dari password yang bersifat sensitif.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type password&lt;/h3&gt;\r\n\r\n&lt;label&gt;Username : &lt;/label&gt;\r\n&lt;input type="text" name="nama_user"&gt;\r\n&lt;br&gt;&lt;br&gt;\r\n&lt;label&gt;Password : &lt;/label&gt;\r\n&lt;input type="password" name="password_user"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Radio</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Type <code class="html-attr" style="color:#90ca1c">radio</code> ini akan membuat tombol radio atau tombol pilihan yang nantinya harus dipilih salah satu. Input ini bisa bekerja seperti seharusnya dengan menggunakan atribut <code class="html-attr" style="color:#90ca1c">name</code> yang sama sebagai penanda bahwa input tersebut berada di dalam satu group dan hanya dapat dipilih salah satu saja. Kita juga perlu mengatur nilai atribut <code class="html-attr" style="color:#90ca1c">value</code> karena input ini bisa diproses.</p>\r\n\r\n<p>Di dalam type ini ada atribut <code class="html-attr" style="color:#90ca1c">checked</code> yang bisa digunakan untuk menandai dipilih atau tidaknya radio tersebut sebagai nilai default awal saat dimuatnya halaman.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type radio&lt;/h3&gt;\r\n\r\n&lt;label&gt;Jenis kelamin : &lt;/label&gt;\r\n&lt;input type="radio" name="gender_user" value="Laki-laki" id="lk" checked&gt;\r\n  &lt;label for="lk"&gt;Laki-laki&lt;/label&gt;\r\n&lt;input type="radio" name="gender_user" value="Perempuan" id="pr"&gt;\r\n  &lt;label for="pr"&gt;Perempuan&lt;/label&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Checkbox</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">checkbox</code> berfungsi untuk membuat checkbox atau kotak isian yang diisi dengan cara menceklist kotak tersebut. Input ini biasa digunakan untuk pilihan yang dapat dipilih dengan lebih dari satu pilihan berbeda dengan input radio yang hanya dikhususkan untuk memilih salah satu.</p>\r\n\r\n<p>Di dalam type ini juga ada atribut <code class="html-attr" style="color:#90ca1c">checked</code> yang bisa digunakan untuk menandai dipilih atau tidaknya tombol checkbox tersebut sebagai nilai default awal saat dimuatnya halaman.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type checkbox&lt;/h3&gt;\r\n\r\n&lt;label&gt;Program Belajar : &lt;/label&gt;&lt;br&gt;&lt;br&gt;\r\n&lt;input type="checkbox" name="belajar_html" value="Belajar HTML" id="html"&gt;\r\n  &lt;label for="html"&gt;Belajar HTML&lt;/label&gt;&lt;br&gt;\r\n&lt;input type="checkbox" name="belajar_css" value="Belajar CSS" id="css"&gt;\r\n  &lt;label for="css"&gt;Belajar CSS&lt;/label&gt;&lt;br&gt;\r\n&lt;input type="checkbox" name="belajar_js" value="Belajar JavaScript" id="js" checked&gt;\r\n  &lt;label for="js"&gt;Belajar JavaScript&lt;/label&gt;  </code></pre>\r\n</div>\r\n\r\n<h3>Input Type Submit</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dengan menuliskan type <code class="html-attr" style="color:#90ca1c">submit</code> pada tag input, secara otomatis, input ini akan membentuk sebuah tombol untuk mengerimkan sebuah form. Jika kita menuliskan atribut <code class="html-attr" style="color:#90ca1c">value</code> dalam input ini, maka nilainya akan tampil sebagai text dari tombol itu. Jika tidak dituliskan, maka defaultnya tombol akan tampil dengan text &quot;<code>Submit</code>&quot;.</p>\r\n\r\n<p>Dalam membentuk sebuah tombol tag input juga memiliki type lainnya yaitu type <code class="html-attr" style="color:#90ca1c">reset</code> yang fungsinya untuk mereset semua kolom input agar kembali seperti semula (kondisi ketika halaman dimuat pertama kali).</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan tag input type submit dan reset&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;label&gt;Username : &lt;/label&gt;\r\n  &lt;input type="text" name="username_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;label&gt;Password : &lt;/label&gt;\r\n  &lt;input type="password" name="password_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;input type="submit" value="Kirim"&gt;\r\n  &lt;input type="submit"&gt;\r\n  &lt;input type="reset"&gt;\r\n&lt;/form&gt;</code></pre>\r\n\r\n<h4>Penggunaan Tag Button Sebagai Pengganti Submit</h4>\r\n\r\n<p>Tag <code class="language-html">&lt;button&gt;</code> berfungsi untuk membuat tombol baik itu di dalam form, maupun diluar form. Dibandingkan dengan tombol yang dibuat dengan <code class="language-html">&lt;input type=&rdquo;submit&rdquo;&gt;</code>, tag <code>button</code> menawarkan fleksibilitas yang lebih. Tag ini juga bisa diisikan type seperti type <code>submit</code> atau type <code>reset</code> yang memiliki fungsi sama seperti pada tag input. Perbedaannya hanya pada tag <code>button</code> ini membutuhkan tag penutup.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan tag button type submit dan reset&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;label&gt;Username : &lt;/label&gt;\r\n  &lt;input type="text" name="username_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;label&gt;Password : &lt;/label&gt;\r\n  &lt;input type="password" name="password_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;input type="submit"&gt;\r\n  &lt;button type="submit"&gt;Kirim Data&lt;/button&gt;\r\n  &lt;button type="reset"&gt;Reset Data&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n\r\n<p>Penggunaan tag <code class="language-html">&lt;button&gt;</code> ini lebih sering dan umum digunakan untuk membuat tombol di luar form seperti membuat tombol menu dan tombol lainnya. Dengan atau tanpa menggunakan atribut <code class="html-attr" style="color:#90ca1c">type=&quot;button&quot;</code>, fungsi tombol tidak akan berjalan apabila tidak ada kode JavaScript yang mengatur fungsinya. Jika kita menginginkan sebuah tombol diklik yang difungsikan selayaknya sebuah tag <code>a</code> atau link, maka tempatkanlah tag <code>a</code> di dalam tag <code>button</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  a {\r\n    text-decoration: none;\r\n    color: green;\r\n    font-size: 18px;\r\n  }\r\n  button {\r\n    padding: 10px;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;h3&gt;Membuat link di dalam tag button&lt;/h3&gt;\r\n\r\n&lt;button&gt;\r\n  &lt;a href="http://localhost/helloworld/" target="_blank"&gt;Menuju Homepage&lt;/a&gt;\r\n&lt;/button&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type File</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">file</code> digunakan untuk membuat input khusus untuk mengupload file, baik itu file gambar ataupun file dokumen. Secara default, input ini akan membentuk sebuah tombol yang ketika di-klik (&ldquo;<strong>Browse</strong>&rdquo; pada <strong>firefox</strong>, dan &ldquo;<strong>Choose File</strong>&rdquo; pada <strong>chrome</strong>) maka akan keluar jendela untuk memilih file yang akan diupload. Setelah memilih salah satu file yang akan diupload, text keterangan akan berubah menjadi nama file tersebut.</p>\r\n\r\n<p>Karena input type ini akan melibatkan bahasa <em>serverside</em> yang lebih kompleks seperti cara memindahkan (upload) gambar/file, maka kita akan bahas dilain kesempatan tentang demonstrasi dari cara mengupload gambar menggunakan bahasa <code>serverside PHP</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type file&lt;/h3&gt;\r\n\r\n&lt;input type="file"&gt;</code></pre>\r\n</div>\r\n', '807', 0, 1554171121, 1573707956),
(20, 'hds1nbz', '1', 'h1', 22, 'HTML Form - Part 3', 'Type Tag Input di HTML5', 'type-tag-input-di-html5', 1, '<p>Di HTML5 terdapat beberapa <code class="html-attr" style="color:#90ca1c">type</code> input yang baru dengan beberapa atribut khususnya. Diharapkan, kehadiran input baru ini dapat membantu para web developer untuk membuat input form menjadi lebih fleksibel dan dapat disesuaikan dengan apa yang menjadi kebutuhan dalam membuat sebuah form yang lebih modern. Namun karena relative masih baru, akan ada type input yang hanya akan berfungsi pada browser tertentu saja.</p>\r\n\r\n<p>Berikut ini akan kami rangkumkan beberapa input type yang bisa kita gunakan beserta browser yang sudah mendukung penggunaan input type ini.</p>\r\n\r\n<p>Ikon browser yang berwarna hijau berarti sudah mendukung sedangkan yang berwarna merah artinya belum mendukung.</p>\r\n\r\n<h3>Input Type Color</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw un fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw un fa-safari"></i><i class="fab fa-fw fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">color</code> digunakan untuk menampilkan input berupa pilihan warna. Defaultnya akan menampilkan sebuah jendela pop up berupa <em>color-picker</em> ketika diklik dan kita bisa memilih di dalamnya berupa pilihan warna di dalamnya. Apabila sebuah form dikirim dengan elemen input ini maka <code class="html-attr" style="color:#90ca1c">value</code> yang didapatkan berupa warna dalam bentuk kode hexadecimal seperti <code>#fffeee</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type color&lt;/h3&gt;\r\n\r\n&lt;p&gt;pilih warna pada input untuk dikirimkan ke server untuk dikembalikan dalam bentuk kode hexa&lt;/p&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;input type="color" name="warna_user"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Date</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw un fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw un fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">date</code> digunakan untuk menampilkan pilihan berupa jendela pop up <em>date-picker</em>. Hal ini akan membuat user yang ingin menuliskan format tanggal bulan dan tahun menjadi lebih mudah daripada menulisnya secara manual yang biasanya diinputkan pada input type <code class="html-attr" style="color:#90ca1c">text</code>. Kita bisa juga mengatur batas minimal dan maksimal tanggal yang akan ditampilkan dengan mengisikan nilai atribut <code class="html-attr" style="color:#90ca1c">min</code> sebagai batas minimal tanggal yang bisa dipilih dan <code class="html-attr" style="color:#90ca1c">max</code> untuk batas maksimalnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type date&lt;/h3&gt;\r\n\r\n&lt;p&gt;pilih tanggal &lt;u&gt;hanya&lt;/u&gt; dari tanggal 1 Januari 2019 sampai 31 Maret 2019&lt;/p&gt;\r\n\r\n&lt;input type="date" min="2019-01-01" max="2019-03-31"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Time</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw un fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw un fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input ini berfungsi untuk menampilkan input waktu dalam jam dan menit. Namun sayangnya format waktu yang digunakan hanya dalam format 12 jam dengan AM dan PM.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type time&lt;/h3&gt;\r\n\r\n&lt;input type="time"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Datetime</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw un fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw un fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input ini merupakan gabungan antara type <code class="html-attr" style="color:#90ca1c">date</code> dan type <code class="html-attr" style="color:#90ca1c">time</code>. Tampilannya juga masih menggunakan format 12 jam.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type date-time-local&lt;/h3&gt;\r\n\r\n&lt;input type="date-time-local"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Number</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Dengan input type <code class="html-attr" style="color:#90ca1c">number</code> ini, memungkinkan kita untuk membuat input yang khusus hanya boleh diisi berupa angka saja. Kita bisa mengatur atribut <code class="html-attr" style="color:#90ca1c">min</code> untuk menentukan batas angka minimal yang boleh dimasukkan dan <code class="html-attr" style="color:#90ca1c">max</code> untuk batas maksimal angka yang boleh dimasukkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type number&lt;/h3&gt;\r\n\r\n&lt;p&gt;masukkan angka hanya antara 5 sampai 10&lt;/p&gt;\r\n\r\n&lt;input type="number" min="5" max="10"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Email</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw un fa-safari"></i><i class="fab fa-fw fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">email</code> digunakan untuk membuat input khusus untuk diisikan alamat email. Secara default, input dengan tipe email ini akan melakukan validasi format penulisan alamat email sudah benar atau belum ketika tombol sumbit diklik. Alamat email yang valid haruslah terdapat tanda <code>@</code> dan tanda titik (<code>.</code>) serta nama domain dari email seperti <code>inicontoh@email.com</code> .</p>\r\n\r\n<p>Tampilan validasi yang ditampilkan akan berbeda pada masing-masing browser, namun umumnya hanya akan tampil berupa notifikasi kesalahan format pada email yang diinputkan dalam bentuk <em>tooltip</em>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type email&lt;/h3&gt;\r\n\r\n&lt;p&gt;masukkan sebuah alamat email untuk divalidasi oleh input ini ketika tombol submit diklik&lt;/p&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;input type="email" name="email_user"&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n\r\n<p>Kami sarankan agar semua langkah validasi ini sebaiknya kita serahkan pada program <em>serverside</em> untuk lebih amannya, karena validasi menggunakan HTML masih rawan dibobol oleh user yang kebetulan sedang jahil. Coba saja masukkan alamat email dengan memakai format email <code>contoh@email</code> saja, maka inputan akan tetap terkirim ke server.</p>\r\n</div>\r\n\r\n<h3>Input Type URL</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw un fa-safari"></i><i class="fab fa-fw fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">url</code> digunakan khusus untuk input yang akan diisi berupa alamat URL. Sama seperti type <code class="html-attr" style="color:#90ca1c">email</code>, input ini juga akan melakukan validasi ketika tombol submit diklik. Contoh alamat url yang valid adalah seperti ini <code>http://localhost/helloworld/</code>. Harus terdapat nama protokol dan nama domain dari sebuah website.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type url&lt;/h3&gt;\r\n\r\n&lt;p&gt;masukkan sebuah alamat url untuk divalidasi oleh input ini saat tombol submit diklik&lt;/p&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;input type="url" name="url_user"&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Search</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw un fa-internet-explorer"></i><i class="fab fa-fw un fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw un fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">search</code> digunakan untuk membuat kolom input pencarian. Pada dasarnya, input ini memiliki tampilan yang sama seperti pada input type <code class="html-attr" style="color:#90ca1c">text</code> biasa. Yang membedakan adalah pada input ini akan muncul tanda silang kecil di ujungnya pada saat kondisi <em>focus.</em> Fungsinya tanda silang ini adalah untuk mereset input agar kembali kosong seperti semula.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type search&lt;/h3&gt;\r\n\r\n&lt;input type="search"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Input Type Range</h3>\r\n\r\n<div class="wrapper-content"><i class="fab fa-fw fa-internet-explorer"></i><i class="fab fa-fw fa-opera"></i><i class="fab fa-fw fa-safari"></i><i class="fab fa-fw fa-firefox"></i><i class="fab fa-fw fa-chrome"></i>\r\n<p>Input type <code class="html-attr" style="color:#90ca1c">range</code> digunakan untuk membuat input angka dalam bentuk <em>slider</em> yang memiliki nilai jangkauan tertentu dimana jangkauan atau rentang ini diatur dalam atribut <code class="html-attr" style="color:#90ca1c">min</code> dan <code class="html-attr" style="color:#90ca1c">max</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input type url&lt;/h3&gt;\r\n\r\n&lt;p&gt;atur posisi slider ini untuk mengetahui nilainya pada saat disumbit&lt;/p&gt;\r\n&lt;p&gt;nilai slider di paling kiri adalah 0&lt;/p&gt;\r\n&lt;p&gt;nilai slider di paling kanan adalah 100&lt;/p&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  &lt;input type="range" name="range_user" min="0" max="100"&gt;\r\n  &lt;br&gt;&lt;br&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<p>Itulah tadi beberapa input type baru yang dibawa oleh HTML5. Input yang dimiliki HTML menjadi lebih menarik dan lebih kaya fitur, namun untuk menggunakannya, kita juga perlu mempertimbangkan tentang beberapa browser yang belum support dengan type input ini.</p>\r\n\r\n<p>Saat website kita nantinya memakai beberapa input type di atas dan kemudian diakses oleh user yang kebetulan memakai Internet Explorer sebagai browser favoritnya, maka rata-rata yang tampil adalah input type text sebagai type default dari semua type input HTML. Dan jika kamu saat ini memakai browser Google Chrome, maka seharusnya semua contoh di atas bisa dijalankan dengan baik.</p>\r\n\r\n<p>Selalu update lah browsermu jika ada notifikasi update dari pengembangnya, hal itu akan membuat beberapa elemen HTML yang masih memiliki bug atau celah tampilan bisa diminimalisir.</p>\r\n', '840', 0, 1554171121, 1573708029);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(21, 'hphu8am', '1', 'h1', 23, 'HTML Form - Part 4', 'Atribut Tag Input pada Form HTML', 'atribut-tag-input-pada-form-html', 1, '<p>Beberapa atribut seperti <code class="html-attr" style="color:#90ca1c">name</code> dan <code class="html-attr" style="color:#90ca1c">value</code> di dalam form khususnya di dalam tag <code class="language-html">&lt;input&gt;</code> telah kita bahas pada materi Form HTML, dari part 1 sampai part 3, akan tetapi masih banyak lagi atribut yang sebenarnya bisa kita pakai, apalagi dengan tambahan atribut baru dari HTML5. Berikut ini akan kita bahas tentang beberapa tambahan atribut yang belum sempat dijelaskan fungsinya.</p>\r\n\r\n<p>Atribut pada form atau lebih tepatnya pada elemen <code>input</code> berguna untuk memberikan instruksi ataupun style tertentu. Untuk atribut yang memiliki instruksi style sebaiknya diserahkan saja tampilannya menggunakan CSS, sedangkan instruksi validasi bisa diserahkan ke bahasa <em>serverside</em> atau dapat juga dilakukan dengan JavaScript. Ada beberapa atribut yang mungkin tidak akan kita jelaskan disini karena memang sangat jarang dipakai seperti validasi maxlength dan beberapa atribut untuk tampilan form.</p>\r\n\r\n<h3>Atribut Readonly</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">readonly</code> biasanya digunakan untuk menandai bahwa sebuah input ini sudah memiliki nilai, dan nilainya tidak bisa diganti lagi. Atribut ini tidak membutuhkan nilai, kita cukup menulis <code class="html-attr" style="color:#90ca1c">readonly</code> saja pada sebuah input mana yang akan kita atur. Hal ini sama saja dengan menulis atribut <code class="html-attr" style="color:#90ca1c">readonly=&quot;readonly&quot;</code> yang merupakan aturan lama bawaan dari xHTML.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;input dengan atribut readonly&lt;/h3&gt;\r\n\r\n&lt;input type="text" name="nama_user" value="Hello"&gt;\r\n&lt;br&gt;&lt;br&gt;\r\n&lt;input type="text" name="nama_user" value="Hello World" readonly&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Disabled</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">disabled</code> hampir sama fungsinya seperti <code class="html-attr" style="color:#90ca1c">readonly</code>, yaitu membuat input yang tidak bisa dilakukan perubahan terhadap nilainya. Namun fungsi sebenarnya adalah menonaktifkan sebuah input agar tidak bisa diakses.</p>\r\n\r\n<p>Atribut ini bisa bekerja pada hampir semua elemen di dalam form, baik pada elemen <code>input</code>, <code>select</code>, dan <code>textarea</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan atribut disabled untuk elemen-elemen form&lt;/h3&gt;\r\n\r\n  &lt;label&gt;Nama : &lt;/label&gt;\r\n    &lt;input type="text"&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;label&gt;Username : &lt;/label&gt;\r\n    &lt;input type="text" value="tidak perlu" readonly&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;label&gt;Username : &lt;/label&gt;\r\n    &lt;input type="text" value="non-active" disabled&gt;&lt;br&gt;&lt;br&gt;\r\n\r\n  &lt;span&gt;Jenis kelamin : &lt;/span&gt;\r\n  &lt;input type="radio" name="gender"&gt;\r\n    &lt;label&gt;Laki-laki&lt;/label&gt;\r\n  &lt;input type="radio" name="gender"&gt;\r\n    &lt;label&gt;Perempuan&lt;/label&gt;\r\n  &lt;input type="radio" name="gender" disabled&gt;\r\n    &lt;label&gt;Lainnya&lt;/label&gt;&lt;br&gt;&lt;br&gt;\r\n    \r\n  &lt;span&gt;Program belajar : &lt;/span&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;input type="checkbox" name="program_html"&gt;\r\n    &lt;label&gt;Belajar HTML&lt;/label&gt;\r\n  &lt;input type="checkbox" name="program_css"&gt;\r\n    &lt;label&gt;Belajar CSS&lt;/label&gt;\r\n  &lt;input type="checkbox" name="program_js"&gt;\r\n    &lt;label&gt;Belajar JavaScript&lt;/label&gt;\r\n  &lt;input type="checkbox" name="program_php" disabled&gt;\r\n    &lt;label&gt;Belajar PHP&lt;/label&gt;</code></pre>\r\n</div>\r\n\r\n<p>Kedua atribut di atas masih sering dipakai oleh para web developer untuk mengatur form input. Untuk selanjutnya, akan kita bahas beberapa atribut baru yang ada di HTML5.</p>\r\n\r\n<h3>Atribut Autocomplete</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">autocomplete</code> ini digunakan untuk mengatur sebuah input untuk menyediakan fitur autocomplete atau tidak dengan mengatur nilai atributnya <code class="html-attr" style="color:#90ca1c">on</code> atau <code class="html-attr" style="color:#90ca1c">off</code>.</p>\r\n\r\n<p>Semua input yang berupa kolom untuk diisi manual seperti type text, email, url dll, defaultnya adalah memiliki fitur autocomplete. Fitur autocomplete ini adalah ketika kita akan menuliskan sesuatu pada kolom input (<em>event focus</em>), maka pada setiap kolom input akan muncul text prediksi berupa text yang pernah kita masukkan pada kolom input sebelumnya berdasarkan type input dan bisa diklik untuk langsung mengisikan input secara otomatis. Untuk bisa menon-aktifkan fitur ini, kita bisa menuliskan atribut <code>autocomplete</code> dengan nilai <code>off</code> pada masing-masing kolom input yang diinginkan.</p>\r\n\r\n<p>Atribut ini juga bisa ditulis langsung di dalam tag <code class="language-html">&lt;form&gt;</code>, untuk membuat semua input dalah satu form itu memiliki pengaturan autocomplete yang sama. Namun sayangnya untuk pengguna browser Opera, atribut ini belum bisa digunakan. Untuk beberapa browser tententu seperti Chrome biasanya menyarankan agar setiap form diharuskan memiliki atribut autocomplete dengan nilai on, agar memberi kenyamanya user di dalam mengisikan data.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;mengatur fitur autocomplete pada input&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  Nama : &lt;br&gt;\r\n  &lt;input type="text" name="nama_user"&gt;&lt;br&gt;\r\n  Username : &lt;br&gt;\r\n  &lt;input type="text" name="username_user" autocomplete="off"&gt;&lt;br&gt;\r\n  Email : &lt;br&gt;\r\n  &lt;input type="email" name="email_user" autocomplete="off"&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Autofocus</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">autofocus</code> bisa kita gunakan apabila kita ingin setiap kali halaman dimuat, maka input yang memiliki atribut ini akan secara otomatis <em>focus</em> untuk diisi. Tentunya di dalam setiap halaman kita hanya bisa menuliskan atribut ini hanya pada salah satu input saja.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan atribut autofocus&lt;/h3&gt;\r\n\r\nUsername : &lt;br&gt;\r\n&lt;input type="text" name="username" autofocus&gt;&lt;br&gt;\r\nPassword : &lt;br&gt;\r\n&lt;input type="password" name="password"&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Placeholder</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Salah satu atribut baru di HTML5 yang cukup sering digunakan adalah atribut <code class="html-attr" style="color:#90ca1c">placeholder</code> . Atribut ini digunakan untuk memberikan petunjuk deskripsi input seperti pada tag label, namun tampilannya akan berada di di dalam input itu sendiri sebelum input itu diisikan sebuah nilai. Atribut ini bisa bekerja pada input type <code class="html-attr" style="color:#90ca1c">text</code>, <code class="html-attr" style="color:#90ca1c">search</code>, <code class="html-attr" style="color:#90ca1c">url</code>, <code class="html-attr" style="color:#90ca1c">email</code>, dan <code class="html-attr" style="color:#90ca1c">password</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">Username : &lt;br&gt;\r\n&lt;input type="text" name="username" placeholder="masukkan username kamu"&gt;&lt;br&gt;\r\nPassword : &lt;br&gt;\r\n&lt;input type="password" name="password" placeholder="masukkan password kamu"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Required</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">required</code> merupakan slah satu atribut yang digunakan untuk validasi. Fungsi spesifiknya adalah agar setiap input yang memiliki atribut ini <u>harus</u> diisikan nilai. Dan validasinya akan berjalan ketika tombol submit diklik.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut required mengharuskan kolom input harus diisi&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  Nama : &lt;br&gt;\r\n  &lt;input type="text" name="nama_user"&gt;&lt;br&gt;&lt;br&gt;\r\n  Username : &lt;br&gt;\r\n  &lt;input type="text" name="username_user" required&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Novalidate</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk menon-aktifkan fitur validasi dari sebuah input, kita perlu menambahkan atribut <code class="html-attr" style="color:#90ca1c">novalidate</code> di dalam tag <code class="language-html">&lt;form&gt;</code>. Nantinya jika ada kolom input khusus untuk text tertentu, entah itu berupa <code>email</code>, atau <code>url</code>, dan bisa juga untuk input yang memiliki atribut <code>required</code>, maka semua validasi bawaannya HTML akan dinonaktifkan sehingga form bisa dikirim tanpa validasi standard dari HTML.</p>\r\n\r\n<p>Nah, sekarang pertanyaannya...kenapa validasinya justru dimatikan? Hal itu untuk memberikan fleksibilitas pada kita agar nantinya kita bisa membuat validasi sesuai keinginan kita sebagai pemilik website. Bisa menggunakan JavaScript atau dengan bahasa serverside seperti PHP.</p>\r\n\r\n<p>Semua browser suport dengan atribut ini kecuali browser Safari.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut novalidate menonaktifkan validasi bawaan input HTML&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST" novalidate&gt;\r\n  Nama : &lt;br&gt;\r\n  &lt;input type="text" name="nama_user" required&gt;&lt;br&gt;&lt;br&gt;\r\n  Username : &lt;br&gt;\r\n  &lt;input type="text" name="username_user" required&gt;&lt;br&gt;&lt;br&gt;\r\n  Username : &lt;br&gt;\r\n  &lt;input type="email" name="email_user" required&gt;&lt;br&gt;&lt;br&gt;\r\n  Username : &lt;br&gt;\r\n  &lt;input type="url" name="url_user" required&gt;&lt;br&gt;&lt;br&gt;\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Atribut List</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut ini hampir mirip dengan fungsi tag <code>select</code> yaitu menampilkan data pilihan dengan tampilan <em>drop-down</em> menu. Cara membuatnya adalah dengan menuliskan tag <code class="language-html">&lt;input&gt;</code> tanpa type, kemudian menambahkan atribut <code class="html-attr" style="color:#90ca1c">list</code> dan mengisikan nilainya berupa nama id dari tag <code class="language-html">&lt;datalist&gt;</code> .</p>\r\n\r\n<p>Di dalam tag <code>datalist</code>, kita baru akan menuliskan beberapa pilihan yang dimasukkan di antara tag <code class="language-html">&lt;option&gt;</code>. Perhatikan contoh di bawah ini tentang cara penggunaannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut list dan tag datalist&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  \r\n  &lt;input list="browser" name="browser_user" placeholder="Pilih Browser"&gt;\r\n  &lt;datalist id="browser"&gt;\r\n    &lt;option value="Chrome"&gt;Chrome&lt;/option&gt;\r\n    &lt;option value="Firefox"&gt;Firefox&lt;/option&gt;\r\n    &lt;option value="Opera"&gt;Opera&lt;/option&gt;\r\n  &lt;/datalist&gt;\r\n  \r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;\r\n</code></pre>\r\n\r\n<p>Web browser Safari belum mendukung fitur atribut <code class="html-attr" style="color:#90ca1c">list</code> dan tag <code class="language-html">&lt;datalist&gt;</code> ini.</p>\r\n</div>\r\n\r\n<h3>Atribut Min dan Max</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kedua atribut ini digunakan untuk mengatur validasi batas maksimal dan batas minimal pada nilai sebuah input, terutama untuk input type <code class="html-attr" style="color:#90ca1c">number</code>, <code class="html-attr" style="color:#90ca1c">range</code> atau <code class="html-attr" style="color:#90ca1c">date</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut validasi min dan max&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  \r\n  &lt;label&gt;masukkan angka hanya antara 0 sampai 10&lt;/label&gt;&lt;br&gt;\r\n  &lt;input type="number" name="range_user" min="0" max="10"&gt;\r\n\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Multiple</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut ini hanya berlaku pada input type <code class="html-attr" style="color:#90ca1c">file</code> dan tag <code class="language-html">&lt;select&gt;.</code>  Fungsinya yaitu memperbolehkan kita untuk menginputkan lebih dari satu file dalam setiap input untuk diupload atau memperbolehkan kita memilih lebih dari satu pilihan yang disediakan di dalam tag select.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut multiple pada input type file dan tag select&lt;/h3&gt;\r\n  \r\n&lt;input type="file" multiple&gt;\r\n\r\n&lt;select multiple&gt;\r\n  &lt;option&gt;pilihan 1&lt;/option&gt;\r\n  &lt;option&gt;pilihan 2&lt;/option&gt;\r\n  &lt;option&gt;pilihan 3&lt;/option&gt;\r\n  &lt;option&gt;pilihan 4&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Pattern</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Atribut <code class="html-attr" style="color:#90ca1c">pattern</code> bekerja dengan aturan <em>regular expression</em> yaitu membuat validasi per karakter terhadap apa yang diinputkan. Artinya, jika apa yang diinputkan tidak sesuai dengan pattern <em>regular expression</em> yang telah diatur di dalam atribut pattern, maka nilai input tidak akan bisa disubmit.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;atribut validasi pattern&lt;/h3&gt;\r\n\r\n&lt;form action="http://localhost/helloworld/assets/proses.php" method="POST"&gt;\r\n  \r\n  &lt;label&gt;masukkan username antara 5 sampai 10 karakter dengan huruf kapital semua&lt;/label&gt;&lt;br&gt;\r\n  &lt;input type="text" pattern="[A-Z]{5,10}" name="username_user" placeholder="Buat Username"&gt;\r\n\r\n  &lt;button type="submit"&gt;KIRIM&lt;/button&gt;\r\n\r\n&lt;/form&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<p class="reff">Referensi <a href="https://www.w3schools.com/html/html_form_attributes.asp" target="_blank">w3schools.com/html/html_form_attributes.asp</a>.</p>\r\n', '1133', 0, 1554171121, 1573708317),
(22, 'cxdw9tc', '2', 'c1', 1, 'CSS Introduction', 'Mengenal Struktur Dasar CSS', 'mengenal-struktur-dasar-css', 1, '<h3>Penulisan CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada materi tentang HTML khususnya HTML CSS, kita sudah belajar cara memberikan warna tampilan agar halaman HTML memiliki desain yang lebih berwarna. Dari semua struktur desain itu adalah berkat adanya CSS yang berperan utama sebagai pengatur tampilan dari HTML.</p>\r\n\r\n<p>Secara sederhana, CSS adalah kumpulan kode yang digunakan untuk mendefinisikan desain dari bahasa markup, dan bahasa markup salah satunya adalah HTML. Sehingga, fungsi utama dari CSS yang akan kita bahas adalah untuk mengatur tampilan struktur kode HTML agar bisa ditampilkan sesuai desain yang telah dirancang sebelumnya sampai akhirnya bisa menjadi sebuah halaman website.</p>\r\n\r\n<p>Jika pada HTML kita akan sering menulis kode dengan istilah Tag, Atribut dan Elemen, maka lain halnya dengan menulis kode di CSS. Kita akan akan selalu menuliskan tiga istilah dasarnya, yaitu <code class="css-code" style="color:#18c4e7">selector</code>, <code class="css-code" style="color:#18c4e7">property</code> dan <code class="css-code" style="color:#18c4e7">value</code>. Semua kode CSS nantinya akan selalu berhubungan dengan ketiga istilah ini.</p>\r\n\r\n<p style="text-align:center"><img alt="syntax CSS" src="http://localhost/helloworld/assets/img/selector.gif" style="height:119px; width:569px" title="syntax CSS" /></p>\r\n</div>\r\n\r\n<h3>Selector CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Karena kode CSS digunakan untuk mengubah atau memanipulasi tampilan dari tag HTML, CSS membutuhkan suatu cara untuk mengaitkan atau menghubungkan kode CSS dengan tag HTML yang sesuai. Hal inilah yang dimaksud dengan <code class="css-code" style="color:#18c4e7">selector</code> dalam CSS. Sesuai dengan namanya sebagai penyeleksi, <code class="css-code" style="color:#18c4e7">selector</code> digunakan untuk mencari bagian dokumen yang ingin dimanipulasi atau yang ingin di-style. Misalnya, &ldquo;<em>cari seluruh tag <code>p</code> di dalam sebuah dokumen HTML</em>&rdquo; atau &ldquo;<em>cari seluruh tag HTML yang memiliki atribut class=&rdquo;warning</em>&rdquo;.</p>\r\n\r\n<p>Selector didalam CSS dapat menjadi kompleks tergantung kebutuhannya. Berikut ini adalah 5 jenis selector dasar yang biasa digunakan.</p>\r\n\r\n<h4>Universal Selector</h4>\r\n\r\n<p><code class="css-code" style="color:#18c4e7">universal selector</code> hanya ada 1 di dalam CSS, yaitu tanda bintang (<code>*</code>). Selector ini digunakan untuk mencari semua tag yang ada.</p>\r\n\r\n<h4>Selector dengan Nama Tag</h4>\r\n\r\n<p><code class="css-code" style="color:#18c4e7">selector tag</code> adalah istilah untuk selector yang nilainya merupakan tag HTML itu sendiri. Setiap tag HTML bisa digunakan sebagai selector, dan seluruh tag tersebut akan ditangkap oleh selector ini<em>.</em></p>\r\n\r\n<h4>Selector dengan Nama Class</h4>\r\n\r\n<p><code class="css-code" style="color:#18c4e7">selector class</code> merupakan salah satu selector yang paling umum dan paling sering digunakan. Selector class akan mencari seluruh tag yang memiliki atribut class dengan nilai yang sesuai. Sebuah nama class dapat dimiliki oleh lebih dari satu tag, dan dalam sebuah tag dapat memiliki lebih dari satu nama class.</p>\r\n\r\n<p>Untuk menggunakannya, kita perlu mengawali selector ini dengan tanda titik (<code>.</code>) kemudian diikuti nama class dari elemen yang akan di-style.</p>\r\n\r\n<h4>Selector dengan Nama Id</h4>\r\n\r\n<p><code class="css-code" style="color:#18c4e7">selector Id</code> bersama-sama dengan<strong> </strong>selector class merupakan selector paling umum dan juga sering dipakai (walau tidak sesering class selector). Penggunaan<em> </em>Id selector hampir sama dengan class selector, dengan perbedaan jika pada Class Selector kita menggunakan atribut class untuk tag HTML, untuk Id selector, kita menggunakan atribut id.</p>\r\n\r\n<p>Atribut id selain untuk selector CSS, juga berperan sebagai kode unik untuk masing-masing tag (terutama dipakai untuk kode JavaScript). Karena hal tersebut, id yang digunakan harus unik dan tidak boleh sama. Dengan kata lain, Id hanya bisa digunakan satu kali dalam sebuah halaman web dan tidak boleh sama.</p>\r\n\r\n<p>Untuk menggunakannya, kita perlu mengawali selector ini dengan tanda pagar (<code>#</code>) kemudian diikuti nama id dari elemen yang akan di-style.</p>\r\n\r\n<h4>Selector dengan Nama Atribut</h4>\r\n\r\n<p>Selector dasar yang terakhir adalah <code class="css-code" style="color:#18c4e7">selector atribut</code>.<strong> </strong>Selector ini sedikit lebih <em>advanced </em>dibandingkan dengan selector-selector sebelumnya. Atribut Selector ini digunakan untuk mencari seluruh tag yang memiliki atribut yang dituliskan.</p>\r\n\r\n<p>Cara menggunakannya, kita perlu menuliskan nama atribut yang ingin dijadikan selector di dalam tanda kurung siku (<code>[]</code>).</p>\r\n\r\n<p>Untuk lebih jelasnya tentang kelima selector ini, mari kita lihat contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n\r\n  /*selector universal*/\r\n  * { font-family: verdana; color: gray; border: 1px solid gray; padding: 15px; }\r\n  \r\n  /*selector tag*/\r\n  h2 { color: salmon; }\r\n  \r\n  /*selector class*/\r\n  .pertama { background-color: lightblue; }\r\n  .sekali { border: 2px solid red; }\r\n  \r\n  /*selector id*/\r\n  #list { background-color: lime; }\r\n \r\n  /*selector atribut*/\r\n  [href] { border: none; color: blue; }\r\n  [type="text"] { padding: 5px; width: 100%; }\r\n\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama sekali"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li id="list"&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;\r\n    &lt;a href="#"&gt;sebuah link&lt;/a&gt;&lt;br&gt;&lt;br&gt;\r\n    &lt;input type="text" placeholder="sebuah input"&gt;\r\n  &lt;/section&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Selain 5 jenis selector di atas, masih ada lebih banyak lagi jenis selector yang bisa kita gunakan, tergantung pada kebutuhan kita dalam mendesain halaman HTML yang memiliki struktur lebih rumit. Biasanya, 5 selector di atas akan dirangkai membentuk sebuah <em>query</em> yang akan merujuk pada sebuah elemen yang lebih spesifik. Dari sini juga kita akan mengenal istilah <code>parent</code> dan <code>child</code> atau hubungan antar elemen di dalam sebuah dokumen.</p>\r\n\r\n<p>Berikut ini adalah beberapa jenis selector gabungan untuk membentuk sebuah <em>query</em> yang lebih spesifik.</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-striped" style="width:100%">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">Selector</th>\r\n			<th scope="col">Contoh</th>\r\n			<th scope="col">Penjelasan</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td><strong>elemen , elemen</strong></td>\r\n			<td><code>div,</code> <code>p</code></td>\r\n			<td>pilih semua elemen <code class="language-html">&lt;div&gt;</code> dan semua elemen <code class="language-html">&lt;p&gt;</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>elemen elemen</strong></td>\r\n			<td><code>div p</code></td>\r\n			<td>pilih semua elemen <code class="language-html">&lt;p&gt;</code> yang ada di dalam elemen <code class="language-html">&lt;div&gt;</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>elemen.class</strong></td>\r\n			<td><code>div.nama-class</code></td>\r\n			<td>pilih semua elemen <code class="language-html">&lt;div&gt;</code> yang memiliki nama class tersebut (penulisan tanpa tanda spasi)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>elemen &gt; elemen</strong></td>\r\n			<td><code>div &gt; p</code></td>\r\n			<td>pilih semua elemen <code class="language-html">&lt;p&gt;</code> yang parentnya adalah elemen <code class="language-html">&lt;div&gt;</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><strong>elemen + elemen</strong></td>\r\n			<td><code>div + p</code></td>\r\n			<td>pilih semua elemen <code class="language-html">&lt;p&gt;</code> yang berada setelah (<em>bukan di dalam</em>) elemen <code class="language-html">&lt;div&gt;</code></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Perhatikan implementasinya di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;style&gt;\r\n  * {\r\n    padding: 10px;\r\n    margin: 5px;\r\n    font-family: Verdana;\r\n  }\r\n  main , section {\r\n    border: 1px solid yellow;\r\n    color: #f1f1f1;\r\n  }\r\n  /*elemen elemen*/\r\n  main p { background-color: red ; }\r\n  /*elemen.class*/\r\n  p.pertama { border: 2px solid green; }\r\n  /*elemen elemen elemen*/\r\n  section div p { background-color: green; }\r\n  /*elemen parent &gt; elemen child*/\r\n  section &gt; p { background-color: blue; }\r\n  /*elemen p setelah elemen div*/\r\n  div + p { background-color: gray; }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  \r\n  &lt;main&gt;\r\n    &lt;p&gt;elemen p di dalam main&lt;/p&gt;\r\n  &lt;/main&gt;\r\n  &lt;p class="pertama"&gt;elemen p yang punya nama class "pertama"&lt;/p&gt;\r\n  &lt;section&gt;\r\n    &lt;div&gt;\r\n      &lt;p&gt;elemen p di dalam div dan di dalam section&lt;/p&gt;\r\n    &lt;/div&gt;\r\n    &lt;p&gt;elemen p yang berada di luar div dan juga setelah div&lt;/p&gt;\r\n    &lt;p&gt;elemen p di luar div dan di dalam section&lt;/p&gt;\r\n    &lt;p&gt;elemen p di luar div dan di dalam section lagi&lt;/p&gt;\r\n  &lt;/section&gt;\r\n\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Untuk dokumentasi lebih lengkapnya, bisa kita kunjungi di situs <a href="https://w3schools.com/cssref/css_selectors.asp" target="_blank">w3shools</a>.</p>\r\n</div>\r\n\r\n<h3>Property CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Yang dimaksud dengan <code class="css-code" style="color:#18c4e7">property</code> pada CSS adalah jenis style apa yang akan diubah dari sebuah elemen HTML.</p>\r\n\r\n<p>CSS memiliki banyak sekali nama property yang dapat digunakan agar menampilkan hasil akhir yang kita inginkan. Hampir semua property dalam CSS dapat dipakai untuk seluruh selector. Sebagian mungkin sudah familiar dari beberapa materi di HTML seperti property <code class="css-code" style="color:#18c4e7">background-color</code> untuk mengubah warna background, <code class="css-code" style="color:#18c4e7">color</code> untuk mengubah warna text, <code class="css-code" style="color:#18c4e7">font-family</code> untuk mengubah jenis font dan lain sebagainya.</p>\r\n\r\n<p>Cara penulisan untuk nama property yang lebih dari satu kata adalah dengan mengganti tanda spasi menjadi tanda penghubung minus (<code>-</code>).</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nh2 {\r\n  color: red;\r\n  background-color: limegreen;\r\n  padding: 20px;\r\n  border: 1px solid red;\r\n  display: inline-block;\r\n}\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li id="list"&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;    \r\n  &lt;/section&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Value CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika di HTML nama value adalah sebuah atribut pada tag, maka di CSS <code class="css-code" style="color:#18c4e7">value</code> ini bisa dikatakan sebagai nilai dari property. Misalkan untuk property <code class="css-code" style="color:#18c4e7">background-color : red;</code> . Nah &quot;<em>red</em>&quot; adalah nilai atau <code class="css-code" style="color:#18c4e7">value</code> dari property <code class="css-code" style="color:#18c4e7">background-color</code>.</p>\r\n\r\n<p>Setiap property bisa memiliki value yang berbeda-beda, jadi kita tidak bisa menulis secara asal value dari setiap property seperti saat kita menulis property <code class="css-code" style="color:#18c4e7">color : 16px;</code> , hal itu tidak akan dimengerti oleh browser, atau dianggap <strong>invalid value</strong> karena property diisi dengan value yang tidak tepat.</p>\r\n\r\n<p>Property dan value nya akan selalu berhubungan. Keduanya selalu dihubungkan dengan tanda titik dua (<code>:</code>). Sedangkan untuk membatasi antar <em>property:value</em> dengan <em>property:value</em> yang lain adalah dengan menggunakan tanda titik koma (<code>;</code>) . Tata cara penulisan deklarasi property dan value yang lebih dari satu boleh ditulis dalam satu baris, atau bisa juga ditulis di baris baru untuk memudahkan kita dalam membaca kodenya saja.</p>\r\n\r\n<pre>\r\n<code>selector { property: value }\r\n\r\nselector { property: value; property: value; }\r\n\r\nselector {\r\n  property: value;\r\n  property: value;\r\n}</code></pre>\r\n</div>\r\n\r\n<h3>Comment CSS</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika pada HTML kita menggunakan tanda <code>&lt;!-- ... --&gt;</code> sebagai penanda komentar dari kode HTML, di CSS kita harus menggunakan tanda <code>/* ... */</code> sebagai penanda bahwa text atau baris kode tersebut adalah komentar, dan tidak akan dieksekusi oleh browser sebagai kode CSS.</p>\r\n\r\n<p>Jalankan kode di bawah ini kemudian hapus tanda komentarnya dengan menekan <kbd>Ctrl</kbd> dan <kbd><sup>?</sup> <sub>/</sub></kbd> secara bersamaan pada saat pointer kursor aktif pada baris kode yang memiliki tanda komentar.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n /** { border: 1px solid gray; padding: 15px; }*/\r\n /*body { font-family: verdana; color: gray; }*/\r\n /*h2 { color: salmon; }*/\r\n /*.pertama { background-color: lightblue; }*/\r\n /*#list { background-color: lime; }*/\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li id="list"&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;    \r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n </code></pre>\r\n</div>\r\n', '1369', 0, 1554171121, 1573705987),
(23, 'crb9bz0', '2', 'c1', 2, 'CSS Styling', 'Metode Penulisan CSS pada HTML', 'metode-penulisan-css-pada-html', 1, '<p>Pada materi HTML, kita juga sudah mempelajari sedikit tentang tata cara menempatkan kode CSS. Pada kesempatan kali ini, kita akan mempelajari lebih detail lagi tentang cara menghubungkan CSS dengan HTML.</p>\r\n\r\n<p>Secara garis besar, terdapat 3 cara menginput kode CSS ke dalam HTML, yaitu metode <strong>Inline Style</strong>, <strong>Internal Style</strong>, dan <strong>External Style</strong>.</p>\r\n\r\n<h3>Metode Inline Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode Inline Style adalah cara menginput kode CSS langsung ke dalam tag HTML dengan menggunakan atribut HTML berupa <code class="html-attr" style="color:#90ca1c">style</code> sebagai perantaranya. Meski cara ini tidak disarankan karena akan membuat kode CSS bercampur dengan struktur HTML nya dan tidak memenuhi tujuan dibuatnya CSS agar desain terpisah dengan konten, namun ada juga kelebihannya, yaitu jika deklarasi style yang dibuat untuk sebuah elemen ada lebih dari satu, maka CSS metode inline inilah yang akan diprioritaskan untuk digunakan style nya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  &lt;section style="background-color: lightblue; padding: 10px;"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p style="background-color: lime;"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Metode Internal Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode Internal Style, atau disebut juga <strong>Embedded Style Sheets </strong>digunakan untuk memisahkan kode CSS dari tag HTML namun tetap dalam satu halaman HTML. Penulisan CSS yang semulanya ditulis di dalam atribut <code class="html-attr" style="color:#90ca1c">style</code> di masing-masing elemen, dikumpulkan pada pada sebuah tag <code class="language-html">&lt;style&gt;</code>.</p>\r\n\r\n<p>Meskipun apa yang ada di dalam tag <code>style</code> tidak akan tampak pada tampilan konten di browser (tampilan elemen <code class="language-html">&lt;body&gt;</code>), namun lebih disarankan agar tag <code>style</code> ini ditempatkan di dalam tag <code class="language-html">&lt;head&gt;</code> karena tag <code>style</code> merupakan bagian dari Meta Data dari sebuah dokumen HTML.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n  &lt;style&gt;\r\n   * { border: 1px solid gray; padding: 15px; }\r\n   body { font-family: verdana; color: gray; }\r\n   h2 { color: salmon; }\r\n   .pertama { background-color: lightblue; }\r\n   #list { background-color: lime; }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li id="list"&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;    \r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Contoh metode <strong>internal style</strong> diatas sudah lebih baik daripada <strong>inline style</strong>, karena kita sudah memisahkan CSS dari HTML. Seluruh kode CSS akan berada pada tag head dari HTML.</p>\r\n\r\n<p>Namun kekurangan menggunakan <strong>internal style</strong> adalah<strong>, </strong>jika kita ingin memiliki beberapa halaman dengan style yang sama, maka kita harus membuat kode CSS yang serupa pada masing-masing halaman.</p>\r\n</div>\r\n\r\n<h3>Metode External Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita bisa mengatasi apa yang menjadi kekurangan dari metode Internal Style yaitu dengan menggunakan metode yang disebut <strong>External Style</strong>. Yaitu dengan cara menulis kode CSS di dalam sebuah file yang benar-benar terpisah dengan file HTMLnya. Untuk menyimpan file CSS ini, kita harus menambahkan extensi file berupa <code>.css</code>. Perlu diketahui juga, untuk menulis kode di dalam file di extensi ini, kita tidak perlu lagi menuliskan tag <code class="language-html">&lt;style&gt;</code>, karena file ini hanya boleh diisi murni kode CSS saja.</p>\r\n\r\n<p>Untuk cara penggunaannya sendiri, kita perlu memanggilnya file yang berextensi <code>.css</code> tadi di halaman HTML yang mana yang membutuhkan style nya. Kita bisa menggunakan dua cara untuk memanggil file CSS ini yaitu dengan metode <code>@import</code> atau juga dengan metode tag <code class="language-html">&lt;link&gt;</code></p>\r\n\r\n<p>Sebagai contoh, kita membuat file berdama <code>demo.css</code> yang isinya seperti yang di bawah ini. Selector untuk CSSnya sengaja kita buat dengan nama <code class="html-attr" style="color:#90ca1c">class</code> untuk lebih memudahkan dalam menyeleksi elemen HTML secara spesifik.</p>\r\n\r\n<pre>\r\n<code>  .judul { text-align: center; }\r\n  .pertama, .kedua { padding: 10px; width: 400px; margin: 10px auto; }\r\n  .pertama { background-color: lightblue; }\r\n  .kedua { background-color: royalblue; color: white; }</code></pre>\r\n\r\n<h4>Menggunakan Metode @import</h4>\r\n\r\n<p>Metode @import digunakan untuk mengambil kode CSS yang ada di dalam file .css untuk ditempatkan di dalam tag <code class="language-html">&lt;style&gt;</code>. Syntax penulisannya hanya perlu menambahkan fungsi <code>url(nama_file_css)</code>.</p>\r\n\r\n<p>Jika diterapkan pada file <code>external-demo.css</code> di atas, maka syntax nya menjadi <code>@import url(http://localhost/helloworld/assets/css/external-demo.css)</code>. Kami menggunakan alamat URL Absolute sebagai nama file yang dituliskan di dalam tanda kurung. Jika belum tahu apa itu URL Absolute, silahkan kembali lagi ke materi <a href="http://localhost/helloworld/html/editor/membuat-link-tautan-pada-html" target="_blank">HTML Link</a>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;style&gt;\r\n    @import url(http://localhost/helloworld/assets/css/external-demo.css);\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1 class="judul"&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;    \r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<h4>Menggunakan Metode Tag Link</h4>\r\n\r\n<p>Metode ini adalah metode yang paling umum digunakan para web developer. Sebenarnya fungsinya sama saja jika dibandingkan dengan menggunakan metode @import, bedanya hanyalah tata cara penulisan saja. Jika menggunakan tag <code class="language-html">&lt;link&gt;</code> maka kita tidak membutuhkan tag <code class="language-html">&lt;style&gt;</code> lagi. Tag link membutuhkan atribut berupa <code class="html-attr" style="color:#90ca1c">rel=&quot;stylesheest&quot;</code> yang nantinya akan menentukan jenis file yang ingin dipanggil. Dalam hal ini, file yang dipanggil adalah jenis file <code>stylesheet</code> bernama <code>external-demo.css</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;link rel="stylesheet" href="http://localhost/helloworld/assets/css/external-demo.css"&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1 class="judul"&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n  &lt;section class="kedua"&gt;\r\n    &lt;h2&gt;list Lorem ipsum&lt;/h2&gt;\r\n    &lt;ul&gt;\r\n      &lt;li&gt;list lorem ipsum 1.1&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.2&lt;/li&gt;\r\n      &lt;li&gt;list lorem ipsum 1.3&lt;/li&gt;\r\n    &lt;/ul&gt;    \r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Multiple Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Saat kita sudah berjibaku dengan namanya CSS dengan kode yang memiliki ratusan baris, maka yang akan sering terjadi adalah kita akan lupa di baris mana kita meletakkan style untuk elemen tersebut. Sedangkan kita menginginkan perubahan style pada elemen itu.</p>\r\n\r\n<p>Untuk melakukan perubahan style di dalam CSS, sebenarnya kita tidak harus menghapus dan mengganti style yang ada. Kita bisa juga menimpa style yang ada sebelumnya dengan style yang baru dengan syarat, nama selectornya harus sama seperti pada style sebelumnya. Kode CSS sendiri akan dibaca oleh browser berurutan dari baris atas sampai ujung baris bawah. Jika kita telah mendeklarasikan sebuah style untuk sebuah elemen, kemudian mendeklarasikannya lagi di baris bawahnya, maka browser akan menerapkan style pada elemen itu sesuai dengan deklarasi style yang terakhir sampai jika browser menemukan style inline yang ada pada elemen itu. Inline Style akan menjadi prioritas yang diutamakan oleh browser untuk diterapkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;link rel="stylesheet" href="http://localhost/helloworld/assets/css/external-demo.css"&gt;\r\n  &lt;style&gt;\r\n    .pertama { background-color: green; }\r\n    .pertama { background-color: yellow; }\r\n    .pertama { background-color: #f1f1f1; }\r\n    .pertama { background-color: cyan; }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1 class="judul"&gt;Hello World&lt;/h1&gt;\r\n  &lt;section class="pertama" style="background-color: crimson;"&gt;\r\n    &lt;h2&gt;paragraf hello world&lt;/h2&gt;\r\n    &lt;p&gt;Paragraf 1&lt;/p&gt;\r\n    &lt;p&gt;Paragraf 2&lt;/p&gt;\r\n    &lt;p class="p3"&gt;Paragraf 3&lt;/p&gt;\r\n  &lt;/section&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Perhatikan pada contoh di atas, kita beberapa kali melakukan deklarasi style untuk elemen <code>h1</code>, dari mulanya <code>external style</code> yang ada di dalam file external-demo.css kemudian <code>internal style</code> di dalam tag style dan terakhir <code>inline style</code> di dalam atribut style elemen <code>h1</code>. Maka style yang akan diterapkan pada pada elemen itu adalah <code class="css-code" style="color:#18c4e7">background-color: crimson</code></p>\r\n</div>\r\n', '1017', 0, 1554171121, 1573708986),
(24, 'cn17fx4', '2', 'c1', 4, 'CSS Inheritance', 'Sifat Penurunan Efek CSS', 'sifat-penurunan-efek-css', 1, '<h3>Definisi</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Inheritance dalam CSS adalah sifat penurunan efek CSS dari sebuah tag HTML kepada tag HTML lainnya. Syarat untuk inheritance adalah tag tersebut harus berada di dalam tag lainnya (<em>nested element</em>).</p>\r\n\r\n<p>Di dalam HTML, setiap tag umumnya akan berada di dalam tag lain. Untuk seluruh tag HTML, akan berada di dalam tag <code class="language-html">&lt;html&gt;</code>, dan untuk seluruh tag yang tampil di web browser akan berada di dalam tag <code class="language-html">&lt;body&gt;</code>.</p>\r\n\r\n<pre>\r\n<code>&lt;div&gt;\r\n  &lt;p&gt;Belajar tentang &lt;em&gt;inheritance&lt;/em&gt; di CSS&lt;/p&gt;\r\n&lt;/div&gt;</code></pre>\r\n\r\n<p>Dari contoh diatas, tag <code>p</code> berada di dalam tag <code>div</code>, sehingga dapat dikatakan tag <code>div</code> adalah induk (<em>parent</em>) dari tag <code>p</code>. Sedangkan tag <code>em</code> yang berada di dalam tag <code>p</code> merupakan anak (<em>child</em>) dari tag <code>p</code> dan juga merupakan cucu (<em>grandchild</em>) dari tag <code>div</code></p>\r\n\r\n<p>Jika kita memberikan kode CSS berupa <code class="css-code" style="color:#18c4e7;">div { color : green }</code>, maka efek dari kode CSS tersebut akan membuat seluruh text di dalam tag div akan berwarna hijau, walapun di dalam tag div juga terdapat tag-tag lainnya. Hal ini dapat dikatakan bahwa efek CSS tersebut diturunkan (<em>inherit</em>) dari tag induk (<code>div</code>) kepada tag anak (<code>p</code>) dan juga kepada tag <code>em</code>.</p>\r\n\r\n<p>Namun perlu diperhatikan bahwa tidak semua property CSS akan diturunkan dari tag induknya. Misalnya property <code class="css-code" style="color:#18c4e7;">border</code>, hanya berlaku untuk satu tag induk saja dan tidak akan diturunkan kepada tag anak.</p>\r\n</div>\r\n\r\n<h3>Nilai Property Inherit</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk memaksa proses penurunan, CSS memiliki nilai property inherit. Jika sebuah kode CSS memiliki nilai property inherit, maka property tersebut akan mencopy nilai dari tag induk (<em>parent</em>).</p>\r\n\r\n<p>Sebagai contoh, karena property border secara default tidak diturunkan, maka kita akan mencoba nilai inherit pada property border.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Inheritance&lt;/title&gt;\r\n  &lt;style&gt;\r\n    div.satu {\r\n      border: 1px solid black;\r\n      color: blue;\r\n    }\r\n    div.dua { border: 1px solid black; }\r\n    p.dua { border: inherit; }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n \r\n&lt;body&gt;\r\n  &lt;div class="satu"&gt;\r\n    &lt;p class="satu"&gt;Kalimat ini tanpa &lt;em class="satu"&gt;nilai property inherit&lt;/em&gt; CSS&lt;/p&gt;\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="dua"&gt;\r\n    &lt;p class="dua"&gt;Kalimat ini menggunakan &lt;em class="dua"&gt;nilai property inherit&lt;/em&gt; CSS&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;\r\n\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Dalam contoh kode HTML diatas, kita menggunakan dua kalimat yang memiliki nama class yang berbeda, yakni class <code>satu</code> dan class <code>dua</code>.</p>\r\n\r\n<p>Pada class satu, kita hanya membuat property border dan color dengan selector tag <code class="css-code" style="color:#18c4e7;">div.satu</code>. Karena prinsip inheritance dalam CSS, seluruh kalimat pada tag <code>div</code> yang memiliki class satu akan berwarna biru (sesuai dengan sifat inheritance-nya), namun efek border tidak diturunkan kepada tag <code>p</code>.</p>\r\n\r\n<p>Pada class dua, kita menambahkan nilai <code class="css-code" style="color:#18c4e7;">inherit</code> untuk property border pada tag <code>p</code>. Hasil dari nilai inherit ini akan membuat tag <code>p</code> juga memiliki border yang sama dengan yang dideklarasikan pada tag induknya.</p>\r\n</div>\r\n\r\n<h3>Manfaat Inheritance</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sifat inheritance CSS ini akan memudahkan dalam desain web, karena jika kita ingin membuat seluruh tulisan menjadi warna dan ukuran tertentu, cukup dengan membuat style untuk tag induk, maka seluruh tag yang berada di dalamnya akan ikut berubah. Memahami sifat inheritance ini juga merupakan salah satu poin yang penting dalam belajar CSS.</p>\r\n\r\n<p>Misalkan kita ingin seluruh font berukuran <code>14px</code>, maka kode CSSnya, cukup dengan menulis kode CSS :</p>\r\n\r\n<pre>\r\n<code>body {\r\n  font-size: 14px;\r\n}</code></pre>\r\n\r\n<p>Maka seluruh tag yang berada di dalam tag <code>body</code> (hampir semua tag merupakan child dari tag body), ukuran fontnya akan berubah menjadi <code>14px</code>, kecuali beberapa tag yang memiliki ukuran font default yang sudah ditentukan, misalnya tag <code>h1 - h6</code>.</p>\r\n</div>\r\n', '511', 0, 1557674764, 1573706161);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(25, 'cwo3968', '2', 'c1', 6, 'CSS Color', 'Cara Penggunaan Kode Warna di CSS', 'cara-penggunaan-kode-warna-di-css', 1, '<p>Dalam desain di media visual seperti televisi maupun monitor komputer, model warna yang digunakan adalah model warna <b><span style="color:#e74c3c;">RED</span>, <span style="color:#2ecc71;">GREEN</span> </b>dan<b> <span style="color:#3498db;">BLUE</span></b>. atau <b>RGB</b>. Disebut RGB, karena warna red (merah) , green (hijau) dan blue (biru) inilah dasar dari warna lainnya. Warna seperti kuning, coklat, pink, hitam dan putih berasal dari perpaduan ketiga warna ini.</p>\r\n\r\n<p>Sedangkan untuk penulisan warna di CSS ada tiga cara yang paling umum untuk diterapkan, yaitu menggunakan nama warna secara langsung, warna dengan kode RGB, dan warna dengan kode HEXA.</p>\r\n\r\n<h3>Nama Warna</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Cara ini merupakan cara yang paling sederhana dalam memberikan warna sebuah elemen, yaitu dengan menulis nama warnanya secara langsung di dalam bahasa inggris seperti <span style="color:#c0392b">red</span>, <span style="color:#2ecc71">green</span>, atau <span style="color:#2980b9">blue</span> dan warna-warna lainnya yang hampir susah untuk menghafalkan semua namanya karena ada sekitar 140 nama warna yang telah didukung oleh CSS yang di antaranya adalah <strong>aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, dan yellow</strong>.</p>\r\n\r\n<p>Sebenarnya tak perlu untuk menghafal nama-nama warna ini, karena jika kita sudah semakin sering bermain dengan nama-nama warna ini, nantinya kita akan terbiasa dengan sendirinya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { background-color : red }\r\n  .dua { background-color : green }\r\n  .tiga { background-color : blue }\r\n&lt;/style&gt;\r\n\r\n&lt;h3 class="satu"&gt;Elemen h3 dengan background-color red&lt;/h3&gt;\r\n&lt;h3 class="dua"&gt;Elemen h3 dengan background-color green&lt;/h3&gt;\r\n&lt;h3 class="tiga"&gt;Elemen h3 dengan background-color blue&lt;/h3&gt;\r\n</code></pre>\r\n\r\n<p>Untuk referensi tentang nama-nama warna yang lebih lengkap, kita bisa berkunjung ke <a href="https://www.w3schools.com/colors/colors_groups.asp" target="_blank">w3schools</a></p>\r\n</div>\r\n\r\n<h3>Kode RGB</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Cara yang kedua adalah menulis warna dengan menulis kode <code>rgb(n,n,n)</code> atau kode warna berdasarkan perpaduan antara (R) red (G) green (B) blue. Parameter yang ditulis di dalam tanda kurung dan dipisahkan dengan koma mewakili jumlah intensitas warna yang dimasukkan mulai dari red, gren, kemudian blue.</p>\r\n\r\n<p>Didalam desain web, CSS mendukung hingga <b>16.777.216 </b>kombinasi warna. Warna ini berasal dari perpaduan warna red, green dan blue. Masing-masing warna dasar ini dapat bernilai 0 sampai 255, dimana 0 adalah tanpa warna, 255 adalah warna maksimal. Dalam dunia ilmu komputer, kombinasi warna ini dikenal dengan <b>24bit warna</b>, atau disebut juga <b>true color</b>. Perpaduan ketiga warna ini akan memberi kita 256 kombinasi merah x 256 kombinasi hijau x 256 kombinasi biru = 16.777.216 kombinasi warna.</p>\r\n\r\n<p>Sebagai contoh, jika kita menuliskan kode sebagai berikut <code>rgb(0,0,255)</code> itu bisa berarti kita menuliskan warna <span style="color:#3498db;">BLUE</span>, karena nilai parameter pada <code>blue</code> diberikan nilai maksimal yaitu <code>255</code> sedangkan parameter <code>red</code> dan <code>green</code> diisi dengan nilai <code>0</code>. Dengan kata lain, nilai paduan rgb lebih didominasi warna blue dengan kadar nilai yang maksimal tanpa adanya campuran dari warna red dan green yang masing-masing bernilai 0.</p>\r\n\r\n<p>Untuk bisa lebih memahami kode RGB ini, silahkan bermain dengan hasil kode warna di bawah ini</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body{ font-family: verdana; }\r\n  .table{ width: 100%; }\r\n  #changetxt { text-align: center; font-size: 20px; margin: 30px; }\r\n&lt;/style&gt;\r\n\r\n&lt;table class="table"&gt;\r\n  &lt;tr&gt;\r\n    &lt;th&gt;Red&lt;/th&gt;\r\n    &lt;th&gt;Green&lt;/th&gt;\r\n    &lt;th&gt;Blue&lt;/th&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td id="valRed"&gt;255&lt;/td&gt;\r\n    &lt;td id="valGreen"&gt;0&lt;/td&gt;\r\n    &lt;td id="valBlue"&gt;0&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td id="red" style="height:50px;background-color:red"&gt;&lt;/td&gt;\r\n    &lt;td id="green" style="background-color:rgb(0, 255, 0)"&gt;&lt;/td&gt;\r\n    &lt;td id="blue" style="background-color:blue"&gt;&lt;/td&gt;\r\n  &lt;/tr&gt;\r\n  &lt;tr&gt;\r\n    &lt;td&gt;\r\n      &lt;input onchange="changeRed(this.value)" type="range" id="slideRed" name="slideRed" value="255" min="0" max="255"&gt;\r\n    &lt;/td&gt;\r\n    &lt;td&gt;\r\n      &lt;input onchange="changeGreen(this.value)" type="range" id="slideGreen" name="slideGreen" value="0" min="0" max="255"&gt;\r\n    &lt;/td&gt;\r\n    &lt;td&gt;\r\n      &lt;input onchange="changeBlue(this.value)" type="range" id="slideBlue" name="slideBlue" value="0" min="0" max="255"&gt;\r\n    &lt;/td&gt;\r\n  &lt;/tr&gt;\r\n&lt;/table&gt;\r\n&lt;div id="change" style="height:50px"&gt;&lt;/div&gt;\r\n&lt;div id="changetxt"&gt;&lt;/div&gt;\r\n\r\n&lt;script src="http://localhost/helloworld/assets/js/external-demo.js"&gt;&lt;/script&gt;\r\n</code></pre>\r\n\r\n<p>Untuk referensi tentang kode RGB yang lebih lengkap, kita bisa berkunjung ke <a href="http://www.w3schools.com/colors/colors_rgb.asp" target="_blank">w3schools</a></p>\r\n</div>\r\n\r\n<h3>Kode Hexadecimal</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selanjutnya yaitu menuliskan warna dengan kode HEX atau hexadecimal yang secara spesifik, nilai dari rgb(n,n,n) dikonversi menjadi bentuk hexadecimal yaitu <code>#RRGGBB</code> dimana RR (<span style="color:#e74c3c;">RED</span>), GG (<span style="color:#2ecc71;">GREEN</span>) dan BB (<span style="color:#3498db;">BLUE</span>). Nilai yang bisa dimasukkan adalah yang tadinya berupa angka 0 sampai dengan 255 diubah menjadi nilai HEX antara <code>00</code> sampai dengan <code>FF</code>. 00 sama artinya dengan 0 sedangkan FF sama artinya dengan 255 pada kode RGB.</p>\r\n\r\n<p>Sebagai contoh, jika kita menuliskan kode sebagai berikut <code>#FF0000</code> itu bisa berarti kita menuliskan warna <span style="color:#e74c3c;">RED</span>, karena nilai parameter pada <code>RR</code> diberikan nilai maksimal yaitu <code>FF</code> sedangkan parameter <code>GG</code> dan <code>BB</code> diisi dengan nilai <code>00</code>. Dengan kata lain, nilai paduan <code>#RRGGBB</code> lebih didominasi warna <span style="color:#e74c3c;">red</span> dengan kadar nilai yang maksimal tanpa adanya campuran dari warna green dan blue yang masing-masing bernilai 00.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { background-color:#FF0000 }\r\n  .dua { background-color:#00FF00 }\r\n  .tiga { background-color:#0000FF }\r\n&lt;/style&gt;\r\n\r\n&lt;h3 class="satu"&gt;\r\nrgb(255,0,0) dikonversi menjadi #FF0000\r\n&lt;/h3&gt;\r\n&lt;h3 class="dua"&gt;\r\nrgb(0,255,0) dikonversi menjadi #00FF00\r\n&lt;/h3&gt;\r\n&lt;h3 class="tiga"&gt;\r\nrgb(0,0,255)dikonversi menjadi #0000FF\r\n&lt;/h3&gt;</code></pre>\r\n\r\n<div class="note">Penulisan warna dalam kode hexa yang paling umum adalah ditulis dengan 6 digit kode setelah tanda #, namun ada beberapa penulisan yang hanya menggunakan 3 digit seperti <code>#F0F</code>. Hal itu disebut dengan <em>shorthand</em> atau penulisan singkat yang mana berarti <code>#F0F</code> sama dengan <code>#FF00FF</code></div>\r\n\r\n<p>Untuk referensi tentang kode hexa yang lebih lengkap, kita bisa berkunjung ke <a href="https://www.w3schools.com/colors/colors_hexadecimal.asp" target="_blank">w3schools </a></p>\r\n</div>\r\n\r\n<h3>Warna Transparent</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada kasus tertentu, kita terkadang ingin sebuah elemen dalam HTML menjadi transparan, untuk keperluan ini CSS menyediakan keyword <code>transparent</code> sebagai nilai. Dengan memberikan nilai transparan, sebuah elemen akan melewatkan warna dari tag dibelakangnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p.satu {\r\n    color:#0000FF;\r\n  }\r\n  p.dua {\r\n    color:#F00;\r\n  }\r\n  p.tiga {\r\n    color:rgb(10, 255, 10);\r\n  }\r\n  p.empat {\r\n    color: orange;\r\n  }\r\n  p.lima{\r\n    color:transparent;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;p class="satu"&gt;Kalimat ini akan berwarna biru&lt;/p&gt;\r\n  &lt;p class="dua"&gt;Kalimat ini akan berwarna merah&lt;/p&gt;\r\n  &lt;p class="tiga"&gt;Kalimat ini akan berwarna hijau&lt;/p&gt;\r\n  &lt;p class="empat"&gt;Kalimat ini akan berwarna orange&lt;/p&gt;\r\n  &lt;br&gt;\r\n  &lt;p class="lima"&gt;Kalimat ini hanya akan terlihat jika diblock&lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '830', 0, 1554171121, 1573708787),
(26, 'cl55g99', '2', 'c1', 7, 'CSS Background', 'Desain Background dengan CSS', 'desain-background-dengan-css', 1, '<p>Berlajar tentang desain web, tentu tidak akan lepas dari yang namanya pilihan warna, karena warna sendiri memiliki pengaruh yang kuat terhadap penampilan sesuatu, tidak terkecuali halaman web, baik itu warna font-nya ataupun warna background/latar belakangnya.</p>\r\n\r\n<p>Di dalam CSS, kita bisa mengatur sebuah background dari elemen HTML baik itu background dengan warna, background dengan gambar, atau background dengan kombinasi warna yang lebih dari satu. Mari kita pelajari penggunaan property apa saja yang bisa digunakan berserta value dari masing-masing propertynya.</p>\r\n\r\n<h3>Background Color</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Defaultnya semua elemen HTML memiliki warna background yang <code>transparent</code>. Dengan menggunakan property <code class="css-code" style="color:#18c4e7">backgroud-color</code> kita bisa untuk mengubah tampilan warna background elemen yang tadinya transparent ini menjadi lebih berwarna. Property ini sangat umum digunakan karena memang penggunaannya yang sangat sederhana dan mudah diterapkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { background-color: #abcdef; }\r\n  h1 { background-color: yellow; }\r\n  p { background-color: silver; }\r\n  p.last { background-color: transparent; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, tempor incididunt ut labore et dolore magna aliqua.&lt;/p&gt; \r\n  &lt;p class="last"&gt;Ut enim ad minim veniam, quis nostrud exercitation ullamco&lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Background Image</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selanjutnya ada property <code class="css-code" style="color:#18c4e7;">background-image</code> yang digunakan untuk membuat sebuah gambar menjadi background pada elemen HTML. Nilai dari property ini berupa <code class="css-code" style="color:#18c4e7">url(&#39;lokasi-sumber-gambar&#39;)</code>.</p>\r\n\r\n<p>Berbeda dengan property background-color, property ini membutuhkan beberapa property lainnya agar gambar yang dipakai menjadi background menjadi lebih fleksibel tampilannya sesuai dengan apa yang kita inginkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nbody {\r\n  background-image: url(''http://localhost/helloworld/assets/img/kertas.jpg'')\r\n}\r\np {\r\n  color: white;\r\n  background-image: url(''http://localhost/helloworld/assets/img/aurora.jpg'')\r\n}\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Background Image&lt;/h1&gt;\r\n  &lt;p&gt;\r\n    Pastikan bahwa warna tema gambar yang menjadi background \r\n    tidak mengganggu teks yang ada di dalamnya, \r\n    sehingga teks menjadi susah untuk dibaca \r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Secara default, background gambar ini akan diulang terus sampai bisa memenuhi seluruh lebar dari elemen HTML yang diberi background apabila gambar yang dijadikan background ukuran dimensi lebar dan tingginya lebih kecil dari lebar dan tinggi elemen. Untuk mengetahui hal ini, silahkan baca kembali tentang sifat-sifat dasar tag HTML yaitu Block dan Inline.</p>\r\n\r\n<hr />\r\n<h4>Background Image - Repeat</h4>\r\n\r\n<p>Seperti penjelasan di atas, gambar akan diulang terus sampai bisa memenuhi elemen yang diberi background. Pengulangannya gambarnya sendiri terjadi secara horizontal dan vertikal. Tentu hal ini jadi kurang menarik untuk dilihat. Kita bisa mengaturnya dengan property <code class="css-code" style="color:#18c4e7">background-repeat</code> dan berikut ini adalah nilainya :</p>\r\n\r\n<div>\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">repeat-x</code></td>\r\n			<td>membuat gambar hanya diulang secara horizontal (dari kiri ke kanan)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">repeat-y</code></td>\r\n			<td>membuat gambar hanya diulang secara vertikal (dari atas ke bawah)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">no-repeat</code></td>\r\n			<td>tidak ada pengulangan gambar. Gambar akan ditampilkan selebar ukuran dimensi aslinya sekali saja</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Background Image - Position</h4>\r\n\r\n<p>Kita bisa mengatur letak posisi background dengan property <code class="css-code" style="color:#18c4e7">background-position.</code> Nilai dari property ini yaitu <code class="css-code" style="color:#18c4e7">top</code>, <code class="css-code" style="color:#18c4e7">right</code>, <code class="css-code" style="color:#18c4e7">bottom</code>, <code class="css-code" style="color:#18c4e7">left</code>, dan <code class="css-code" style="color:#18c4e7">center</code>. Atau bisa juga dengan menggabungkan dua nilainya.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\nbody {\r\n  background-image: url(''http://localhost/helloworld/assets/img/kertas.jpg'');\r\n  /*background-repeat: repeat-x;*/\r\n  /*background-repeat: repeat-y;*/\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n}\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<hr />\r\n<h4>Background Image - Attachment</h4>\r\n\r\n<p>Property ini digunakan untuk mengatur apakah background gambarnya mengikuti konten elemennya saat discroll atau hanya tetap pada satu tempat (<em>fixed</em>). Jika kita tidak menuliskan property ini, maka defaultnya gambar akan mengikuti elemennya saat di-scroll atas-bawah.</p>\r\n\r\n<p>Nilai property <code class="css-code" style="color:#18c4e7;">background-attachment</code> yaitu <code class="css-code" style="color:#18c4e7">scroll</code> (default) dan <code><code class="css-code" style="color:#18c4e7">fixed</code>.</code></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\np { margin: 20px 0 100px}\r\nbody {\r\n  background-image: url(''http://localhost/helloworld/assets/img/kertas.jpg'');\r\n  background-repeat: no-repeat;\r\n  /* background-attachment: scroll; */\r\n  background-attachment: fixed;\r\n}\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<hr />\r\n<h4>Background Image - Size</h4>\r\n\r\n<p>Dengan property <code class="css-code" style="color:#18c4e7">background-size</code>, kita bisa mengatur lebar dan tinggi gambar yang dijadikan background. Nilai dari property ini adalah:</p>\r\n\r\n<div>\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">auto</code></td>\r\n			<td>mengambil ukuran default dari dimensi gambar</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">length</code></td>\r\n			<td>mengatur ukuran tinggi dan lebarnya gambar dengan satuan <code>px</code> atau <code>%</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">cover</code></td>\r\n			<td>menutup semua lebar dan tinggi layar dengan gambar background</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\np { margin: 20px 0 100px}\r\nbody {\r\n  background-image: url(''http://localhost/helloworld/assets/img/kertas.jpg'');\r\n  background-repeat: no-repeat;\r\n  background-attachment: fixed;\r\n  /*background-size: 600px 500px;*/\r\n  /*background-size: 100% 100%;*/\r\n  background-size: cover;\r\n}\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Shorthand Property</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Yang dimaksud Shorthand Property adalah menyingkat semua nama beberapa property dalam satu nama property saja dan nilainya bisa untuk semua property.</p>\r\n\r\n<p>Untuk property background ini kita bisa menulis hanya <code class="css-code" style="color:#18c4e7">background</code> saja.</p>\r\n\r\n<p>Ketika kita menggunakan shorthand-property background, nilai urutan property nya adalah sebagai berikut:</p>\r\n\r\n<ol>\r\n	<li><code class="css-code" style="color:#18c4e7">background-color</code></li>\r\n	<li><code class="css-code" style="color:#18c4e7">background-image</code></li>\r\n	<li><code class="css-code" style="color:#18c4e7">background-repeat</code></li>\r\n	<li><code class="css-code" style="color:#18c4e7">background-attachment</code></li>\r\n	<li><code class="css-code" style="color:#18c4e7">background-position</code></li>\r\n</ol>\r\n\r\n<p>Tidak masalah jika salah satu nilainya tidak ditulis, selama urutannya sesuai dengan aturan di atas, shorthand background bisa digunakan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\np { margin: 20px 0 100px}\r\nbody {\r\n  background: #ffffff url(''http://localhost/helloworld/assets/img/kertas.jpg'') no-repeat fixed;\r\n  background-size: cover;\r\n}\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;h1&gt;Property Shorthand Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Shorthand Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n  &lt;h1&gt;Property Shorthand Background&lt;/h1&gt;\r\n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n     quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Usahakan untuk memilih gambar yang akan digunakan sebagai background adalah gambar yang memiliki kualitas bagus dari segi dimensi ukurannya, agar saat diatur ukurannya gambar tidak pecah.</div>\r\n', '1057', 0, 1554171121, 1573706256),
(27, 'cdqqcja', '2', 'c1', 12, 'CSS Box Model -Border', 'Membuat Border dengan CSS', 'membuat-border-dengan-css', 1, '<p>Border sering kali digunakan untuk memberikan tanda batas lebar dan tinggi dari sebuah elemen pada masing-masing sisinya. CSS menyediakan property border dengan beberapa variasi mulai dari jenis border, ketebalan border, dan warna bordernnya.</p>\r\n\r\n<p>Berikut ini adalah beberapa property border yang bisa kita gunakan</p>\r\n\r\n<h3>Property Border Style</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk mengatur jenis border di CSS, kita bisa menggunakan property <code class="css-code" style="color:#18c4e7">border-style</code>, kemudian pilihan nilainya adalah <code class="css-code" style="color:#18c4e7">dotted</code>, <code class="css-code" style="color:#18c4e7">dashed</code>, <code class="css-code" style="color:#18c4e7">solid</code>, <code class="css-code" style="color:#18c4e7">double</code>, <code class="css-code" style="color:#18c4e7">groove</code>, <code class="css-code" style="color:#18c4e7">ridge</code>, <code class="css-code" style="color:#18c4e7">inset</code>, <code class="css-code" style="color:#18c4e7">outset</code>, atau <code class="css-code" style="color:#18c4e7">none</code> jika tidak ingin menampilkan border.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { padding: 5px; }\r\n  .dotted { border-style: dotted; }\r\n  .dashed { border-style: dashed; }\r\n  .solid { border-style: solid; }\r\n  .double { border-style: double; }\r\n  .groove { border-style: groove; }\r\n  .ridge { border-style: ridge; }\r\n  .inset { border-style: inset; }\r\n  .outset { border-style: outset; }\r\n  .none { border-style: none; }\r\n&lt;/style&gt;\r\n\r\n&lt;p class="dotted"&gt;Elemen p dengan border dotted&lt;/p&gt;\r\n&lt;p class="dashed"&gt;Elemen p dengan border dashed&lt;/p&gt;\r\n&lt;p class="solid"&gt;Elemen p dengan border solid&lt;/p&gt;\r\n&lt;p class="double"&gt;Elemen p dengan border double&lt;/p&gt;\r\n&lt;p class="groove"&gt;Elemen p dengan border groove&lt;/p&gt;\r\n&lt;p class="ridge"&gt;Elemen p dengan border ridge&lt;/p&gt;\r\n&lt;p class="inset"&gt;Elemen p dengan border inset&lt;/p&gt;\r\n&lt;p class="outset"&gt;Elemen p dengan border outset&lt;/p&gt;\r\n&lt;p class="none"&gt;Elemen p tanpa border&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Border Width</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property <code class="css-code" style="color:#18c4e7">border-width</code> digunakan untuk mengatur lebar keempat sisi border. Kita bisa mengatur lebarnya dengan satuan <code>px</code>, <code>pt</code>, <code>cm</code>, <code>em</code>.</p>\r\n\r\n<p>Kita juga bisa mengatur lebar dari keempat sisi bordernya dengan ukuran lebar yang berbeda yaitu dengan cara mangatur propertinya dengan 4 nilai sekaligus, berurutan dari border atas, kanan, bawah, dan kiri.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { padding: 5px; }\r\n  .satu { \r\n    border-style: outset; \r\n    border-width: 5px;\r\n  }\r\n  .dua {\r\n    border-style: groove;\r\n    border-width: 0.3cm;\r\n  }\r\n  .tiga{\r\n    border-style: solid;\r\n    border-width: 2px 3px 4px 5px; \r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;p class="satu"&gt;Elemen p dengan border outset dan lebar 5px&lt;/p&gt;\r\n&lt;p class="dua"&gt;Elemen p dengan border groove dan lebar 0,3cm&lt;/p&gt;\r\n&lt;p class="tiga"&gt;Elemen p dengan border solid&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Border Color</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Properti <code class="css-code" style="color:#18c4e7">border-color</code> digunakan untuk memberi warna keempat sisi border. Kita bisa mengisi nilainya dengan:</p>\r\n\r\n<ul>\r\n	<li>nama warna seperti red, green, atau blue</li>\r\n	<li>kode hexa seperti <code>#ff00ef</code></li>\r\n	<li>kode RGB seperti <code>rgb(255,0,0)</code></li>\r\n	<li>dan warna transparent</li>\r\n</ul>\r\n\r\n<p>Nilai property ini juga bisa untuk mengatur masing-masing warna sisi bordernya.</p>\r\n\r\n<p>Apabila kita tidak menuliskan properti ini, maka warna border akan mengikuti warna elemen yang ada di dalamnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { padding: 5px; }\r\n  .satu { \r\n    border-style: outset; \r\n    border-width: 5px;\r\n    border-color: red;\r\n  }\r\n  .dua {\r\n    border-style: groove;\r\n    border-width: 0.3cm;\r\n    border-color: #abcdef;\r\n  }\r\n  .tiga{\r\n    border-style: solid;\r\n    border-width: 2px 3px 4px 5px;\r\n    border-color: red green blue gray;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;p class="satu"&gt;Elemen p dengan border outset&lt;/p&gt;\r\n&lt;p class="dua"&gt;Elemen p dengan border groove&lt;/p&gt;\r\n&lt;p class="tiga"&gt;Elemen p dengan border solid&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Mengatur Sisi Border</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>CSS memungkinkan kita untuk mengatur nilai property secara spesifik pada masing-masing sisinya, yaitu atas (<code>top</code>), kanan (<code>right</code>), bawah (<code>bottom</code>), dan kiri (<code>left</code>).</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { padding: 5px; border-width: 5px; }\r\n  .satu {\r\n    color: red;\r\n    border-style: solid;\r\n  }\r\n  .dua {\r\n    color: green;\r\n    border-style: dotted solid;\r\n  }\r\n  .tiga{\r\n    color: blue;\r\n    border-style: dashed solid dotted;\r\n  }\r\n  .empat{\r\n    color: gray;\r\n    border-style: solid none dotted dashed;\r\n  }\r\n&lt;/style&gt;\r\n&lt;p class="satu"&gt;keempat sisi border solid&lt;/p&gt;\r\n&lt;p class="dua"&gt;atas-bawah: dotted, kanan-kiri: solid&lt;/p&gt;\r\n&lt;p class="tiga"&gt;atas: dashed, kanan-kiri: solid, bawah: dotted&lt;/p&gt;\r\n&lt;p class="empat"&gt;atas: solid, kanan: none, bawah: dotted, kiri:dashed &lt;/p&gt;</code></pre>\r\n\r\n<h4>Penjelasan kode di atas adalah sebagai berikut :</h4>\r\n\r\n<ul>\r\n	<li>Ketika property memiliki 4 nilai itu berarti urutan nilainya untuk masing-masing sisi: dimuai dari <strong>top</strong>, <strong>right</strong>, <strong>bottom</strong>, dan <strong>left</strong></li>\r\n	<li>Ketika property memiliki 3 nilai itu berarti urutan nilainya untuk <strong>top</strong>, <strong>right-left</strong>, dan <strong>bottom</strong></li>\r\n	<li>Ketika property memiliki 2 nilai itu berarti urutan nilainya untuk <strong>top-bottom</strong>, <strong>right-left</strong></li>\r\n</ul>\r\n\r\n<p>Cara penulisan nilai property di atas akan sangat sering dijumpai pada property yang berkaitan dengan keempat sisi sebuah elemen. Cara mudah untuk mengingat urutannya adalah dengan mengingat arah jarum jam.</p>\r\n</div>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<h3>Shorthand Property</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dalam prakteknya, seringkali kita akan menyingkat penulisan semua property ini menjadi satu property saja yaitu dengan nama property <code class="css-code" style="color:#18c4e7;">border</code> untuk semua property dengan urutan nilainya sebagai berikut :</p>\r\n\r\n<ol>\r\n	<li><code class="css-code" style="color:#18c4e7">border-width</code></li>\r\n	<li><code class="css-code" style="color:#18c4e7">border-style</code> (<em>wajib diisikan nilainya</em>)</li>\r\n	<li><code class="css-code" style="color:#18c4e7">border-color</code></li>\r\n</ol>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { \r\n    padding: 5px; \r\n    border: 5px solid blue; \r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;p&gt;border shorthand property&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Border Radius</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk membuat sebuah border elemen yang memiliki radius kelengkungan sudut, kita bisa menggunakan property <code class="css-code" style="color:#18c4e7;">border-radius</code> yang nilainya bisa diberikan dengan satuan <code>px</code> atau <code>%</code>. Kita juga diperbolehkan untuk mengatur sudut sisi yang mana yang ingin diberikan radius.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  p { \r\n    padding: 5px; \r\n    border: 3px solid steelblue;\r\n  }\r\n  .dua {\r\n    border-radius: 10px;\r\n  }\r\n  .tiga {\r\n    border-top-left-radius: 10px;\r\n    border-bottom-right-radius: 10px;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;p&gt;normal border&lt;/p&gt;\r\n&lt;p class="dua"&gt;border dengan radius 10px di masing-masing sudut&lt;/p&gt;\r\n&lt;p class="tiga"&gt;border radius pada sudut atas-kiri dan sudut bawah-kanan&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Outline</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property outline hampir mirip dengan border, hanya saja yang membedakan adalah outline ini berada di luar border. Property ini bukan termasuk bagian dari Box Model CSS, jadi keberadaannya tidak akan mempengaruhi ukuran dimensi sebuah elemen.</p>\r\n\r\n<p>Pengaturan yang sama seperti property border, outline juga bisa diatur mulai dari warna, ketebalan dan jenis outlinenya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid green;\r\n  }\r\n  p { \r\n    padding: 5px; \r\n    border: 3px solid steelblue;\r\n  }\r\n  p.satu {\r\n    outline: 5px solid red;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;p&gt;normal border&lt;/p&gt;\r\n  &lt;p class="satu"&gt;border dengan outline&lt;/p&gt;\r\n&lt;/body&gt;\r\n\r\n</code></pre>\r\n</div>\r\n', '775', 0, 1554171121, 1573706597),
(28, 'cjf9zl1', '2', 'c1', 14, 'CSS Box Model - Margin', 'Mengatur Jarak Elemen dengan Margin', 'mengatur-jarak-elemen-dengan-margin', 1, '<h3>Pengertian Margin</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Mirip seperti padding, property <code class="css-code" style="color:#18c4e7">margin</code> digunakan untuk memberi jarak spasi di dalam Box Model CSS namun perbedaannya, jika padding adalah spasi antara konten dengan border sedangkan margin adalah spasi yang membatasi sebuah elemen dengan elemen lainnya. Dari gambar di bawah ini kita tahu bahwa letak margin adalah di luar border dari sebuah elemen. Hal ini diperlukan agar antar elemen tidak tampil berhimpitan satu sama lain.</p>\r\n\r\n<p style="text-align: center;"><img alt="Margin" src="http://localhost/helloworld/assets/img/marg.png" style="width: 450px; height: 158px;" /></p>\r\n\r\n<p>Margin sendiri akan selalu memiliki background transparan, dan tidak bisa diberikan warna lain.</p>\r\n</div>\r\n\r\n<h3>Property Margin</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Masih sama seperti padding dan border, property margin juga memiliki 4 sisi yang masing-masing sisinya bisa kita berikan nilai yang berbeda-beda.</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">margin-top</code></td>\r\n			<td>untuk mengatur jarak sisi atas</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">margin-right</code></td>\r\n			<td>untuk mengatur jarak ke kanan</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">margin-bottom</code></td>\r\n			<td>untuk mengatur jarak ke bawah</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">margin-left</code></td>\r\n			<td>untuk mengatur jarak ke kiri</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Nilai dari margin sendiri bisa kita tuliskan dengan satuan pixel, em atau em, dll. Khusus untuk margin, nilainya juga bisa diisikan angka negatif seperti -10px dan juga bisa diisikan nilai <code class="css-code" style="color:#18c4e7">auto</code>. Saat memberikan nilai auto itu berarti bahwa kita menyerahkan pengaturan margin ini kepada web browser agar memberikan nilai margin otomatis terhadap elemen lain yang ada di sekitar elemen itu sendiri.</p>\r\n\r\n<p>Berikut ini adalah contoh penulisan property margin dengan pengaturan berbeda di keempat sisinya berikut dengan contoh penulisan dengan shorthand property notation.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n    font-size: 18px;\r\n  }\r\n  .contoh {\r\n    background: lime;\r\n  }\r\n  .contoh1 {\r\n    background: silver;\r\n  }\r\n  .contoh2 {\r\n    margin-top: 20px;\r\n    margin-right: 50px;\r\n    margin-bottom: 30px;\r\n    margin-left: 100px;\r\n    background: yellow;\r\n  }\r\n  .contoh3 {\r\n    /*shorthand notation*/\r\n    margin: 20px 50px 30px 100px;\r\n    background: salmon;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div class="contoh"&gt;Elemen div tanpa margin&lt;/div&gt;\r\n  &lt;div class="contoh1"&gt;Elemen div tanpa margin akan berdempetan dengan div di atasnya&lt;/div&gt;\r\n  &lt;div class="contoh2"&gt;\r\n    Elemen div dengan margin atas 20px, kanan 50px, bawah 120px, kiri 100px\r\n  &lt;/div&gt;\r\n  &lt;div class="contoh3"&gt;\r\n    Elemen div dengan pengaturan seperti div di atas (dengan penulisan shorthand property)\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Nilai Property Auto</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Nilai <code class="css-code" style="color:#18c4e7">auto</code> ini bisa digunakan apabila kita ingin membuat sebuah elemen itu selalu berada di tengah-tengah secara horizontal. Jarak antar kanan dan kirinya akan otomatis terbagi sama rata mengikuti lebar layar perangkat web browser yang sedang mengakses halaman itu.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { border: 1px solid red; }\r\n  div {\r\n    width: 400px;\r\n    margin: 50px auto;\r\n    background: lightgray;\r\n  }\r\n  img {\r\n    margin: 20px auto;\r\n    display: block;\r\n    border: 2px solid gray;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Atur lebar layar untuk mengetahui efek dari margin auto&lt;/h3&gt;\r\n  &lt;div&gt;\r\n    Elemen div dengan margin atas-bawah 50px dan kanan-kiri auto,\r\n    dengan lebar elemen 300px.&lt;br&gt;\r\n    Elemen ini akan tetap pada posisi lebar 300px, \r\n    tetapi margin kanan-kirinya akan otomatis menyesuaikan pada \r\n    layar dari 300px ke atas.&lt;br&gt;\r\n    sehingga posisi elemen div ini akan selalu berada di tengah \r\n    selama lebar layar di atas 400px\r\n  &lt;/div&gt;\r\n  &lt;p&gt;\r\n    Hal yang sama berlaku untuk sebuah gambar,\r\n    akan tetapi karena tag img bersifat inline, kita harus mengubahnya\r\n    menjadi bersifat block\r\n  &lt;/p&gt;\r\n  &lt;img src="http://localhost/helloworld/assets/img/feed/hai.gif"&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Margin Default</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Setiap elemen HTML harus memiliki margin agar tidak saling tampil berhimpitan. Namun untuk pengecualian dengan tag h1-h6, atau tag p. Tag-tag ini walau ditulis tanpa pengaturan margin pun tetap akan berjarak satu sama lainnya.</p>\r\n\r\n<p>Hal ini karena web browser memiliki margin bawaan atau default margin yang selalu aktif sampai seseorang (kita sebagai web designer) menimpa pengaturan CSSnya dengan nilai yang lain.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n  }\r\n  .margin-default, .margin-custom {\r\n    padding: 10px;\r\n    margin: 10px;\r\n    border: 1px solid blue;\r\n  }\r\n  h1 { background: lightgreen; }\r\n  h2 { background: lime; }\r\n  p { background: violet; }\r\n  .margin-custom h1, .margin-custom h2, .margin-custom p {\r\n    margin: 0;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div class="margin-default"&gt;\r\n    &lt;h1&gt;Text di dalam tag h1 dengan margin default&lt;/h1&gt;\r\n    &lt;h2&gt;Text di dalam tag h2 dengan margin default&lt;/h2&gt;\r\n    &lt;p&gt;\r\n      Elemen-elemen ini telah memiliki margin bawaan dari browser,\r\n      sehingga jika kita belum mengubahnya, maka yang tampil akan seperti ini.\r\n    &lt;/p&gt;    \r\n  &lt;/div&gt;\r\n\r\n  &lt;div class="margin-custom"&gt;\r\n    &lt;h1&gt;Text di dalam tag h1 dengan margin custom&lt;/h1&gt;\r\n    &lt;h2&gt;Text di dalam tag h2 dengan margin custom&lt;/h2&gt;\r\n    &lt;p&gt;\r\n      Berbeda jika kita mengatur atau mengubah nilai defaultnya sesuai keinginginan kita,\r\n      maka yang tampil akan seperti ini.\r\n    &lt;/p&gt;    \r\n  &lt;/div&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Dimensi Elemen</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Setelah kita mempelajari tentang semua property penyusun Box Model CSS, sekarang saatnya untuk mengetahui nilai total lebar dan tinggi dari sebuah elemen tersebut. Mari bermain dengan contoh kode sebagai berikut.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n    font-size: 18px;\r\n    font-family: verdana;\r\n  }\r\n  div {\r\n    background: violet;\r\n    width: 500px;\r\n    height: 200px;\r\n    margin: 20px;\r\n    padding: 10px;\r\n    border: 5px solid blue;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div&gt;\r\n    Berdasarkan pengaturan kode CSS untuk elemen div ini,\r\n    berapakah nilai total lebar dan tinggi elemen ini sekarang ?\r\n    &lt;br&gt;\r\n    Jika kamu menjawab nilai lebarnya adalah 500px,\r\n    dan nilai tingginya 200px,\r\n    maka kamu harus melihat penjelasannya,\r\n    &lt;br&gt;\r\n    Bahwa elemen ini sekarang memiliki lebar 570px,\r\n    dan tingginya sekarang 270px.\r\n  &lt;/div&gt;  \r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Lebar total dan tinggi total elemen div dari contoh di atas bisa dijelaskan dengan gambar screenshoot dari developer tool browser chrome di bawah.</p>\r\n\r\n<p style="text-align: center;"><img alt="Total dimension" src="http://localhost/helloworld/assets/img//total.png" style="width: 250px; height: 180px;" /></p>\r\n\r\n<p>Walaupun di dalam property CSS terdapat property width: 500px dan height: 200px, tapi ini bukanlah lebar dan tinggi keseluruhan dari elemen div tersebut.</p>\r\n\r\n<p>Dimensi total dari elemen div tersebut adalah 570 pixel x 270 pixel. Lalu dari mana angka itu di dapat ?</p>\r\n\r\n<p>Setiap lapisan property CSS Box Model memiliki peran dalam menambah ukuran sebuah elemen. Cara menghitungnya adalah :</p>\r\n\r\n<p>Lebar = 500 (width) + 2 x 10 (padding) + 2 x 5 (border) + 2 x 20 (margin) dan hasinya 570 pixel.</p>\r\n\r\n<p>Tinggi = 200 (height) + 2 x 10 (padding) + 2 x 5 (border) + 2 x 20 (margin) dan hasinya 270 pixel.</p>\r\n\r\n<p>Padding, border, dan margin, ketiganya dikalikan 2 karena masing-masing memiliki sisi atas-bawah dan kanan-kiri.</p>\r\n\r\n<p>Cara perhitungan ini sangat penting dalam merancang layout dan tampilan halaman web untuk bisa menampilkan sebuah konten web yang simetris. Sebagai contoh, jika kita ingin membuat tampilan halaman web yang terdiri 2 kolom yang masing-masing kolom untuk sidebar dan satu lagi untuk konten utama. Maka lebar dari setiap kolom ini agar pas dengan total lebar keduanya yang dikehendaki semisal 992 pixel. Untuk contoh seperti inilah kita harus memahami hitung-hitungan <strong>CSS Box Model</strong>.</p>\r\n</div>\r\n', '950', 0, 1554171121, 1573706690),
(29, 'c5moz1k', '2', 'c1', 0, 'Csss', 'moio moip', 'moio-moip', 0, '', '', 1, 1568866302, 1568866302),
(30, 'c1q958m', '2', 'c1', 13, 'CSS Box Model - Padding', 'Mengatur Jarak Konten dengan Padding', 'mengatur-jarak-konten-dengan-padding', 1, '<h3>Pengertian Padding</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Padding adalah sebutan untuk spasi atau ruang diantara konten dan border. Gambar CSS Box Model di bawah ini bisa menjelaskan dimana letak padding ini.</p>\r\n\r\n<p style="text-align: center;"><img alt="padding" src="http://localhost/helloworld/assets/img/margin.png" style="width: 360px; height: 255px;" /></p>\r\n\r\n<p>Seperti yang terlihat, padding berada diantara konten utama dengan border. Jadi, kenapa kita membahas border dulu sebelum padding? Ini karena untuk dapat melihat efek padding, kita harus menggunakan border. Tanpa border, padding akan susah untuk dilihat, meski sebenarnya setiap elemen yang ada di dalam tag body selalu memiliki border dengan default warna yang transparent.</p>\r\n</div>\r\n\r\n<h3>Property Padding</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property <code class="css-code" style="color:#18c4e7;">padding</code> bisa diisi dengan satuan panjang seperti pixel, persen, em, dll. Property ini bisa diberikan nilai pada masing-masing empat sisi elemen, dari atas, kanan, bawah, dan kiri.</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">padding-top</code></td>\r\n			<td>untuk mengatur jarak konten terhadap border atas</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">padding-right</code></td>\r\n			<td>untuk mengatur jarak konten terhadap border kanan</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">padding-bottom</code></td>\r\n			<td>untuk mengatur jarak konten terhadap border bawah</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7">padding-left</code></td>\r\n			<td>untuk mengatur jarak konten terhadap border kiri</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  div { background: yellow; border: 3px solid red; }\r\n  .contoh {\r\n    padding-top: 20px;\r\n    padding-right: 50px;\r\n    padding-bottom: 10px;\r\n    padding-left: 10px;\r\n  }\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;div&gt;text di dalam tag div tanpa property padding&lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh"&gt;\r\n    dan ini text di dalam tag div dengan padding \r\n    atas 20px, kanan 50px, bawah 10px, kiri 10px\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Shorthand Property</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita bisa menyingkat penggunaan property padding yang spesifik dari contoh di atas menjadi satu nama property yaitu <span style="color:#18c4e7">padding</span>. Dengan memberikan nilainya berurutan mengikuti arah jaruh jam, yakni mulai dari <strong>atas</strong>, <strong>kanan</strong>, <strong>bawah</strong> dan <strong>kiri</strong>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  div { background: yellow; border: 3px solid red; }\r\n  .contoh {\r\n    padding-top: 20px;\r\n    padding-right: 50px;\r\n    padding-bottom: 10px;\r\n    padding-left: 10px;\r\n  }\r\n  .shorthand-4 { padding: 20px 50px 10px 10px; }\r\n  .shorthand-3 { padding: 10px 20px 35px; }\r\n  .shorthand-2 { padding: 20px 10px; }\r\n  .shorthand-1 { padding: 10px; }\r\n&lt;/style&gt;\r\n&lt;body&gt;\r\n  &lt;div class="contoh"&gt;\r\n    dan ini text di dalam tag div dengan padding \r\n    atas 20px, kanan 50px, bawah 10px, kiri 10px\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="shorthand-4"&gt;\r\n    kalimat ini memiliki pengaturan padding yang sama dengan kalimat di atas.\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="shorthand-3"&gt;\r\n    kalimat ini memiliki pengaturan padding atas 10px, kanan-kiri 20px, bawah 35px\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="shorthand-2"&gt;\r\n    kalimat ini memiliki pengaturan padding atas-bawah 20px, dan kanan-kiri 10px\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="shorthand-1"&gt;\r\n    kalimat ini memiliki pengaturan padding masing-masing 10px di setiap sisi  \r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Penjelasan shorthand property padding dari kode di atas :</p>\r\n\r\n<ul>\r\n	<li>Ketika property memiliki 4 nilai itu berarti urutan nilainya untuk masing-masing sisi: dimuai dari <strong>top</strong>, <strong>right</strong>, <strong>bottom</strong>, dan <strong>left</strong></li>\r\n	<li>Ketika property memiliki 3 nilai itu berarti urutan nilainya untuk <strong>top</strong>, <strong>right-left</strong>, dan <strong>bottom</strong></li>\r\n	<li>Ketika property memiliki 2 nilai itu berarti urutan nilainya untuk <strong>top-bottom</strong>, <strong>right-left</strong></li>\r\n	<li>Ketika property memiliki 1 nilai itu berarti keempat sisinya memiliki nilai yang sama</li>\r\n</ul>\r\n\r\n<p>Konsep penulisan <strong>shorthand property</strong> ini sangat penting untuk dipahami. Karena hampir setiap property CSS yang menggunakan bidang sisi seperti <strong>padding</strong> dan <strong>margin</strong> menggunakan aturan penulisan yang sama.</p>\r\n</div>\r\n', '433', 0, 1554171121, 1573706622);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(31, 'c7t5wko', '2', 'c1', 8, 'CSS Text', 'Macam-macam Format Text di CSS', 'macam-macam-format-text-di-css', 1, '<p>Ada banyak sekali property di dalam CSS yang bisa kita gunakan untuk mengatur format text ini. Mulai dari mengatur warna text, format perataan (alignment), dekorasi, transformasi, indent paragraf, dan spasi antar huruf dll. Namun pada kesempatan ini, kita hanya akan membahas beberapa saja tentang property formatting text ini yang paling umum digunakan. Jika dirasa kurang lengkap penjelasannya silahkan kunjungi referensinya di <a href="https://www.w3schools.com/css/css_text.asp" target="_blank">w3schools</a>.</p>\r\n\r\n<h3>Property Color</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property <code class="css-code" style="color:#18c4e7;">color</code> digunakan untuk mengatur warna text. Untuk nilainya, kita bisa mengaturnya dengan nama warna, kode rgb, atau kode hexa.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { color: blue; }\r\n  h1 { color: green; }\r\n  .merah { color: red; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h1&gt;Judul ini memiliki warna hijau&lt;/h1&gt;\r\n  &lt;p&gt;Paragraf ini memiliki warna biru yang merupakan nilai efek turunan dari tag body.&lt;/p&gt;\r\n  &lt;p class="merah"&gt;\r\n    Untuk mengubah warna lain selain biru, \r\n    gunakan selector yang lebih sepesifik dan lakukan deklarasi ulang.\r\n    Seperti yang terlihat pada paragraf ini memiliki warna merah.\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Text Align</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property <code class="css-code" style="color:#18c4e7;">text-align</code> digunakan untuk mengatur perataan text secara horizontal. Kita bisa mengatur text itu untuk dengan perataan kanan (<code class="css-code" style="color:#18c4e7;">right</code>), kiri (<code class="css-code" style="color:#18c4e7;">left</code>), tengah (<code class="css-code" style="color:#18c4e7;">center</code>) dan rata kanan-kiri (<code class="css-code" style="color:#18c4e7;">justify</code>).</p>\r\n\r\n<p>Align dengan nilai center biasanya digunakan untuk membuat sebuah judul dari artikel berada di tengah-tengah, sedangkan justify biasa digunakan untuk mengatur isi artikel agar memiliki perataan di kanan dan kirinya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { text-align: left; }\r\n  .dua { text-align: right; }\r\n  .tiga { text-align: center; }\r\n  .empat { text-align: justify; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3 class="satu"&gt;Lorem ipsum&lt;/h3&gt;\r\n  &lt;h3 class="dua"&gt;Lorem ipsum juga&lt;/h3&gt;\r\n  &lt;h3 class="tiga"&gt;Lorem ipsum lagi&lt;/h3&gt;\r\n  &lt;p class="empat"&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Text Decoration</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dengan property <code class="css-code" style="color:#18c4e7;">text-decoration</code> kita bisa memberikan dekorasi pada text. Nilai property dekorasinya adalah sebagai beriukut :</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">underline</code></td>\r\n			<td>untuk memberikan garis bawah</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">overline</code></td>\r\n			<td>untuk memberikan garis atas</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">line-through</code></td>\r\n			<td>memberikan garis pada text</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">none</code></td>\r\n			<td>menghilangkan semua dekorasi</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { text-decoration: underline; }\r\n  .dua { text-decoration: overline; }\r\n  .tiga { text-decoration: line-through; }\r\n  a { text-decoration: none; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3 class="satu"&gt;Lorem ipsum&lt;/h3&gt;\r\n  &lt;h3 class="dua"&gt;Lorem ipsum juga&lt;/h3&gt;\r\n  &lt;h3 class="tiga"&gt;Lorem ipsum lagi&lt;/h3&gt;\r\n  &lt;a href="https://www.google.com" target="_blank"&gt;link menuju google&lt;/a&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Text Transform</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property <code class="css-code" style="color:#18c4e7;">text-transform</code> digunakan untuk mengatur tampilan huruf kapital pada sebuah text. Nilainya bisa kita atur dengan pengaturan berikut :</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table" style="width:100%">\r\n	<tbody>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">capitalize</code></td>\r\n			<td>mengatur pada setiap kata diawali dengan huruf kapital</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">uppercase</code></td>\r\n			<td>mengatur setiap karakter kata menjadi huruf kapital semua</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code class="css-code" style="color:#18c4e7;">lowercase</code></td>\r\n			<td>mengatur semua karakter kata menjadi huduf kecil semua</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { text-transform: capitalize; }\r\n  .dua { text-transform: uppercase; }\r\n  .tiga { text-transform: lowercase; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3 class="satu"&gt;lorem ipsum dolor sit amet&lt;/h3&gt;\r\n  &lt;h3 class="dua"&gt;lorem ipsum dolor sit amet&lt;/h3&gt;\r\n  &lt;h3 class="tiga"&gt;LOREM IPSUM DOLOR SIT AMET&lt;/h3&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Text Indent</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika ada dari kita yang belum mengetahui apa itu indent, indent di sini yang dimaksud adalah sebuah tampilan paragraf yang pada awal paragrafnya ditampilkan lebih menjorok ke kanan daripada kalimat-kalimat di bawahnya yang berada di dalam satu paragraf. Kita bisa mengatur indent pada sebuah paragraf dengan menggunakan property <code class="css-code" style="color:#18c4e7;">text-indent</code> dengan memberikan nilai berupa angka dalam satuan <code>pixel</code>, <code>em</code>, dll<strong> </strong></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { font-family: verdana; }\r\n  h3 { text-align: center; }\r\n  p { text-indent: 50px; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Contoh Indentation Paragraf&lt;/h3&gt;\r\n  &lt;p&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\r\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\r\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\r\n    consequat. \r\n  &lt;/p&gt;\r\n  &lt;p&gt;\r\n    Duis aute irure dolor in reprehenderit in voluptate velit esse\r\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\r\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.  \r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Letter Spacing</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Ada kalanya saat kita menulis paragraf, kita menginginkan agar tampilan antar karakter/huruf pada masing-masing kalimat sedikit lebih memiliki jarak satu sama lain agar terkesan lebih mudah dibaca. Dengan property <code class="css-code" style="color:#18c4e7;">letter-spacing</code> kita bisa untuk mengatur secara spesifik jarak antar antar karakter pada sebuah text. Nilainya bisa ditulis dengan angka dalam satuan <code>pixel</code>, <code>em</code>, dll.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  .satu { letter-spacing: 3px; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;p&gt;Sebuah paragraf tanpa pengaturan letter spacing.&lt;/p&gt;\r\n  &lt;p class="satu"&gt;\r\n    Dan ini adalah paragraf yang memiliki pengaturan letter spacing 3 pixel.\r\n  &lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Property ini juga bergantung pada jenis font yang dipakai. Beberapa jenis font membawa pengaturan default sendiri untuk mengatur desain style font nya seperti pada font monospace.</p>\r\n</div>\r\n\r\n<h3>Property Word Spacing</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika property letter-spacing untuk memberi spasi antar karakter dalam sebuah kata/text, maka property <code class="css-code" style="color:#18c4e7;">word-spacing</code> digunkan untuk mengatur jarak spasi antar setiap kata dalam sebuah kalimat.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { font-family: verdana; }\r\n  .satu { word-spacing: 10px; }\r\n  .dua { word-spacing: -5px; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3 class="satu"&gt;lorem ipsum dolor sit amet&lt;/h3&gt;\r\n  &lt;h3 class="dua"&gt;lorem ipsum dolor sit amet&lt;/h3&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Line Height</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Gunakan property <code class="css-code" style="color:#18c4e7;">line-height</code> untuk mengatur spasi antar baris pada text. Nilainya bisa ditulis dengan angka langsung atau dengan satuan <code>pixel</code>, <code>em</code>, dll. Tujuan diberikan property line-height ini adalah agar sebuah paragraf memiliki spasi secara horizontal antar baris atas dan bawahnya sehingga kalimatnya menjadi lebih mudah dibaca.</p>\r\n\r\n<p>Meski secara default browser akan memberikan nilai line-height sebesar 1.2, maka kita bisa mengubahnya agar sesuai dengan apa yang kita inginkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { font-family: verdana; font-size: 16px; }\r\n  .satu { line-height: 40px; }\r\n  .dua { line-height: 0.8; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Paragraf dengan line-height default (line-height: 1.2)&lt;/h3&gt;\r\n  &lt;p class=""&gt;Lorem ipsum dolor sit amet, consectetur\r\n   adipiscing elit. Nulla erat dolor, ullamcorper in ultricies\r\n   eget,fermentum rhoncus leo. Curabitur eu mi vitae metus\r\n   posuere laoreet. Eam facilis omittantur at, usu efficiantur\r\n   neglegentur delicatissimi et, in per vero splendide\r\n   persequeris.&lt;p&gt;\r\n  &lt;h3&gt;Paragraf dengan line-height (nilai 40px)&lt;/h3&gt;\r\n  &lt;p class="satu"&gt;Lorem ipsum dolor sit amet, consectetur\r\n   adipiscing elit. Nulla erat dolor, ullamcorper in ultricies\r\n   eget,fermentum rhoncus leo. Curabitur eu mi vitae metus\r\n   posuere laoreet. Eam facilis omittantur at, usu efficiantur\r\n   neglegentur delicatissimi et, in per vero splendide\r\n   persequeris.&lt;p&gt;\r\n  &lt;h3&gt;Paragraf dengan line-height (nilai 0.8)&lt;/h3&gt;\r\n  &lt;p class="dua"&gt;Lorem ipsum dolor sit amet, consectetur\r\n   adipiscing elit. Nulla erat dolor, ullamcorper in ultricies\r\n   eget,fermentum rhoncus leo. Curabitur eu mi vitae metus\r\n   posuere laoreet. Eam facilis omittantur at, usu efficiantur\r\n   neglegentur delicatissimi et, in per vero splendide\r\n   persequeris.&lt;p&gt;     \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '997', 0, 1554171121, 1573706348),
(32, 'c3eftwf', '2', 'c1', 9, 'CSS Font', 'Mengatur Tampilan Font di CSS', 'mengatur-tampilan-font-di-css', 1, '<p>Font adalah jenis huruf yang digunakan di dalam sebuah dokumen. Pada aplikasi pengolah kata seperti <em>Microsoft Word</em>, terdapat puluhan bahkan ratusan jenis font yang bisa kita pilih. Font-font ini berasal dari sistem Operasi seperti <em>Windows</em> atau bisa dari beberapa aplikasi lain.</p>\r\n\r\n<h3>Font Web Browser</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika kita menginstall program tambahan seperti <em>Adobe Photoshop</em>, aplikasi ini juga membawa font sendiri yang akan ditambahkan ke dalam jenis-jenis font yang terdapat di dalam Windows, dan karena font ini adalah bawaan aplikasi, maka tidak semua komputer memiliki font ini.</p>\r\n\r\n<p>Apabila kita membuat sebuah dokumen dan mencetaknya langsung, menggunakan font apapun yang tersedia di komputer tidak akan menjadi masalah. Namun jika kita membuat dokumen yang akan digunakan di dalam komputer lain, sebaiknya menggunakan font standar yang kemungkinan besar akan tersedia di komputer tujuan.</p>\r\n\r\n<p>Dalam memilih jenis font untuk website, kondisi yang sama juga menjadi pertimbangan penting. Di dalam CSS, kita bisa menggunakan berbagai jenis font sesuai dengan desain yang diinginkan. Namun font yang akan ditampilkan pada web browser sepenuhnya berasal dari komputer user (pengunjung web). Jika kita memilih font yang tidak standar, maka desain web yang telah dirancang serapi mungkin akan menjadi &rsquo;kacau&rsquo; karena bisa saja font yang kita pilih tidak tersedia di komputer pengunjung.</p>\r\n\r\n<p>Untuk mengatasi hal ini, salah satunya adalah dengan menggunakan font standar yang umum tersedia di dalam berbagai sistem operasi seperti <strong>Windows</strong>, <strong>Linux</strong>, <strong>Mac OS</strong>, dll. Menggunakan font-font standar ini akan menjamin desain web yang telah dirancang dapat didukung oleh mayoritas web browser.</p>\r\n</div>\r\n\r\n<h3>Jenis Font Standard</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Font Standar atau biasa disebut Font Generik adalah jenis font yang umumnya tersedia pada hampir semua sistem. Jenis-jenis font ini terbagi berdasarkan bentuknya, terdapat 5 jenis font generik, yaitu <code>serif</code>, <code>sans-serif</code>, <code>monospace</code>, <code>cursive</code>, dan <code>fantasy</code>.</p>\r\n\r\n<h4>Font Serif</h4>\r\n\r\n<p>Font serif adalah jenis font yang memiliki &quot;kaki&quot; pada setiap hurufnya. Contoh jenis font serif adalah <code>Times New Roman</code> dan <code>Georgia</code>. Font jenis ini biasanya digunakan untuk media cetak kertas karena akan terkesan rapi dan mudah dibaca.</p>\r\n\r\n<h4>Font Sans-serif</h4>\r\n\r\n<p>Font dengan jenis Sans-serif adalah jenis font yang tidak memiliki &quot;kaki&quot; pada setiap ujung karakternya. Contoh dari font jenis ini adalah <code>Arial</code>, <code>Verdana</code>, <code>Trebuchet MS</code>, <code>Helvetica</code>, dan <code>Calibri</code>. Font jenis ini sering digunakan di media elektronik seperti web.</p>\r\n\r\n<h4>Font Monospace</h4>\r\n\r\n<p>Font berjenis monospace adalah tipe font yang lebar setiap karakternya memiliki lebar ukuran yang sama. Huruf &quot;<code>i</code>&quot; akan mengambil panjang yang sama dengan huruf &quot;<code>w</code>&quot;. Contoh dari font jenis ini adalah <code>Courier</code>, <code>Courier New</code>, dan <code>Andale Mono</code>. Biasanya font jenis ini digunakan untuk hal yang bersifat teknis, seperti penulisan contoh kode program.</p>\r\n\r\n<h4>Font Cursive</h4>\r\n\r\n<p>Font jenis cursive adalah jenis font yang hampir mirip tulisan tangan atau kaligrafi. Contoh dari font ini adalah <code>Comic Sans</code>. Font jenis ini biasanya digunakan untuk aspek tulisan yang tidak terlalu formal.</p>\r\n\r\n<h4>Font Fantasy</h4>\r\n\r\n<p>Font dengan jenis fantasy adalah font yang bersifat visual dengan karakter font khusus seperti font <code>disney</code>, <code>stencil</code>, <code>matrix</code>, dll. Font jenis ini jarang digunakan untuk text halaman.</p>\r\n\r\n<p>Berikut ini adalah gambar contoh perbedaan kelima jenis font standard.</p>\r\n\r\n<p style="text-align: center;"><img alt="Perbedaan jenis font di Css" src="http://localhost/helloworld/assets/img/Jenis-Font.jpg" style="width: 510px; height: 547px;" /></p>\r\n</div>\r\n\r\n<h3>Property Font Family</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Secara default, sebuah browser seperti chrome akan menampilkan text menggunakan pengaturan font serif. Hal ini berlaku sampai kita mengubah atau menimpa pengaturannya dengan jenis font yang lain.</p>\r\n\r\n<p>Untuk menentukan jenis font yang digunakan pada sebuah halaman HTML kita bisa menggunakan property <code class="css-code" style="color:#18c4e7">font-family</code>.</p>\r\n\r\n<p>Cara penulisan nilai dari property ini yaitu dengan mengisi nama-nama font yang dikehendaki. Pemberian nilai ini diperbolehkan untuk menggunakan nama font lebih dari satu. Hal ini ditujukan agar saat halaman web kita sedang diakses oleh browser dari komputer pengunjung, maka browser di sana akan mencarikan font yang sesuai dengan pilihan yang telah ditulis dalam kode CSS nya berurutan dari kiri ke kanan.</p>\r\n\r\n<p>Ketika kita mendeklarasikan kode CSS sebagai seperti <code class="css-code" style="color:#18c4e7;">p { font-family : &ldquo;Duru Sans&rdquo;, Verdana, sans-serif }</code> , dapat dilihat bahwa terdapat 3 jenis font, yakni font Duru Sans, font Verdana, dan font sans-serif yang masing-masing dipisahkan dengan tanda koma.</p>\r\n\r\n<p>Web browser pertama kali akan mencoba untuk mencari font dengan nama &quot;Duru Sans&quot; di komputer user (pengunjung web) jika tidak ditemukan, maka web browser akan mencari font di urutan selanjutnya, yakni font Verdana. Dan jika tidak ditemukan juga, maka web browser akan menampilkan font dengan jenis generik yaitu sans-serif. Untuk itulah penting untuk dipahami tentang urutan penulisan nama font saat deklarasi property font-family yang nilainya lebih dari satu nama font. Urutan terakhir hendaknnya ditulis dengan nama font yang sifatnya generik / standard, yang artinya di hampir semua komputer pasti menyediakan jenis font tersebut.</p>\r\n\r\n<p>Dalam memberikan nilai untuk nama font, terdapat beberapa aturan penulisan. Aturan tersebut adalah sebagai berikut:</p>\r\n\r\n<ul>\r\n	<li>Untuk setiap penulisan nama font, huruf pertama pada tiap kata harus menggunakan huruf besar, contohnya penulisan font &ldquo;<b>arial</b>&rdquo; harus ditulis menjadi &quot;<strong>Arial</strong>&quot; . Tetapi aturan ini tidak berlaku untuk font generik seperti <strong>monospace</strong> dan <strong>sans-serif</strong>.</li>\r\n	<li>Untuk memisahkan antara satu font dengan font lainnya, gunakan tanda koma (<code>,</code>).</li>\r\n	<li>Jika nama font terdiri dari dua kata atau lebih, maka harus ditulis didalam tanda kutip (<code>&quot; &quot;</code>), seperti &rdquo;<strong>Times New Roman</strong>&rdquo;.</li>\r\n</ul>\r\n\r\n<p>Perhatikan contoh implementasi kelima font generik ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  h1 { text-align: center; }\r\n  .satu { font-family: Serif;  }\r\n  .satu .font { font-family: ''Times New Roman'', Serif; }\r\n\r\n  .dua { font-family: Sans-Serif; }\r\n  .dua .font { font-family: Arial, Sans-Serif; }\r\n\r\n  .tiga { font-family: Monospace; }\r\n  .tiga .font { font-family: ''Courier New'', Courier, Monospace; }\r\n  \r\n  .empat { font-family: Cursive; }\r\n  .empat .font { font-family: ''Comic Sans MS'', Cursive, Sans-Serif; }\r\n  \r\n  .lima { font-family: Fantasy; }\r\n  .lima .font { font-family: Stencil, Fantasy; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;p&gt;Contoh teks tanpa pengaturan font family apapun (default browser)&lt;/p&gt;\r\n  &lt;div class="satu"&gt;\r\n    &lt;h1&gt;font-family Serif&lt;/h1&gt;\r\n    &lt;p class="font"&gt;Contoh teks dengan font Times New Roman dari keluarga Serif&lt;/p&gt;\r\n  &lt;/div&gt;&lt;hr&gt;\r\n  &lt;div class="dua"&gt;\r\n    &lt;h1&gt;font-family Sans-Serif&lt;/h1&gt;\r\n    &lt;hp class="font"&gt;Contoh teks dengan font Arial dari keluarga Sans-Serif&lt;/p&gt;\r\n  &lt;/div&gt;&lt;hr&gt;\r\n  &lt;div class="tiga"&gt;\r\n    &lt;h1&gt;font-family Monospace&lt;/h1&gt;\r\n    &lt;p class="font"&gt;Contoh teks dengan font Courier New dari keluarga font Monospace&lt;/p&gt;\r\n  &lt;/div&gt;&lt;hr&gt;\r\n  &lt;div class="empat"&gt;\r\n    &lt;h1&gt;font-family Cursive&lt;/h1&gt;\r\n    &lt;hp class="font"&gt;Contoh teks dengan font Comic Sans dari keluarga font Cursive&lt;/p&gt;\r\n  &lt;/div&gt;&lt;hr&gt;\r\n  &lt;div class="lima"&gt;\r\n    &lt;h1&gt;font-family Fantasy&lt;/h1&gt;\r\n    &lt;p class="font"&gt;Contoh teks dengan font Stencil dari keluarga font Fantasy&lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Layanan Google Font</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Google Font adalah salah satu layanan yang disediakan Google untuk memudahkan web developer dalam menghasilkan desain yang menarik dengan meyediakan font-font gratis. Fitur ini dapat kita akses pada alamat <a href="https://fonts.google.com/" target="_blank">https://fonts.google.com</a>. Silahkan kunjungi link tersebut dan ikuti petunjuk penggunaannya untuk bisa menggunakan koleksi font yang telah disediakan oleh website tersebut.</p>\r\n\r\n<p>Di bawah ini adalah contoh sebuah halaman HTML yang menggunakan font yang diimport dari google font.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n  &lt;title&gt;Belajar Google Font&lt;/title&gt;\r\n  &lt;link rel=''stylesheet'' href=''http://fonts.googleapis.com/css?family=Lobster|Open+Sans''&gt;\r\n  &lt;style&gt;\r\n     .open {\r\n        font-family: ''Open Sans'', sans-serif;\r\n      }\r\n     .lobster {\r\n        font-family: ''Lobster'', cursive;\r\n      }\r\n  &lt;/style&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n  &lt;h2&gt;Belajar Google Font&lt;/h2&gt;\r\n  \r\n  &lt;h3&gt;Font Generik&lt;/h3&gt;\r\n  &lt;p&gt;Font ini berasal dari sistem operasi yang sedang kita pakai entah itu Windows, Linux, Mac ,dll.&lt;/p&gt;\r\n  &lt;p&gt;\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n    Nulla erat dolor, ullamcorper in ultricies eget,\r\n    fermentum rhoncus leo. Curabitur eu mi vitae metus\r\n    posuere laoreet.\r\n  &lt;/p&gt;\r\n  &lt;h3&gt;Font Google (Open Sans)&lt;/h3&gt;\r\n  &lt;p class="open"&gt;\r\n    Lorem ipsum dolor sit amet, consectetur\r\n    adipiscing elit. Nulla erat dolor, ullamcorper in ultricies eget,\r\n    fermentum rhoncus leo. Curabitur eu mi vitae\r\n    metus posuere laoreet.\r\n  &lt;/p&gt;\r\n  &lt;h3&gt;Font Google (Lobster)&lt;/h3&gt;\r\n  &lt;p class="lobster"&gt;\r\n    Lorem ipsum dolor sit amet, consectetur\r\n    adipiscing elit. Nulla erat dolor, ullamcorper in ultricies eget,\r\n    fermentum rhoncus leo. Curabitur eu mi vitae\r\n    metus posuere laoreet.\r\n  &lt;/p&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<div class="note">Perlu menjadi catatan bahwa jika kita menggunakan google font, maka font hanya tampil ketika halaman HTML terkoneksi dengan internet. Jika sudah terkoneksi dengan internet sekali saja saat halaman dimuat, maka <em>cache</em> akan tersimpan untuk beberapa waktu dan font sudah bisa ditampilkan sampai batas cache itu habis atau terhapus.</div>\r\n</div>\r\n\r\n<h3>Property Font Size</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>CSS memungkinkan kita untuk mengelola ukuran text dari sebuah halaman, Hal ini penting dalam desain web karena Nantinya pengunjung dapat membedakan mana text yang merupakan judul, isi artikel atau komponen halaman lainnya dari ukuran sebuah text.</p>\r\n\r\n<p>Namun, meski kontrol pengelolaan ini sepenuhnya dapat kita atur, kita tidak boleh menggunakan penyesuaian ukuran font untuk membuat paragraf terlihat seperti heading, atau heading terlihat seperti paragraf. Hal itu akan menyalahi aturan dibuatnya tag HTML dan pengaturan CSS.</p>\r\n\r\n<p>Selalu gunakan tag HTML yang tepat, seperti <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> untuk judul dan <code>&lt;p&gt;</code> untuk paragraf.</p>\r\n\r\n<p>Untuk mengubah besar atau ukuran dari sebuah font atau text dengan CSS, kita bisa menggunakan properti <code class="css-code" style="color:#18c4e7;">font-size</code>. Nilai dari property ini bisa dibedakan menjadi dua berdasarkan satuan yang dipakai yakni nilai Absolute dan nilai Relative. Jika belum paham mengenai nilai standard ini, silahkan dibuka kembali materi tentang CSS Units.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;style&gt;\r\n      /*nilai absolute*/\r\n      body    { font-size:14pt; }\r\n      p.satu  { font-size:8mm; }\r\n      p.dua   { font-size:0.35in; }   \r\n      p.tiga  { font-size:20px; }\r\n  \r\n      /*nilai relative*/    \r\n      p.empat { font-size:1.8em }\r\n      p.lima  { font-size:190%; }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n   &lt;p&gt;Kalimat ini akan berukuran 14 point&lt;/p&gt;\r\n   &lt;p class="satu"&gt;Kalimat ini akan berukuran 8 milimeter&lt;/p&gt;\r\n   &lt;p class="dua"&gt;Kalimat ini akan berukuran 0,35 inchi&lt;/p&gt;\r\n   &lt;p class="tiga"&gt;Kalimat ini akan berukuran 20 pixel&lt;/p&gt;\r\n   &lt;p class="empat"&gt;Kalimat ini akan berukuran 1,8 em&lt;/p&gt;\r\n   &lt;p class="lima"&gt;Kalimat ini akan berukuran 190%&lt;/p&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n', '1414', 0, 1554171121, 1573706446),
(33, 'cnmtgjr', '2', 'c1', 15, 'CSS Link', 'Menghias Link dan Tombol dengan CSS', 'menghias-link-dan-tombol-dengan-css', 0, '<p style="text-align:justify">Dengan CSS kita bisa menghias tautan link yang memiliki tampilan default dari HTML <code class="language-html">&lt;a&gt;</code> (berwarna biru dan bergaris bawah) menjadi memiliki style yang berbeda.</p>\r\n\r\n<p style="text-align:justify">Tautan link bisa dihias dengan berbagai macam property seperti <code class="css-code" style="color:#18c4e7">color</code>, <code class="css-code" style="color:#18c4e7">font-family</code>, <code class="css-code" style="color:#18c4e7">background</code> dll.</p>\r\n\r\n<p style="text-align:justify">Tautan link sendiri memiliki beberapa status yang bisa diberikan style berbeda. Beberapa diantaranya adalah:</p>\r\n\r\n<ul>\r\n	<li><code>a:link</code> - tag a normal, atau link yang belum diklik</li>\r\n	<li><code>a:visited</code> - tautan link yang telah diklik</li>\r\n	<li><code>a:hover</code> - tautan link ketika pointer mouse berada di atasnya</li>\r\n	<li><code>a:active</code> - momen ketika tautan link diklik</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  a:link { color: red; }\r\n  a:visited { color: green; }\r\n  a:hover { color: yellow; }\r\n  a:active { color: pink; }\r\n&lt;/style&gt;\r\n\r\n&lt;a href="http://localhost" target="_blank"&gt;Hello World&lt;/a&gt;</code></pre>\r\n\r\n<hr />\r\n<p><strong>Text Decoration</strong></p>\r\n\r\n<p style="text-align:justify">Secara default, tag <code class="language-html">&lt;a&gt;</code> memiliki tampilan bergaris bawah. Kita bisa mengubah tampilan ini dengan property <code class="css-code" style="color:#18c4e7">text-decoration</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  a:link { text-decoration: none; }\r\n  a:visited { text-decoration: none; }\r\n  a:hover { text-decoration: none; }\r\n  a:active { text-decoration: none; }\r\n&lt;/style&gt;\r\n\r\n&lt;a href="http://localhost" target="_blank"&gt;Hello World&lt;/a&gt;</code></pre>\r\n\r\n<hr />\r\n<p><strong>Background Color</strong></p>\r\n\r\n<p style="text-align:justify">Property <code class="css-code" style="color:#18c4e7">background-color</code> bisa digunakan untuk mengubah warna background dari keseluruhan status link.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  a:link { background-color: yellow; }\r\n  a:visited { background-color: cyan; }\r\n  a:hover { background-color: lightgreen; }\r\n  a:active { background-color: hotpink; }\r\n&lt;/style&gt;\r\n\r\n&lt;a href="http://localhost" target="_blank"&gt;Hello World&lt;/a&gt;</code></pre>\r\n\r\n<hr />\r\n<p><strong>Menampilkan Link seperti Tombol</strong></p>\r\n\r\n<p style="text-align:justify">Mengkombinasikan beberapa properti CSS untuk mengubah tampilan link seperti sebuah tombol dengan beberapa property dari CSS 3 seperti <code class="css-code" style="color:#18c4e7">transition</code>, <code class="css-code" style="color:#18c4e7">box-shadow</code>, dan <code class="css-code" style="color:#18c4e7">text-shadow</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\na {\r\n	padding: 10px 30px;\r\n	text-align: center;\r\n	text-decoration: none;\r\n	display: inline-block;\r\n	font-size: 16px;\r\n	margin: 4px 2px;\r\n	transition-duration: 0.4s;\r\n	cursor: pointer;\r\n	box-sizing: border-box;\r\n	background-color: white; \r\n	color: black; \r\n	border: 2px solid #449D44;\r\n}\r\na:hover {\r\n	text-shadow: 1px 1px 1px #fff, 0 0 10px blue, 0 0 5px lightblue;\r\n	box-shadow: 4px 3px 4px rgba(0, 0, 0,0.5);\r\n	text-decoration: none;\r\n	background-color: #449D44;\r\n	color: white;\r\n}\r\na:active { text-decoration: none; }\r\n&lt;/style&gt;\r\n\r\n&lt;a href="http://localhost" target="_blank"&gt;Hello World&lt;/a&gt;</code></pre>\r\n\r\n<p></p>\r\n', '', 0, 1554171121, 1568865357),
(34, 'c5p1s3n', '2', 'c1', 10, 'CSS Box Model', 'Pemahaman tentang Box Model CSS', 'pemahaman-tentang-box-model-css', 1, '<p>CSS Box Model bisa dikatakan sebagai inti dari web design. Kita tidak bisa mengatur tampilan website tanpa memahami apa itu CSS box model.</p>\r\n\r\n<h3>Pengertian Box Model</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>CSS Box Model adalah sebuah konsep dimana setiap elemen yang terdapat pada halaman web diproses sebagai kotak (box). Mulai dari paragraf, header, form, gambar, logo hingga video, sebenarnya di tampilkan oleh web browser sebagai box.</p>\r\n\r\n<p>Masing-masing element HTML ini terdiri dari 4 lapisan, yakni: konten, padding, border dan margin di keempat sisinya. Lapisan-lapisan inilah yang nantinya akan membangun konsep <strong>CSS Box Model</strong>.</p>\r\n\r\n<p>Agar lebih mudah dipahami, berikut ini adalah gambar konsepnya.</p>\r\n\r\n<p style="text-align: center;"><img alt="Box Model CSS" src="http://localhost/helloworld/assets/img/margin.png" style="width: 300px; height: 212px;" /></p>\r\n</div>\r\n\r\n<h3>Property Box Model</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dari gambar di atas dapat dijelaskan bahwa di dalam sebuah model box terdapat beberapa property utama sebagai penyusunnya, yaitu konten itu sendiri, <code class="css-code" style="color:#18c4e7;">padding</code>, <code class="css-code" style="color:#18c4e7;">border</code>, dan <code class="css-code" style="color:#18c4e7;">margin</code>. Kemudian property tambahan yang tidak kalah pentingnnya adalah <code class="css-code" style="color:#18c4e7;">width</code> dan <code class="css-code" style="color:#18c4e7;">height</code>.</p>\r\n\r\n<h4>1. Konten Utama</h4>\r\n\r\n<p>Konten di dalam sebuah elemen bisa berupa text atau gambar bahkan konten yang kosong dari sebuah elemen berada di bagian tengah yang merupakan inti dari apa yang akan ditampilkan di browser.</p>\r\n\r\n<p>Khusus untuk konten utama ini, kita bisa mengatur lebar dan tinggi konten menggunakan property <code>width</code> dan <code>height</code>.</p>\r\n\r\n<h4>2. Padding</h4>\r\n\r\n<p>Selanjutnya, terdapat padding. Padding adalah jarak antara konten dengan garis tepi (<em>border</em>) dari sebuah elemen. Penjelasan lebih detailnya akan kita bahas pada materi berikutnya.</p>\r\n\r\n<h4>3. Border</h4>\r\n\r\n<p>Setelah padding, berikutnya adalah border. Border merupakan garis tepi pembatas elemen. Secara default pada sebagian besar elemen border ini akan memiliki pengaturan tebal 0 pixel dan berwarna transparent. Kita bisa mengatur berbagai hal tentang border, seperti ketebalan, warna, dan jenis garis yang digunakan.</p>\r\n\r\n<h4>4. Margin</h4>\r\n\r\n<p>Di lapisan terakhir terdapat margin. Margin adalah spasi atau ruang kosong dari sebuah elemen yang membatasi sebuah elemen dengan elemen lain di sekelilingnya. Margin bersifat transparan dan digunakan agar setiap elemen tidak saling menempel satu sama lain.</p>\r\n</div>\r\n\r\n<p>Berikut ini adalah contoh implementasi dari beberapa property penyusun box model CSS.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  div, p {\r\n    width: 300px;\r\n    height: 50px;\r\n    padding: 15px;\r\n    border: 5px solid red;\r\n    margin: 20px;\r\n    background-color: yellow;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div&gt;Box 1 yang terbuat dari elemen tag div&lt;/div&gt;\r\n  &lt;p&gt;Box 2 yang terbuat dari elemen tag p&lt;/p&gt;\r\n&lt;/body&gt;\r\n</code></pre>\r\n', '332', 0, 1554171121, 1573706500),
(35, 'j4d72a9', '3', 'j1', 2, 'JS Script', 'Menulis Script pada Dokumen HTML', 'menulis-script-pada-dokumen-html', 1, '<p>Di dalam JavaScript, penulisan kode bisa dilakukan dengan beberapa cara. Bisa menggunakan metode Inline, Internal dan External. Sama halnya jika sebelumnya kita sudah familiar dengan cara penggunaan CSS sebagai pengatur tampilan pada dokumen HTML, JavaScript pun memiliki pola penulisan yang sama di dalam pembuatan sebuah dokumen HTML. Berikut ini adalah penjelasan masing-masing metodenya :</p>\r\n\r\n<h3>Metode Inline</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode ini bisa kita gunakan jika kode JavaScript hanya sedikit seperti halnya jika kita hanya ingin menampilkan alert pada saat mengklik sebuah tombol. Metode ini ditulis di dalam tag kode HTML itu sendiri dengan memanfaatkan sebuah event/kejadian yang telah diatur terhadap sebuah elemen HTML. Bisa itu berupa event <code>onclick</code>, <code>onsubmit</code>, <code>onmouseover</code> dll.</p>\r\n\r\n<p>Penggunaan metode ini disarankan agar ditinggalkan karena penggunaanya memiliki beberapa kelemahan dan juga terkesan tidak rapi jika kode JavaScript tercampur dengan kode HTML.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Klik tombol di bawah ini untuk memunculkan pop up box pada browser&lt;/h3&gt;\r\n  &lt;button onclick="alert(''Hello World'')"&gt;&lt;h3&gt;klik saya&lt;/h3&gt;&lt;/button&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n\r\n<div class="note">Beberapa contoh di dalam materi JavaScript ini, kami sengaja tetap menggunakan metode inline hanya untuk tujuan lebih mudahnya memahami alur logika program yang ditulis</div>\r\n</div>\r\n\r\n<h3>Metode Internal</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode ini adalah metode yang paling umum digunakan para developer web untuk menempatkan kode JavaScript ldi dalam dokumen HTML yang bersangkutan, yaitu dengan menulis kodenya di dalam tag <code class="language-html">&lt;script&gt;</code>. Tag ini bisa kita tempatkan di dalam tag <code class="language-html">&lt;head&gt;</code> ataupun di dalam tag <code class="language-html">&lt;body&gt;</code> pada struktur HTML.</p>\r\n\r\n<p>Perlu diketahui juga bahwa jika kode JavaScript sudah berhubungan dengan beberapa elemen dalam dokumen HTML, kita lebih dianjurkan untuk menulis kode JavaScript di akhir kode HTML yaitu sebelum penutup tag <code class="language-html">&lt;/body&gt;</code>. Hal ini dimaksudkan karena sebuah dokumen HTML pertama kali dilmuat oleh browser berurutan dari baris pertama hingga terakhir sehingga kode JavaScript bisa saja menghambat proses pemuatan halaman jika ditempatkan di dalam tag <code class="language-html">&lt;head&gt;</code>, sebelum seluruh dokumen HTMLnya selesai dimuat oleh browser, atau bahkan bisa menghasilkan kode yang error jika kode JavaScript sudah berkaitan dengan <strong>DOM</strong> HTML.</p>\r\n\r\n<p>Namun ada juga beberapa trik yang bisa dilakukan agar JavaScript yang bisa di tempatkan di tag head dengan menggunakan event <code>onload</code>, sehingga browser akan diperintahkan untuk memuat halaman HTML terlebih dahulu sampai selesai baru kemudian menjalankan kode JavaScript yang ada di dalam head.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Penulisan Kode JavaScript &lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    \r\n    &lt;h3&gt;Contoh penggunaan tag Script untuk menulis kode JavaScript&lt;/h3&gt;\r\n    &lt;h4&gt;"Hai semuanya, Apa kabar kalian hari ini ?"&lt;/h4&gt;\r\n    &lt;button onclick="jawab()"&gt;&lt;h3&gt;Jawab&lt;/h3&gt;&lt;/button&gt;\r\n    \r\n  &lt;script&gt;\r\n    function jawab() {\r\n      alert("Hari ini, kami sangat bersemangat");\r\n    }\r\n  &lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Penggunaan keyword <code>function</code> akan kita gunakan untuk mendemonstrasikan program kode JavaScript yang akan berjalan jika kita telah melakukan aksi tertentu seperti menekan sebuah tombol. Pada contoh di atas, di dalam sebuah tombol, kita telah memasukkan sebuah event yang ketika tombol itu diklik, maka kode yang ada di dalam nama function <code>jawab</code> akan dijalankan. Hal ini kami lakukan agar kita yang sedang belajar JavaScript bisa lebih mudah memahami bagaimana sebuah kode ditulis dan bagaimana sebuah kode itu berjalan dengan memanfaatkan interaksi dari sebuah tombol yang diklik.</p>\r\n\r\n<p>Lain halnya jika kita menulis kode tanpa memasukkannya ke dalam function, maka yang terjadi adalah kode itu (dalam hal ini sebuah alert) akan langsung dijalankan saat halaman itu dimuat seperti pada contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Penulisan Kode JavaScript &lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    \r\n    &lt;h3&gt;Contoh penggunaan tag Script untuk menulis kode JavaScript&lt;/h3&gt;\r\n    &lt;p&gt;"Hai semuanya, Apa kabar kalian hari ini ?"&lt;/p&gt;\r\n    &lt;button&gt;Jawab&lt;/button&gt;\r\n    \r\n    &lt;script&gt;\r\n        alert("Hari ini, kami sangat bersemangat");\r\n    &lt;/script&gt;\r\n  \r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Metode Eksternal</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode yang terakhir yaitu metode penulisan JavaScript secara external. Pengguanaan metode ini adalah cara yang paling dianjurkan unruk diterapkan di dalam men-develooper halaman website. Selain membuat tampilan dokumen HTML lebih rapi jika dibanding dengan metode internal, metode ini juga memungkinkan untuk kode JavaScript agar bisa dipakai di setiap halaman yang membutuhkan file tersebut.</p>\r\n\r\n<p>Sama seperti kode CSS, kita bisa menempatkan kode JavaScript secara terpisah di file lain tanpa menuliskannya lagi di dalam tag<code class="language-html">&lt;script&gt;</code>, kemudian menyimpannya dengan nama file berekstensi<code>.</code><em><code>js</code>.</em> Cara menghubungkannya dengan file HTML nya pun juga sama, namun untuk JavaScript kita diharuskan untuk menulisnya di dalam tag <code class="language-html">&lt;script&gt;</code> dan menambahkan atribut <code class="html-attr" style="color:#90ca1c;">src</code> kemudian mengisikan nilainya dengan nama file berupa URL tempat file <strong>.js</strong> itu berada.</p>\r\n\r\n<p>Berikut ini adalah kode JavaScript yang telah kami tulis di dalam file terpisah dan kami beri nama file berupa <code>external-demo.js</code>, yang isinya sama dengan contoh metode internal sebelumnya.</p>\r\n\r\n<pre>\r\n<code>function jawab() {\r\n  alert("Hari ini, kami sangat bersemangat"); \r\n}</code></pre>\r\n\r\n<p>Dan berikut ini contoh penulisan tag script dengan atribut src beserta nilainya berupa URL tempat file JavaScript itu berada.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Penulisan Kode JavaScript &lt;/title&gt;\r\n  &lt;/head&gt;\r\n  &lt;body&gt;\r\n    \r\n    &lt;h3&gt;Contoh penggunaan file external dalam menulis kode JavaScript&lt;/h3&gt;\r\n    &lt;p&gt;"Hai semuanya, Apa kabar kalian hari ini ?"&lt;/p&gt;\r\n    &lt;button onclick="jawab()"&gt;&lt;h3&gt;Jawab&lt;/h3&gt;&lt;/button&gt;\r\n    \r\n  &lt;script src="http://localhost/helloworld/assets/js/external-demo.js"&gt;&lt;/script&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Pada tutorial pembelajaran JavaScript ini, kita akan mempraktekakan kode-kode JavaScript hanya dengan metode tag <code class="language-html">&lt;script&gt;</code>, hal ini hanya karena metode ini lebih mudah untuk didemonstrasikan sebagai materi pembelajaran.</div>\r\n', '767', 0, 1554171121, 1573710238);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(36, 'jql3w5j', '3', 'j1', 3, 'JS Output', 'Mengeluarkan Output dari JavaScript', 'mengeluarkan-output-dari-javascript', 1, '<p>Hasil dari kode JavaScript yang kita buat sebanyak apapun tidak akan bisa tampil di layar browser jika kita tidak mencetak outputnya. Untuk mengeluarkan output dari kode JavaScript pada browser, ada beberapa cara yang biasa bisa dilakukan, yaitu :</p>\r\n\r\n<h3>Metode Pop-up</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Cara ini dilakukan untuk memberikan instruksi agar JavaScript mengeluarkan output berupa kotak box pada browser. Pada masing-masing browser baik itu di chrome atau firefox dan browser lainnya, tampilan dari pop-up box ini bisa berbeda-beda namun tetap memiliki fungsi yang sama.</p>\r\n\r\n<p>Adapun pop-up box ini bisa terbagi menjadi 3 macam, yaitu pop-up <code>alert</code>, pop-up <code>prompt</code>, dan pop-up <code>confirm</code>.</p>\r\n\r\n<h4>Pop-up Alert</h4>\r\n\r\n<p>Pop-up <code>alert()</code> akan menampilkan pesan pada jendela browser yang isinya tergantung apa yang kita tuliskan di dalam tanda kurung setelah keyword alert.</p>\r\n\r\n<p>Jika yang dituliskan adalah berupa text, maka harus ditulis di dalam tanda kutip.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;klik tombol di bawah untuk memunculkan alert&lt;/h3&gt;\r\n  &lt;button onclick="alert(''ini adalah output javascript melalui alert'')"&gt;&lt;h3&gt;klik disini&lt;/h3&gt;&lt;/button&gt;  \r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Pop-up Prompt</h4>\r\n\r\n<p>Berikutnya ada pop-up berupa prompt yang akan bisa menampilkan box yang berisikan kolom input yang natinya bisa diisikan sebuah data. Keyword yang digunakan adalah <code>prompt()</code>. Nantinya jika kita menuliskan apapun yang diisikan pada input ini maka JavaScript akan menyimpannya.</p>\r\n\r\n<p>Perhatikan contoh berikut ini.</p>\r\n\r\n<p>Kita membuat sebuah function <code>ambil_nama()</code> yang mana isinya adalah prompt yang disimpan di dalam variabel <code>nama</code>. Kemudian ketika input prompt diisikan nilai dan ditekan tombol OK, maka alert akan muncul dan menampilkan apa yang tadi diisikan di dalam input prompt. Function <code>ambil_nama()</code> ini disisipkan di dalam sebuah tombol, yang jika tombol diklik maka kode program yang ada di dalam function ini akan dijalankan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;klik tombol di bawah untuk memunculkan prompt input nama&lt;/h3&gt;\r\n  &lt;h3&gt;\r\n    kemudian klik ok atau tekan enter, \r\n    maka akan muncul alert \r\n    yang berisi apapun yang kamu masukkan dalam prompt\r\n  &lt;/h3&gt;\r\n  &lt;button onclick="ambil_nama()"&gt;&lt;h3&gt;klik disini&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\nfunction ambil_nama() {\r\n  var nama = prompt(''nama kamu siapa: '');\r\n  alert(nama);\r\n}\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n</code></pre>\r\n\r\n<h4>Pop-up Confirm</h4>\r\n\r\n<p>Yang terakhir ada yang namanya pop-up <code>confirm</code>. Pop-up ini biasa difungsikan untuk membuat kotak dialog yang berisi konfirmasi sebuah tindakan antara &quot;Ya&quot; dan &quot;Tidak&quot; atau &quot;Benar&quot; dan &quot;Salah&quot; yang diwakili oleh tombol OK dan CANCEL di dalam kotak dialog.</p>\r\n\r\n<p>Perlahan akan kita pelajari tentang pengkondisian berupa nilai TRUE dan FALSE atau yang lebih dikenal dengan istilah BOOLEAN.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;klik tombol di bawah untuk memunculkan dialog konfirmasi&lt;/h3&gt;\r\n  &lt;h4 id="text"&gt;\r\n    ketika muncul kotak konfirmasi, \r\n    jika kita menekan tombol OK maka,\r\n    elemen h4 ini akan terhapus,\r\n    sedangkan jika menekan tombol cancel maka,\r\n    akan keluar pop-up alert\r\n  &lt;/h4&gt;\r\n  &lt;button onclick="yakin()"&gt;&lt;h3&gt;hapus&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\nfunction yakin() {\r\n  var keputusan = confirm(''apakah kamu yakin ingin menghapus elemen h3 ?'');\r\n  if(keputusan){\r\n    document.getElementById(''text'').innerHTML = '''';\r\n  } else {\r\n    alert(''tidak ada elemen yang dihapus'');\r\n  }\r\n}\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Metode Console</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Salah satu yang menarik dalam belajar JavaScript adalah dengan adanya mesin console yang sudah secara default tertanam di dalam sebuah web browser. Cara mengakses console ini bisa berbeda-beda pada masing-masing browser ataupun system operasi yang dipakai. Misalkan saja di browser Chrome di dalam system operasi Windows, kita bisa pilih menu <strong>option</strong> pengaturan - <strong>more tools</strong> - <strong>developer tools</strong>, atau bisa juga dengan menggunakan shortcut keyboard dengan menekan tombol F12. Kemudian akan muncul beberapa tab yang nantinya terdiri dari beberapa pengaturan yang bisa diilih, maka dalam hal ini, pilihlah tab <strong>console</strong>.</p>\r\n\r\n<p>Di dalam console sendiri kita bisa lakukan dua hal, yaitu menulis kode JavaScript secara langsung atau kita juga bisa menampilkan output dari JavaScript yang telah ditulis di dalam dokumen HTML kita. Caranya adalah dengan menuliskan keyword <code>console.log()</code>. Keyword ini akan menginstruksikan perintah di dalam console untuk menampilkan apa yang ada di dalam tanda kurung setelah keyword tersebut.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;klik tombol untuk mengetahui hasil penghitungan yang dilakukan JavaScript&lt;/h3&gt;\r\n  &lt;button onclick="hitung()"&gt;&lt;h3&gt;5 + 8 = ?&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;p&gt;Setelah tombol diklik, JavaScript akan melakukan oprasi penjumlahan kedua angka tadi.&lt;/p&gt;\r\n  &lt;p&gt;Sedangkan hasilnya akan ditampilkan di dalam tab console yang ada di developer tools browser.&lt;/p&gt;\r\n  &lt;p&gt;Bukalah pengaturan developer tools dengan menggunakan shortcut F12 pada keyboard.&lt;/p&gt;\r\n  \r\n&lt;script&gt;\r\n  function hitung() {\r\n    var x = 5 + 8;\r\n    console.log(x);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Selain bisa mengeluarkan output dari JavaScript sesuai perintah kita, console browser ini juga akan menampilkan pesan pada kode JavaScript yang kita tulis apabila telah terjadi kesalahan alur logika maupun kesalahan syntax penulisan kode.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;klik tombol untuk mengetahui hasil penghitungan yang dilakukan JavaScript&lt;/h3&gt;\r\n  &lt;p&gt;\r\n    Jika ditambahkan, angka 5 dengan angka 8 maka hasilnya adalah...\r\n    &lt;button onclick="hitung()"&gt;&lt;h3&gt;hitung&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;/p&gt;\r\n  &lt;p&gt;Dengan sengaja, kita menulis keyword &lt;b&gt;console.log()&lt;/b&gt; dalam penulisan yang salah.&lt;/p&gt;\r\n  &lt;p&gt;Bukalah tab console dan kita akan diberitahu dibagian mana kode yang mengalami kesalahan&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\n  function hitung() {\r\n    var x = 5 + 8;\r\n    console.lo(x); // baris kode yang sengaja ditulis salah\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Jika kode di atas dijalankan dan ditekan tombolnya maka console akan menampilkan pesan error yang berarti keyword atau perintah <code>console.lo</code> ini <u>bukan</u> function yang valid dari kode JavaScript, seperti yang bisa kita lihat pada gambar di bawah ini.</p>\r\n\r\n<p style="text-align: center;"><img alt="debug" src="http://localhost/helloworld/assets/img/debug.png" style="width: 633px; height: 175px;" title="pesan error console" /></p>\r\n\r\n<p>Pesan error ini bisa bermacam-macam, tergantung dari jenis kesalahan kode yang terjadi. Hal ini akan sangat membantu kita dalam proses menganalisa (<em>debugging</em>) keseluruhan kode JavaScript yang kita tulis sehingga jika terdapat error akan bisa segera dicari solusinya.</p>\r\n</div>\r\n\r\n<h3>Metode InnerHTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selanjutnya ada metode <code>innerHTML</code> sebagai cara untuk mengeluarkan output dari JavaScript. Penjelasan tentang metode ini akan sangat erat kaitannya dengan istilah DOM (<em>Document Object Model</em>). Lalu apakah itu DOM ?</p>\r\n\r\n<p>Secara sederhananya, DOM adalah kumpulan aturan atau cara bagi programmer untuk memanipulasi apapun yang tampil dalam halaman web. DOM tidak selalu terikat dengan JavaScript, dan sepenuhnya bukan bagian dari JavaScript. DOM yang sama bisa juga diakses dengan bahasa client-side lain seperti JScript.</p>\r\n\r\n<p>Tag atau elemen yang ada di dalam HTML diatur di dalam DOM. Dengan menggunakan JavaScript, kita bisa memanipulasi seluruh tag HTML ini. Salah satu contoh DOM yang akan kita gunakan adalah fungsi atau keyword <code>document.getElementById</code>. Fungsi document.get ElementById sendiri adalah untuk mencari sebuah tag HTML berdasarkan id yang dimiliki oleh tag tersebut.</p>\r\n\r\n<p>Dengan bantuan DOM inilah nantinya JavaScript bisa memiliki kontrol penuh terhadap elemen-elemen yang ada di dalam dokumen HTML sehingga kita bisa memanipulasi elemen di dalam dokumen yang salah satu bentuk manipulasinya yaitu dengan menggunakan keyword innerHTML. Fungsi dari innerHTML yang sebenarnya adalah untuk memasukkan atau mengubah data ke dalam elemen yang telah ditandai dengan DOM getElementById tadi.</p>\r\n\r\n<p>Berikut ini adalah contoh penggunaan metode innerHTML untuk menuliskan text pada sebuah elemen HTML.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  div { border: 1px solid red; padding: 0 5px; }\r\n&lt;/style&gt; \r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Output dengan metode innerHTML JavaScript&lt;/h3&gt; \r\n  &lt;div id="text"&gt;&lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;button onclick="tulis()"&gt;&lt;h3&gt;tulis text&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function tulis() {\r\n    var xx = document.getElementById(''text'');\r\n    xx.innerHTML = ''&lt;h1&gt;Selamat belajar JavaScript&lt;/h1&gt;'';\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Penjelasan tentang DOM ini akan kita bahas lebih lebih detail lagi pada materi terpisah yang nantinya juga akan membahas tentang metode apa saja selain innerHTML sebagai cara untuk memanipulasi elemen-elemen pada dokumen HTML.</p>\r\n</div>\r\n', '1083', 0, 1554171121, 1573740857),
(37, 'j6lditt', '3', 'j1', 4, 'JS Syntax', 'Syntax Penulisan JavaScript', 'syntax-penulisan-javascript', 1, '<p>Bahasa program JavaScript memiliki aturan syntax penulisan dasar agar semua kode dapat dieksekusi oleh komputer dengan tepat. Jika kita menuliskan kesalahan yang ditulis di luar aturan-aturan ini kemungkinan kode JavaScript kita tidak ada akan berjalan sebagaimana mestinya seperti yang diharapkan.</p>\r\n\r\n<p>Dalam bahasa program, terdapat istilah-istilah untuk menamai setiap bagian dari keseluruhan kode yang ada.</p>\r\n\r\n<h3>Statement</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Statement adalah baris instruksi atau perintah yang telah kita tulis dan yang akan dijalankan oleh browser berurutan (terstruktur) dari baris teratas sampai dengan baris terbawah dan dari kiri ke kanan. Tentunya dalam sebuah program, bisa terdiri atas satu statement atau satu baris perintah atau bahkan bisa kita tulis sebanyak apapun perintah yang kita butuhkan.</p>\r\n\r\n<p>Setiap baris perintah dalam JavaScript ini memiliki aturan penulisan agar kode yang telah ditulis bisa dimengerti oleh browser sebagai kode JavaScript yang valid.</p>\r\n\r\n<h4>Sifat case-sensitif</h4>\r\n\r\n<p>Statement pada JavaScript bersifat <code>case-sensitif</code>, artinya JavaScript memperdulikan penulisan dengan huruf besar dan huruf kecil.</p>\r\n\r\n<p>Seperti pada keyword <code>var</code>, <strong>VAR</strong> tidak sama dengan <strong>Var</strong> dan juga tidak sama dengan <strong>var</strong>. </p>\r\n\r\n<h4>Penulisan karakter whitespace</h4>\r\n\r\n<p>Karakter-karakter spasi, enter, tab dan karakter lain yang tidak kelihatan atau yang sering dikenal dengan istilah whitespace akan diabaikan pada saat pemrosesan JavaScript. Karakter-karakter ini bisa digunakan untuk menjorokkan (indent) kode program agar lebih mudah dibaca.</p>\r\n\r\n<pre>\r\n<code>  var a = 10;\r\n  function cetak(){\r\n    console.log(a);\r\n  }</code></pre>\r\n\r\n<h4>Penulisan tanda semicolon</h4>\r\n\r\n<p>Berbeda dari kebanyakan bahasa pemograman, di dalam JavaScript karakter titik-koma atau semicolon <code>(;)</code> sifatnya opsional untuk digunakan sebagai penanda akhir dari baris program.</p>\r\n\r\n<pre>\r\n<code>// penulisan tanpa tanda semicolon\r\nvar a\r\na\r\n=\r\n15\r\nconsole.log(a)\r\n\r\n// akan diartikan oleh JavaScript sebagai \r\n\r\nvar a; a = 15; console.log(a);</code></pre>\r\n\r\n<p>JavaScript mendeteksi baris baru sebagai penanda akhir dari statement baris program namun secara otomatis, JavaScript juga akan mengenali maksud dari kode tersebut agar tidak error ketika dijalankan.</p>\r\n\r\n<p>Tetapi pada kasus lain, JavaScript akan memberikan perilaku yang berbeda.</p>\r\n\r\n<pre>\r\n<code>// penulisan\r\na = 5\r\nb = 3 + a\r\n(b + 10).toString()\r\n\r\n// akan diartikan oleh JavaScript sebagai\r\na = 5; b = 3 + a(b + 10).toString();</code></pre>\r\n\r\n<p>Hal ini karena JavaScript memiliki aturan syntax yang memungkinkan kita melakukan operasi sebuah variable dengan variable lainnya yang akan diartikan oleh JavaScript sebagai lanjutan dari kode sebelumnya. </p>\r\n\r\n<p>Penggunaan tanda semicolon walau bersifat opsional, namun sangat dianjurkan untuk  tetap digunakan. Selain membuat program lebih mudah dibaca dan dimengerti, tanda semicolon juga akan menghindarkan kode program dari arti yang ambigu.</p>\r\n</div>\r\n\r\n<h3>Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di setiap bahasa pemrograman, variable adalah hal yang mutlak dipakai untuk menyimpan suatu nilai untuk diolah kemudian tanpa menuliskan nilai dari variable itu berulang kali. Begitu juga dengan JavaScript, hal yang perlu dilakukan untuk menulis variable adalah dengan menulis keyword <code>var</code> dan membuatkan nama variablenya.</p>\r\n\r\n<pre>\r\n<code>var x;     // mendeklarasikan variable x dengan nilai yang belum didefinisikan\r\nvar y = 4; // mendeklarasikan variable y dengan nilai 4\r\nvar a,b,c; // mendeklarasikan banyak variable dalam satu baris kode</code></pre>\r\n\r\n<p>Penulisan nama variable ini meski bisa dipilih namanya bebas, namun juga tetap harus mengikuti aturan yang ada. Untuk penjelasan tentang variable, silahkan dilanjutkan ke materi variable yang sudah dibuat secara terpisah.</p>\r\n</div>\r\n\r\n<h3>Value</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Value atau yang berarti nilai, bisa berupa nilai yang tetap atau nilai yang disimpan dalam variable. Nilai-nilai ini tidak terbatas hanya pada angka tetapi juga bisa sebagai kata atau kalimat dan ini biasa disebut<em>string</em>. Penulisan string harus diletakkan di dalam tanda petik tunggal <code>(&#39; &#39;)</code> atau tanda petik ganda <code>(&quot; &quot;)</code>.</p>\r\n\r\n<pre>\r\n<code>var x = "Selamat Datang"; // nilai dari variable x berupa text\r\nvar y = 4; // nilai dari variable y berupa angka</code></pre>\r\n</div>\r\n\r\n<h3>Operator</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Hal yang sama pada matematika dasar, operator juga dipakai untuk mengolah data pada JavaScript, seperti perkalian <code>(*)</code>, pembagian<code>(/)</code>, penjumlahan<code>(+)</code>, dan pengurangan <code>(-)</code></p>\r\n\r\n<p>Namun untuk bahasa pemrograman, beberapa operator ini akan lebih banyak lagi tanda-tanda operator yang digunakan. Secara sederhananya, operator-operator ini akan terbagi menjadi 3 bagian yang dikelompokkan berdasarkan dari jumlah <em>operand</em> yang dibutuhkan. <strong>Operand</strong> adalah objek yang akan dilakukan operasi. Ketiga bagian jenis opeator ini adalah, operator <strong>binary</strong>, operator <strong>ternary</strong> dan operator <strong>unary</strong>.</p>\r\n\r\n<p>Berikut ini adalah contoh beberapa operator yang disebut sebagai operator binary.</p>\r\n\r\n<pre>\r\n<code>x + y; // operator aritmatika/ matematika\r\nz = 10; // operator penugasan/assignment\r\nx == y; // operator perbandingan\r\nx &amp;&amp; y; // operator logika\r\nzz = "Belajar " + "JavaScript"; // operator string</code></pre>\r\n</div>\r\n\r\n<h3>Keyword</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Keyword merupakan kata yang sudah dipakai oleh JavaScript sendiri sebagai bahasanya untuk mendefinisikan fungsi tertentu seperti keyword <code>var</code> yang berfungsi mendeklarasikan sebuah variable baru atau keyword <code>if else</code> yang digunakan untuk menguji sebuah kondisi. Kita tidak diperbolehkan memakai kata-kata ini untuk keperluan membuat nama variable atau nama fungsi.</p>\r\n\r\n<p>Berikut ini adalah gambar daftar keyword yang sudah dipakai oleh JavaScript sebagai syntax nya (<strong>reserved word</strong>).</p>\r\n\r\n<p><img alt="reserved-keyword" class="img-responsive" src="http://localhost/helloworld/assets/img/reserve-key.png" style="width: 613px; height: 131px;" /></p>\r\n\r\n<p><img alt="reserved-keyword2" class="img-responsive" src="http://localhost/helloworld/assets/img/reserve-key2.png" style="width: 557px; height: 129px;" /></p>\r\n</div>\r\n\r\n<h3>Comment</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita bisa memberikan kode komentar untuk dan memastikan kode yang berada dalam tanda comment ini tidak akan dieksekusi oleh browser. Tanda yang digunakan untuk mengomentari kode adalah dua garis miring <code>(//)</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;hapus tanda komentar (baris ke-11) \r\n  untuk bisa menjalankan fungsi penjumlahan ini&lt;/h3&gt;\r\n  &lt;button onclick="tambah()"&gt;&lt;h3&gt;5 + 4 = ?&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = 5;\r\n  var y = 4;\r\n  var z = x + y;\r\n\r\n  function tambah(){\r\n    // document.getElementById(''xx'').innerHTML = z;\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '800', 0, 1554171121, 1573744692),
(38, 'j831ydc', '3', 'j1', 5, 'JS Variable', 'Variable pada JavaScript', 'variable-pada-javascript', 1, '<p>Bayangkan jika kita memiliki sebuah bilangan dengan nilainya berupa angka jutaan lebih seperti 32.304.578. Kemudian kita ingin menjumlahkannya dengan angka jutaan lainnya. Dalam satu kasus sederhana, kemungkinan kita masih bisa untuk menuliskan angka-angka ini secara teliti tanpa kesalahan. Namun untuk kasus yang lebih besar yang di dalamnya terdapat banyak sekali angka dengan nilai yang besar, kita kan kesulitan untuk menulisnya lagi untuk dilakukan operasi dengan bilangan lainnya secara teliti. Maka dari itu, setiap nilai bilangannya bisa kita simpan pada sebuah variable dengan nama dan kita bisa menggunakan variable ini sebagai pengganti nilai tersebut untuk dilakukan operasi selanjutnnya.</p>\r\n\r\n<h3>Definisi Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p><strong>Variable</strong> adalah tempat atau wadah yang memiliki nama untuk menyimpan sebuah nilai dalam lingkup yang spesifik. Nilai yang dimasukkan bisa berbeda-beda, bisa itu angka, bisa itu text atau lainnya.</p>\r\n\r\n<p>Dalam membuat nama variable, kita harus mengetahui tiga aspek penting yaitu <strong>deklarasi</strong>, <strong>inisialisasi</strong>, dan <strong>assignment</strong>.</p>\r\n\r\n<p><strong>Deklarasi</strong> dilakukan untuk mendaftarkan nama variable ke dalam lingkup yang sesuai. Kemudian <strong>Inisialisasi</strong> dilakukan untuk menyediakan memori di dalam komputer untuk variable yang telah dibuat. Sedangkan <strong>Assignment</strong> dilakukan untuk menetapkan nilai secara spesifik ke dalam variable.</p>\r\n\r\n<pre>\r\n<code>  var x;  // proses deklarasi sekaligus inisialisasi\r\n  x = 20; // proses assignment\r\n  \r\n  // atau semua proses dilakukan dalam satu statement sekaligus.\r\n  \r\n  var x = 20; // deklarasi &amp; inisialisasi &amp; assignment</code></pre>\r\n\r\n<p>Keyword yang digunakan untuk membuat nama variable ini selain <code>var</code>, ada juga <code>let</code> dan <code>const</code>. Tetapi untuk pembelajaran JavaScript kita akan cenderung lebih banyak untuk menggunakan keyword var, karena let dan const akan kompleks penjelasannya jika belum paham mengenai konsep JavaScript <strong>Hoisting</strong>.</p>\r\n</div>\r\n\r\n<h3>Aturan Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selain aturan utama dengan menuliskan keyword var sebelum nama variable, berikut ini adalah beberapa aturan dasar yang digunakan JavaScript untuk sebuah nama variable.</p>\r\n\r\n<h4>1. Tidak boleh menggunakan Reserved Word</h4>\r\n\r\n<p>Nama variable ini boleh dipilih bebas asal tidak memakai nama keyword yang sudah dipakai JavaScript sebagai syntax bahasanya seperti <code>break</code>, <code>return</code> dll. Lebih disarankan agar memilih nama yang relevan dengan nilainya.</p>\r\n\r\n<h4>2. Tidak boleh ada Spasi</h4>\r\n\r\n<p>Jika nama variable yang ingin dibuat lebih dari satu kata, maka penulisannya tidak boleh menggunakan tanda spasi antar kata. Kita bisa mengganti tanda spasi ini dengan tanda underscore (<code>_</code>) seperti <code>var belajar_javascript</code>.</p>\r\n\r\n<h4>3. Tidak boleh diawali dengan Angka</h4>\r\n\r\n<p>Pemilihan nama variable bisa diawali dengan huruf, tanda dolar <code>($)</code> atau tanda urderscore <code>(_)</code> tetapi tidak boleh diawali dengan angka. Kita boleh menggunakan angka asal angkanya diletakkan di akhir kata atau di tengah.</p>\r\n\r\n<pre>\r\n<code>  var boleh;\r\n  var _boleh;\r\n  var $boleh;\r\n\r\n  var boleh123;\r\n\r\n  var 3gakboleh;</code></pre>\r\n\r\n<h4>4. Aturan camelCase</h4>\r\n\r\n<p>Jika nama variable lebih dari satu kata, maka disarankan mengikuti aturan camelCase, yaitu tata cara penulisan nama variable yang antar katanya tidak dipisahkan menggunakan spasi tetapi menggunakan atauran huruf kapital. Kata pertama ditulis dengan huruf kecil semua, kata kedua ditulis dengan diawali huruf kapital, begitu juga dengan kata ketiga dan seterusnya.</p>\r\n\r\n<p>Cara penulisan ini merupakan cara yang paling direkomendasikan dan hampir semua web developer menggunakan cara ini.</p>\r\n\r\n<pre>\r\n<code>  var namaVariableYangPanjang;</code></pre>\r\n</div>\r\n\r\n<h3>Shorthand Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika kita memiliki sebuah kasus dimana kita melakukan deklarasi dan assignment terhadap nama-nama variable yang banyak, kita diperbolehkan menulisnya dengan penulisan shorthand atau penyingkatan. Seperti pada contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code>  var nama;\r\n  var umur;\r\n  var lulus;\r\n  \r\n  nama = "John";\r\n  umur = 25;\r\n  lulus = true;</code></pre>\r\n\r\n<p>Cara penulisan di atas bisa disingkat menjadi :</p>\r\n\r\n<pre>\r\n<code>  var nama = "John",\r\n      umur = 25,\r\n      lulus = true;</code></pre>\r\n\r\n<p>Keyword var cukup ditulis sekali saja, kemudian proses assignment dilakukan secara langsung dan dipisahkan dengan tanda koma antar variablenya.</p>\r\n</div>\r\n\r\n<h3>Variable Scope</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam variable ada yang dinamakan scope variable atau lingkup hidup sebuah variable. Bagaimana maksudnya? Hal ini akan sedikit rumit untuk dijelaskan jika kita belum mengerti materi tentang <code>function</code> dan <code>object</code>.</p>\r\n\r\n<p>Jika dalam definisi variable adalah tempat menyimpan nilai dalam lingkup akses yang spesifik, maka arti dari lingkup akses spesifik inilah yang disebut dengan scope.</p>\r\n\r\n<p>Khusus untuk materi variable scope ini, kita akan membahasnya pada materi lainnya setelah kita belajar lebih detail tentang function.</p>\r\n</div>\r\n', '609', 0, 1554171121, 1573744933),
(39, 'jnsjl98', '3', 'j1', 6, 'JS Operator', 'Operator pada JavaScript', 'operator-pada-javascript', 1, '<p>Operator dalam JavaScript adalah sebuah simbol yang digunakan untuk melakukan sebuah operasi. Mirip yang sudah kita pelajari di pelajaran sekolah yaitu tentang operasi penjumlahan, perkalian, pembagian atau pengurangan, di JavaScript pun terdapat hal serupa. Namun akan lebih spesifik lagi penggunaannya dengan beberapa tambahan simbol yang digunakan untuk membuat sebuah program.</p>\r\n\r\n<h3>Jenis Operator</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam JavaScript, operator-operator ini dapat digolongkan menjadi 3 bagian berdasarkan jumlah operand yang digunakan. Jika belum paham apa itu istilah operand, <strong>operand</strong> adalah objek yang akan dilakukan proses operasi.</p>\r\n\r\n<p>Pembagian golongan operator ini adalah operator <strong>binary</strong>, operator <strong>ternary</strong> dan operator <strong>unary</strong>.</p>\r\n\r\n<h4>Operator Binary</h4>\r\n\r\n<p>Operator binary adalah operator yang membutuhkan dua operand dalam penggunaannya.</p>\r\n\r\n<p style="text-align: center;"><strong><span style="color:#3498db;">OPERAND1</span> <span style="color:#9b59b6;">OPERATOR</span> <span style="color:#3498db;">OPERAND2</span></strong></p>\r\n\r\n<p>Yang termasuk di dalam operator binary ada beberapa yang mungkin kita sudah familiar yaitu operator <strong>Aritmatika</strong>, operator <strong>Assign</strong>, operator <strong>Perbandingan</strong>, operator <strong>Logika</strong>, dan operator <strong>String</strong>.</p>\r\n\r\n<h4>Operator Ternary</h4>\r\n\r\n<p>Operator Ternary adalah operator yang membutuhkan tiga buah operand. Yang termasuk dalam kategori operator ini adalah operator <strong>Kondisional</strong>.</p>\r\n\r\n<p style="text-align: center;"><strong><span style="color:#3498db;">OPERAND1</span> <span style="color:#9b59b6;">OPERATOR</span> <span style="color:#3498db;">OPERAND2</span> <span style="color:#9b59b6;">OPERATOR</span></strong> <span style="color:#3498db;"><strong><span style="color:#3498db;">OPERAND3</span></strong></span></p>\r\n\r\n<h4>Operator Unary</h4>\r\n\r\n<p>Sedangkan operator Unary adalah operator yang hanya membutuhkan satu operand saja seperti pada operator <strong>Typeof</strong>.</p>\r\n\r\n<p style="text-align: center;"><strong><span style="color:#9b59b6;">OPERATAOR </span><span style="color:#3498db;">OPERAND </span></strong>atau <strong><span style="color:#3498db;">OPERAND </span><span style="color:#9b59b6;">OPERATOR</span></strong></p>\r\n</div>\r\n\r\n<h3>Operator Aritmatika</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Operator aritmatika terdiri dari beberapa simbol operator, yaitu:</p>\r\n\r\n<ul>\r\n	<li>(<code>+</code>) penjumlahan</li>\r\n	<li>(<code>-</code>) pengurangan</li>\r\n	<li>(<code>*</code>) perkalian (menggunakan tanda bintang bukan tanda silang)</li>\r\n	<li>(<code>/</code>) pembagian</li>\r\n	<li>(<code>%</code>) modulus atau sisa bagi</li>\r\n	<li>(<code>++</code>) increment</li>\r\n	<li>(<code>--</code>) decrement</li>\r\n</ul>\r\n\r\n<p>Mungkin untuk operator <code>+</code>, <code>-</code>, <code>*</code>, <code>/ </code>kita sudah mengerti cara penggunaannya, namun tetap juga harus diperhatikan pula penggunaanya saat terjadi operasi secara bersamaan dalam satu ekspresi.</p>\r\n\r\n<p>Misalnya saja pada ekspresi <strong>1 + 2 * 3 - 4 = ?</strong>.</p>\r\n\r\n<p>Jika kita menjawabnya dengan nilai <strong>5 </strong>maka kita harus kembali lagi membuka buku pelajaran sekolah. hehe</p>\r\n\r\n<p>Secara teori matematika, kita harus mengetahui urutan operasi yang harus dilakukan terlebih dahulu, seperti urutan yang ada di bawah ini, urutan yang utama berawal dari kiri sampai ke kanan.</p>\r\n\r\n<p><strong><code>kurung() kali* bagi/ tambah+ kurang-</code></strong></p>\r\n\r\n<p>Terlepas dari urutan penulisan ekspresi operand dan operator dari kiri ke kanan, operasi aritmatika yang akan dilakukan terlebih dahulu adalah yang memiliki tanda kurung kemudian perkalian, pembagian, penjumlahan dan terakhir adalah pengurangan.</p>\r\n\r\n<p>Maka, dari contoh kasus ekspresi <strong>1 + 2 * 3 - 4 = ?</strong>, nilai yang dihasilkan adalah <strong>3</strong>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator aritmatika&lt;/h3&gt;\r\n  &lt;h1&gt;1 + 2 * 3 - 4 = ?&lt;/h1&gt;\r\n  &lt;button onclick="hitung()"&gt; hitung &lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function hitung(){\r\n    var x = 1 + 2 * 3 - 4;\r\n    alert(x);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Jika kita ingin ekspresi tersebut menghasilkan angka <strong>5</strong>, maka kita harus tambahkan tanda kurung menjadi</p>\r\n\r\n<p style="text-align: center;"><strong>( 1 + 2 ) + 3 - 5 = 5</strong>.</p>\r\n\r\n<p>Sedangkan untuk <strong>modulus </strong>yang ditulis dengan simbol persen merupakan sisa bagi antara operand1 dan operand2.</p>\r\n\r\n<p>Jika kita menuliskan <code>10 % 5 </code>maka nilai yang dihasilkan adalah<strong>0</strong>, atau jika kita menuliskan <code>10 % 3 </code>maka hasilnya adalah <strong>1</strong>.</p>\r\n\r\n<p>Untuk pengertian incerement dan decrement ini juga cukup penting untuk dipahami.<strong>increment </strong>merupakan istilah dari <code>(+1) </code>seperti <strong>x++ </strong>yang artinya <strong>x + 1 </strong>sedangkan <strong>decrement </strong>merupakan istilah dari <code>(-1) </code>seperti <strong>x-- </strong>yang artinya <strong>x - 1</strong>.</p>\r\n</div>\r\n\r\n<h3>Operator Assign</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selanjutnya ada operator assign atau dalam bahasa Indonesia berarti operator yang ditujukan untuk penugasan. Dalam hal ini yang sering digunakan adalah simbol sama dengan <code>(=)</code>. Arti dari tanda ini mungkin akan sedikit <u>berbeda</u> dengan istilah matematika pada umumnya yaitu <strong>1 + 2 = 3</strong>.</p>\r\n\r\n<p>Tanda sama dengan dalam bahasa program (JavaScript) biasanya akan sering kita gunakan jika kita bekerja dengan variable. Tanda ini digunakan untuk memberikan perintah terhadap suatu nilai (operand sebelah kanan dari tanda <code>=</code>) agar berada di dalam sebuah variable (operand yang ada di sebelah kiri dari tanda <code>=</code>).</p>\r\n\r\n<pre>\r\n<code> var x;\r\n  x = 10; \r\n  // artinya kita memberikan perintah agar nilai 10 berada di dalam variable x</code></pre>\r\n\r\n<p>Selain tanda sama dengan<code>(=)</code>, masih ada beberapa operator assign lainnya. Cara penulisan ini merupakan peringkasan dalam menulis ekspresi.</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-bordered table-striped" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">operator</th>\r\n			<th scope="col">contoh kasus</th>\r\n			<th scope="col">artinya</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td style="text-align:center"><code>+=</code></td>\r\n			<td style="text-align:center">x += y</td>\r\n			<td style="text-align:center">x = x + y</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>-=</code></td>\r\n			<td style="text-align:center">x -= y</td>\r\n			<td style="text-align:center">x = x - y</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>*=</code></td>\r\n			<td style="text-align:center">x *= y</td>\r\n			<td style="text-align:center">x = x * y</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>/=</code></td>\r\n			<td style="text-align:center">x /= y</td>\r\n			<td style="text-align:center">x = x / y</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Jika diterapkan pada sebuah kode maka akan jadi seperti di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator assign +=&lt;/h3&gt;\r\n  &lt;h1&gt;Jika x = 10, maka x += 5 adalah ?&lt;/h1&gt;\r\n  &lt;button onclick="hitung()"&gt; hitung &lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function hitung(){\r\n    var x; // deklarasi variable x\r\n    x = 10; // angka 10 ditugaskan untuk masuk ke dalam variable x \r\n    x += 5; // variable x ditugaskan lagi (ditimpa nilainya) dengan angka x itu sendiri (10) + 5\r\n    alert(x); // jadi nilai x sekarang bukan lagi 10 melainkan 10 + 5\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Operator Perbandingan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Operator perbandingan ini digunakan untuk membandingkan dua buah operand dan yang akan dihasilkan oleh operator ini adalah nilai BOOLEAN yaitu <strong>true </strong>atau <strong>false</strong>.</p>\r\n\r\n<p>Berikut ini adalah daftar operator yang termasuk di dalam operator perbandingan.</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-bordered table-striped" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">operator</th>\r\n			<th scope="col">deskripsi</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td style="text-align:center"><code>==</code></td>\r\n			<td>sama dengan</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>===</code></td>\r\n			<td>sama nilai dan sama tipe (membandingkan nilai dan tipe datanya)</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>!=</code></td>\r\n			<td>tidak sama dengan</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>!==</code></td>\r\n			<td>tidak sama nilai dan tidak sama tipe (membandingkan nilai dan tipe datanya)</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>&gt;</code></td>\r\n			<td>lebih besar dari</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>&lt;</code></td>\r\n			<td>lebih kecil dari</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>&gt;=</code></td>\r\n			<td>lebih besar atau sama dengan</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align:center"><code>&lt;=</code></td>\r\n			<td>lebih kecil atau sama dengan</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator perbandingan yang menghasilkan nilai BOOLEAN&lt;/h3&gt;\r\n  &lt;button onclick="jalankan1()"&gt;&lt;h3&gt;apakah 10 == 5 &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan2()"&gt;&lt;h3&gt;apakah 10 != 5 &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan3()"&gt;&lt;h3&gt;apakah 10 &gt; 5 &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan4()"&gt;&lt;h3&gt;apakah 10 === "10" &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = 10,\r\n      y = 5,\r\n      z = "10";\r\n  function jalankan1(){\r\n    alert(x == y); // apakah x sama dengan y ?\r\n  }\r\n  function jalankan2(){\r\n    alert(x != y); // apakah x tidak sama dengan y ?\r\n  }\r\n  function jalankan3(){\r\n    alert(x &gt; y); // apakah x lebih besar dari y ? \r\n  }\r\n  function jalankan4(){\r\n    alert(x === z); // apakah x sama nilai dan sama tipe dengan z ?\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Operator Logika</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Operator logika ini digunakan untuk menentukan logika dari beberapa ekspresi yang digabungkan menjadi sebuah ekspresi utuh yang digunakan sebagai kondisi pengujian. Nilai yang dihasilkan dari operator ini adalah BOOLEAN antara <strong>true</strong> dan <strong>false</strong>.</p>\r\n\r\n<p>Operator yang termasuk ke dalam operator logika ini adalah :</p>\r\n\r\n<ul>\r\n	<li><code>&amp;&amp; </code>(AND)</li>\r\n	<li><code>|| </code>(OR)</li>\r\n	<li><code>! </code>(NEGASI)</li>\r\n</ul>\r\n\r\n<h4>Operator AND</h4>\r\n\r\n<p>Operator <b>AND </b>yang ditulis dengan tanda <code>&amp;&amp; </code>hanya akan menghasilkan nilai <strong>TRUE </strong>jika kedua nilai yang dibandingkan juga bernilai <b>TRUE</b>, dan menghasilkan nilai <strong>FALSE </strong>jika salah satu atau kedua nilai yang dibandingkan adalah <strong>FALSE</strong>.</p>\r\n\r\n<p>Jika dijabarkan sebuah rumus,maka yang akan terlihat adalah seperti di bawah ini.</p>\r\n\r\n<ul>\r\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">AND </span><span style="color:#2ecc71">TRUE </span></strong>hasilnya <span style="color:#2ecc71"><strong>TRUE</strong></span></li>\r\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">AND </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\r\n	<li><strong><span style="color:#9b59b6"><strong><span style="color:#e74c3c">FALSE </span></strong>AND </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator AND (&amp;&amp;)&lt;/h3&gt;\r\n  &lt;h1&gt;Jika angka = 10 &lt;/h1&gt;\r\n  &lt;h3&gt;exp 1 : apakah angka lebih kecil dari 11 ? &lt;button onclick="jalankan1()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;exp 2 : apakah angka lebih besar dari 9 ? &lt;button onclick="jalankan2()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;Logika : apakah exp1 AND exp2 TRUE ? &lt;button onclick="jalankan3()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  \r\n&lt;script&gt;\r\n  var angka = 10;\r\n  function jalankan1(){\r\n    alert(angka &lt; 11); // true\r\n  }\r\n  function jalankan2(){\r\n    alert(angka &gt; 9); // true\r\n  }\r\n  function jalankan3(){\r\n    alert( (angka &lt; 11) &amp;&amp; (angka &gt; 9) ); // true\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Operator OR</h4>\r\n\r\n<p>Operator <b>OR </b>yang ditulis dengan tanda dua pipe <code>(||) </code>akan menghasilkan nilai <b>TRUE </b>jika salah satu atau kedua nilai yang dibandingkan adalah <strong>TRUE</strong>. Jika kedua nilai yang dibandingkan <b>FALSE</b>, maka hasilnya adalah <strong>FALSE</strong>.</p>\r\n\r\n<p>Jika dijabarkan sebuah rumus,maka yang akan terlihat adalah seperti di bawah ini.</p>\r\n\r\n<ul>\r\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">OR </span><span style="color:#2ecc71">TRUE </span></strong>hasilnya <span style="color:#2ecc71"><strong>TRUE</strong></span></li>\r\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">OR </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <strong><span style="color:#2ecc71">TRUE</span></strong></li>\r\n	<li><strong><span style="color:#e74c3c;">FALSE </span><span style="color:#9b59b6">OR </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator OR ( || )&lt;/h3&gt;\r\n  &lt;h1&gt;Jika angka = 15 &lt;/h1&gt;\r\n  &lt;h3&gt;exp 1 : apakah angka lebih kecil dari 20 ? &lt;button onclick="jalankan1()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;exp 2 : apakah angka lebih besar dari 16 ? &lt;button onclick="jalankan2()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;Logika : apakah exp1 TRUE OR exp2 TRUE ? &lt;button onclick="jalankan3()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  \r\n&lt;script&gt;\r\n  var angka = 15;\r\n  function jalankan1(){\r\n    alert(angka &lt; 20); // true\r\n  }\r\n  function jalankan2(){\r\n    alert(angka &gt; 16); // false\r\n  }\r\n  function jalankan3(){\r\n    alert( (angka &lt; 20) || (angka &gt; 16) ); // true\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Operator Negasi</h4>\r\n\r\n<p>Operator negasi atau bisa juga disebut <strong>NOT</strong>, ditandai dengan <code>(!) </code>yang ditulis di depan sebuah ekspresi. Operator ini digunakan untuk membalik nilai logika. Jika ditulis sebuah ekspresi bernilai <strong>TRUE </strong>maka jika ditambahkan tanda ! di depan ekspesi tersebut maka nilainya dibalik menjadi <strong>FALSE </strong>dan begitu juga sebaliknya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator Negasi ( ! )&lt;/h3&gt;\r\n  &lt;h1&gt;Jika angka = 5 &lt;/h1&gt;\r\n  &lt;h3&gt;exp 1 : apakah angka lebih kecil dari 10 ? &lt;button onclick="jalankan1()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;exp 2 : apakah angka lebih kecil dari 10 ? &lt;button onclick="jalankan2()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  \r\n&lt;script&gt;\r\n  var angka = 5;\r\n  function jalankan1(){\r\n    alert( (angka &lt; 10) ); // true\r\n  }\r\n  function jalankan2(){\r\n    alert( !(angka &lt; 10) ); // nilai sebenarnya true dibalik menjadi false\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Operator String</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam penggabungan dua string atau lebih kita juga bisa menggunakan tanda plus <code>(+)</code>. Tanda yang sama seperti pada operator aritmatika, namun di sini yang membedakan adalah operand yang dioperasikan dengan tanda plus ini.</p>\r\n\r\n<p>Jika operand yang digunakan adalah angka maka operator ini berfungsi sebagai operator penjumlahan (operator aritmatika), dan jika operand yang digunakan salah satu atau keduanya adalah string maka operator ini berfungsi sebagai operator penggabungan string (operator string).</p>\r\n\r\n<p>Yang perlu diperhatikan di sini tentang penggunaan tanda ini sebagai operator aritmatika atau sebagai operator string, tergantung cara kita menempatkan urutan operand dari kiri ke kanan.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator string&lt;/h3&gt;\r\n  &lt;h3&gt;jika x = 10 kemudian y = 10 dan z = "10" lalu str = "angkanya adalah"&lt;/h3&gt;\r\n  &lt;button onclick="jalankan1()"&gt;&lt;h3&gt;operasi x + y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan2()"&gt;&lt;h3&gt;operasi z + x + y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan3()"&gt;&lt;h3&gt;operasi x + y + z &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="jalankan4()"&gt;&lt;h3&gt;operasi str + spasi + z &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = 10, // angka\r\n      y = 10, // angka\r\n      z = "10", // string\r\n      str = "angkanya adalah"; // string\r\n  function jalankan1(){\r\n    alert(x + y); // hasilnya 20 (angka)\r\n  }\r\n  function jalankan2(){\r\n    alert(z + x + y); // hasilnya 101010 (string)\r\n  }\r\n  function jalankan3(){\r\n    alert(x + y + z); // hasilnya 2010 (string)\r\n  }\r\n  function jalankan4(){\r\n    alert(str + '' '' + z); // hasilnya string\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Operator Kondisi</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dari sekian banyak operator yang sudah dijelaskan di atas, semuanya merupakan operator yang jenisnya binary atau operator yang membuatuhkan dua buah operand atau lebih. Selanjutnya yaitu tentang pembahasan operator ternary berupa operator <strong>kondisional</strong>. Hal ini akan memiliki kemiripan dengan struktur dari kondisional <code>if else</code>.</p>\r\n\r\n<p>Struktur penulisan dari operator kondisional ini adalah sebagai berikut.</p>\r\n\r\n<p style="text-align: center;"><strong><span style="color:#3498db;">(kondisi) </span><span style="color:#9b59b6;">? </span>&quot;<span style="color:#2ecc71;">BENAR</span>&quot; <span style="color:#9b59b6;">: </span>&quot;<span style="color:#e74c3c;">SALAH</span>&quot;</strong></p>\r\n\r\n<p>Jika kodisi ekspresi bernilai TRUE maka statement akan menjalankan ekspresi yang berada setelah tanda tanya <code>(?) </code>dan sebaliknya, jika kondisi bernilai FALSE maka statement tersebut akan menjalankan ekspresi yang berada setelah tanda titik dua <code>(:)</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator ternary kondisional&lt;/h3&gt;\r\n  &lt;h1&gt;Jika angka1 = 8 dan angka2 = 9&lt;/h1&gt;\r\n  &lt;h3&gt;kondisi 1 : termasuk genap atau ganjil kah angka1 ? &lt;button onclick="jalankan1()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;kondisi 2 : termasuk genap atau ganjil kah angka2 ? &lt;button onclick="jalankan2()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  \r\n&lt;script&gt;\r\n  var angka1 = 8;\r\n  var angka2 = 9;\r\n  var hasil;\r\n  function jalankan1(){\r\n    hasil = (angka1 % 2 == 0) ? "genap" : "ganjil";\r\n    alert(hasil);\r\n  }\r\n  function jalankan2(){\r\n    hasil = (angka2 % 2 == 0) ? "genap" : "ganjil";\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Operator typeof</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Yang terakhir yaitu operator <code>typeof </code>atau yang termasuk di dalam jenis operator unary. Operator ini biasanya digunakan untuk mengetahui tipe data dari sebuah operand. Cara penulisannya adalah dengan menggunakan keyword <code>typeof(data) </code>dan akan menghasilkan nilai berupa tipe data dari operand yang dituliskan di dalam tanda kurung.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;penggunaan operator unary typeof&lt;/h3&gt;\r\n  &lt;h1&gt;data1 = 8 dan data2 = "9" kemudian data3 = true &lt;/h1&gt;\r\n  &lt;h3&gt;tipe data dari data1 adalah ? &lt;button onclick="jalankan1()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;tipe data dari data2 adalah ? &lt;button onclick="jalankan2()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;tipe data dari data3 adalah ? &lt;button onclick="jalankan3()"&gt; jalankan &lt;/button&gt;&lt;/h3&gt;\r\n  \r\n&lt;script&gt;\r\n  var data1 = 8,\r\n      data2 = "9",\r\n      data3 = true;\r\n  \r\n  function jalankan1(){\r\n    alert(typeof(data1));\r\n  }\r\n  function jalankan2(){\r\n    alert(typeof(data2));\r\n  }\r\n  function jalankan3(){\r\n    alert(typeof(data3));\r\n  }    \r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Untuk penggunaan keyword typeof ini bisa digunakan tanpa menggunakan tanda kurung. Seperti <code>typeof x </code>berarti sama dengan <code>typeof(x)</code></p>\r\n</div>\r\n', '1845', 0, 1554171121, 1573796714);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(40, 'j4zvz5b', '3', 'j1', 12, 'JS Function', 'Memahami Function di JavaScript', 'memahami-function-di-javascript', 1, '<p>Pada setiap contoh pada masing-masing materi sebelumnya, kita mungkin telah familiar terhadap kode dengan keyword <code style="color: #c7254e">function</code> ini. Namun, untuk yang belum tahu apa sebenarnya maksud dari kode tersebut, pada materi ini kita akan membahasnya lebih detail tentang bagaimana membuatnya, bagaimana cara menggunakannya, dan bagaimana mengetahui perilakunya.</p>\r\n\r\n<h3>Definisi Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penjelasan tentang function ini mungkin akan cukup rumit untuk dipahami bagi pemula yang baru belajar pemrograman, akan tetapi jika kita sudah mengerti konsep dasarnya, maka kode JavaScript yang kita buat akan jauh lebih powerfull jika dibandingkan dengan menulis kode tanpa menggunakan function.</p>\r\n\r\n<p>Definisi dari function ini bisa kita bagi menjadi beberapa, di antaranya adalah :</p>\r\n\r\n<ul>\r\n	<li>sebuah sub-program (program yang ada di dalam prgram) yang dapat dipanggil (invoke) atau digunakan pada bagian lain dari program.</li>\r\n	<li>merupakan struktur dasar pembentuk JavaScript</li>\r\n	<li>merupakan kumpulan statement untuk melakukan tugas tertentu</li>\r\n	<li>harus dibuat dulu barulah dapat dipanggil atau digunakan</li>\r\n</ul>\r\n\r\n<p>Contoh sederhana dari sebuah function jika kita perhatikan pada materi-materi sebelumnya, kebanyakan contoh kode ditulis di dalam function, yang tujuan dibuatnya function tersebut adalah untuk menyisipkan sebuah perintah program ke dalam sebuah event (event tombol diklik). Namun sebenarnya akan jauh lebih kompleks lagi penggunaannya untuk membuat kode JavaScript kita menjadi sangat powerfull dan elegan.</p>\r\n\r\n<ul>\r\n</ul>\r\n</div>\r\n\r\n<h3>Manfaat Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dengan menggunakan function, kita akan terbantu di dalam banyak hal sehingga akan memudahkan kita untuk menulis dan memahami atau bahkan me-<em>maintenace</em> kode program kita.</p>\r\n\r\n<p>Jika dijabarkan ke dalam beberapa poin maka kelebihan menggunakan function ini adalah :</p>\r\n\r\n<h4>1. DRY (Don&#39;t Repeat Yourself)</h4>\r\n\r\n<p>Maksud dari DRY ini adalah kita disarankan agar dalam menulis kode program, tidak melakukan pengulangan penulisan yang sebenarnya sudah kita tulis sebelumnya untuk menghasilkan nilai dari sebuah konsep yang sama. Hal itu berguna untuk menyederhanakan kode program agar lebih efektif dan bisa menghemat penggunaan memory dari perangkat komputer.</p>\r\n\r\n<h4>2. Abstraksi</h4>\r\n\r\n<p>Dengan menggunakan function, kita bisa membuat kode program yang awal mulanya sangat rumit untuk dipahami, bahkan untuk kita sendiri yang menulisnya menjadi sebuah kode program yang lebih kelihatan mudah dipahami. Hal ini yang dimaksud dengan abstraksi, atau membuat sesuatu yang tadinya sulit menjadi &quot;seolah-olah&quot; lebih mudah.</p>\r\n\r\n<h4>3. Modularitas</h4>\r\n\r\n<p>Keunggulan yang terakhir dalam menggunakan function adalah modularitas, atau membagi bagian-bagian kode untuk dikelompokkan berdasarkan fungsi tertentu atau berdasarkan tingkat kegunaan kode program tersebut menjadi bagian-bagian yang lebih kecil. Hal ini juga akan berguna saat kita mengalami kejadian error pada baris program, maka kita akan bisa langsung melakukan perbaikan terhadap bagian-bagian kode yang sudah dibagi tadi tanpa harus memeriksa satu per satu baris program.</p>\r\n</div>\r\n\r\n<h3>Kategori Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam konsep function, terdapat dua pembagian kategori berdasarkan pembuatannya yaitu <strong>built-in</strong> function dan <strong>user-defined</strong> function.</p>\r\n\r\n<h4>Built-in Function</h4>\r\n\r\n<p>Built-in function atau bisa diartikan sebagai function yang sudah disediakan atau dibuatkan oleh JavaScript untuk tinggal kita gunakan.</p>\r\n\r\n<p>Contoh beberapa function ini beberapa di antaranya ada yang sudah kita praktekkan dalam materi-materi sebelumnya seperti <code>alert()</code>, <code>prompt()</code>, atau <code>confirm()</code>. Function tersebut sebenarnya sudah tersedia atau sudah dibuatkan oleh JavaScript dan yang kita lakukan hanyalah memanggil nama functionnya saja untuk menggunakannya. Seperti jika kita memanggil function <code>alert()</code> yang digunakan untuk menampilkan pop-up box notifikasi pada web browser.</p>\r\n\r\n<p>Masih ada banyak lagi function JavaScript misalkan yang berhubungan dengan string seperti <code>chartAt()</code>, <code>slice()</code>, <code>split()</code>, <code>toLowerCase()</code> dll. Semua built-in function ini selalu mengacu pada setiap tipe data dalam JavaScript. Misalkan untuk <code>pop()</code> hanya khusus untuk data array, atau <code>toFixed()</code> untuk data number.</p>\r\n\r\n<h4>User-Defined Function</h4>\r\n\r\n<p>Sedangkan User-Defined function adalah function yang kita buat sendiri untuk digunakan di dalam program JavaScript kita. Dalam pembahasan ini, nantinya kita akan lebih cenderung untuk membahas tentang kategori ini agar bisa diimplementasikan terhadap kebutuhan program apa yang akan kita buat.</p>\r\n\r\n<ul>\r\n</ul>\r\n</div>\r\n\r\n<h3>Struktur Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk membuat User-Defined function, kita perlu mengetahui beberapa aturan yang harus ditulis dengan benar agar function dapat digunakan dan menghasilkan nilai yang diharapkan.</p>\r\n\r\n<pre>\r\n<code>// STRUKTUR FUNCTION\r\n\r\nfunction identifier (a) \r\n\r\n{ // awal dari kode blok function\r\n\r\n\r\n  // kode blok program dari function yang akan dieksekusi\r\n  \r\n  \r\n  // mengakhiri function dengan keyword return\r\n  return;\r\n\r\n} // akhir dari kode blok function</code></pre>\r\n\r\n<h4>Keyword function</h4>\r\n\r\n<p>Setiap function yang akan dibuat harus menggunakan keyword <code style="color: #c7254e">function</code> saat melakukan proses deklarasi.</p>\r\n\r\n<h4>Identifier</h4>\r\n\r\n<p>Setiap function sebaiknya menggunakan nama atau identifier yang relevan terhadap kode blok yang ada di dalamnya. Aturan pemberian nama identifier ini sama persis dengan aturan penulisan nama variable dan lebih disarankan menggunakan kaidah penulisan <strong>camel-case</strong>.</p>\r\n\r\n<h4>Tanda kurung</h4>\r\n\r\n<p>Penulisan tanda kurung <code style="color: #c7254e">()</code> setelah identifier atau setelah keyword <code style="color: #c7254e">function</code> harus dituliskan, meskipun di dalamnya tidak terdapat parameter.</p>\r\n\r\n<h4>Parameter</h4>\r\n\r\n<p>Function bisa diberikan beberapa parameter dan parameter ini harus ditempatkan di dalam tanda kurung. Jika parameternya lebih dari satu, maka antar parameter harus dipisahkan dengan tanda koma, contohnya <code style="color: #c7254e">function(a,b,c)</code>. </p>\r\n\r\n<h4>Body function</h4>\r\n\r\n<p>Sebuah function akan berisi beberapa baris kode yang akan dijalankan ketika function dipanggil. Blok kode ini yang disebut sebagai body function dan penulisannya harus diletakkan di dalam tanda kurung kurawal buka <code style="color: #c7254e">({)</code> dan diakhiri dengan kurung kurawal tutup <code style="color: #c7254e">(})</code></p>\r\n\r\n<h4>Keyword return</h4>\r\n\r\n<p>Setiap function biasanya akan mengembalikan nilai tertentu sesuai kebutuhan. Untuk itu, jika function telah mencapai batas akhir dari kode blok gunakan keyword <code style="color: #c7254e">return</code> kemudian diikuti dengan nilai yang dikembalikan.</p>\r\n\r\n<p>Pada kasus function tertentu, keyword ini juga berfungsi untuk menghentikan eksekusi dari blok function, sehingga kode apapun yang berada di baris bawahnya tidak akan dieksekusi lagi.</p>\r\n</div>\r\n\r\n<h3>Invocation Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebanyak apapun baris kode program yang ditulis di dalam sebuah body dari function, tidak lantas akan dieksekusi langsung tanpa dipanggil atau dijalankan. Istilah pemanggilan function ini biasa disebut dengan <strong>invoke</strong>.</p>\r\n\r\n<p>Beberapa cara yang bisa dilakukan untuk menjalankan sebuah function adalah :</p>\r\n\r\n<h4>Invoke dengan event handler</h4>\r\n\r\n<p>Kita bisa memanggil atau menjalankan function dengan bantuan atribut HTML berupa event handler seperti <code style="color: #c7254e">onclick</code>, <code style="color: #c7254e">onload</code>, <code style="color: #c7254e">onmouseenter</code> dsb.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Invoke function dengan event handler&lt;/h3&gt;\r\n  &lt;h3&gt;Bukalah console DevTools untuk melihat hasilnya.&lt;/h3&gt;\r\n  &lt;button onclick="test()"&gt;&lt;h3&gt;jalankan function&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function test() {\r\n    var str = ''Invoke function dengan event handler'';\r\n    return console.log(str);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Invoke pada kode JavaScript langsung</h4>\r\n\r\n<p>Function yang telah dibuat bisa langsung dijalankan di dalam kode program dengan menuliskan nama functionnya diikuti dengan tanda kurung <code style="color: #c7254e">()</code>. Tanda kurung ini berarti kita akan menjalankan function tersebut dan jika kita tidak menuliskan tanda kurung ini maka JavaScript akan mengembalikan nilai berupa object. Ingatlah bahwa function juga merupakan type data di dalam JavaScript dan di dalam JavaScript hampir semua yang ada adalah object.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Invoke function pada script langsung&lt;/h3&gt;\r\n  &lt;h3&gt;Bukalah console DevTools untuk melihat hasilnya.&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  function jumlah(a,b) {\r\n    var hasil = a + b;\r\n    return hasil;\r\n  }\r\n  var x = jumlah(2,5);\r\n  console.log(x);\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Self Invoke</h4>\r\n\r\n<p>Khusus untuk metode pemanggilan function self-invoke ini hanya bisa digunakan pada function expression atau function yang tidak memiliki identifier atau <strong>anonymous function</strong>. Tujuannya adalah agar function dijalankan langsung dengan proses pendeklarasian function tersebut.</p>\r\n\r\n<p>Dalam pembahasan materi JavaScript Dasar, kita tidak akan menggunakan metode ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Self-Invoke function&lt;/h3&gt;\r\n  &lt;h3 id="str"&gt;&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  (function() {\r\n    var x = ''kalimat ini berasal dari function'';\r\n    document.getElementById(''str'').innerHTML = x;\r\n  })();\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Function Declaration</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Yang dimaksud dengan function declaration adalah function yang harus didefinisikan atau dideklarasikan dengan identifier. Kemudian untuk memanggilnya dengan cara menuliskan identifier yang diikuti tanda <code style="color: #c7254e">()</code>.</p>\r\n\r\n<p>Syntax penulisan function ini adalah sebagai berikut.</p>\r\n\r\n<pre>\r\n<code>// FUNCTION DECLARATION\r\n\r\nfunction identifier(parameter) { // parameter bersifat optional\r\n  \r\n  // blok kode yang ada di dalam body function\r\n  // berisi kode yang akan dieksekusi\r\n  \r\n  // nilai yang dikembalikan\r\n  return; // return bersifat optional\r\n}\r\n</code>\r\n</pre>\r\n\r\n<p>Sebagai contoh, kita akan menuliskan function declaration seperti pada beberapa contoh pada materi-materi sebelumnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Function declaration&lt;/h3&gt;\r\n  &lt;button onclick="jumlahAngka(3,5)"&gt;&lt;h3&gt;3 + 5 = ?&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  // deklarasi function dengan dua parameter yaitu a dan b\r\n  function jumlahAngka(a,b){\r\n    var hasil = a + b;\r\n    return alert(''hasilnya adalah '' + hasil);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Jika kita perhatikan pada contoh di atas, pemanggilan function yang disisipkan di dalam event onclick pada elemen button, berada di atas baris kode yang mendefinisikan sebuah deklarasi function itu sendiri.</p>\r\n\r\n<p>Hal itu bisa dilakukan di dalam penggunaan function declaration ini karena di dalam JavaScript ada yang disebut dengan konsep <strong>Hoisting</strong>. Kita bisa fleksibel meletakkan deklarasi function ataupun pemanggilan function dengan tidak mempedulikan urutan penulisannya. Namun hal ini tidak akan berlaku pada pada function expession dimana kita harus membuat functionnya sebelum memanggil nama function itu.</p>\r\n\r\n<p>Penggunaan function jenis ini akan lebih mudah dipahami, setidaknya bagi para pemula yang baru belajar programing.</p>\r\n</div>\r\n\r\n<h3>Function Expression</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Function ini merupakan function dalam tingkatan lanjutan dari function declaration. Pembahasan lebih detailnya tidak akan kita bahas di sini, namun untuk sekedar pengetahuan, syntax penulisan function ini memiliki beberapa perbedaan penulisan meskipun nilai atau hasilnya tetap akan sama dengan function declaration.</p>\r\n\r\n<p>Berikut ini adalah syntax penulisan dari function expression.</p>\r\n\r\n<pre>\r\n<code>// FUNCTION EXPRESSION\r\n\r\n// expression    // expression\r\nvar identifier = function(parameter) {\r\n  \r\n  // blok kode yang ada di dalam body function\r\n  // berisi kode yang akan dieksekusi\r\n  \r\n  // nilai yang dikembalikan\r\n  return;\r\n}\r\n</code></pre>\r\n\r\n<p>Terlihat bahwa, identifier atau nama function itu dibalik urutannya menjadi sebuah nama variable sebagai wadah dari function, kemudian function dideklarasikan tanpa menggunakan nama.</p>\r\n\r\n<p>Kelebihan dari function expression ini adalah lebih powerfull tapi lebih dikhususkan jika kita sudah memahami betul konsep utama dari function. Function ini nantinya akan lebih berguna jika sudah pada tahap lanjutan dalam pembelajaran JavaScript.</p>\r\n\r\n<p>Contoh penggunaan function expression.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  // deklarasi function expression\r\n  var jumlahAngka = function(a,b) {\r\n    return a + b;\r\n  }\r\n  \r\n  // pemanggilan function\r\n  alert(''hasilnya '' + jumlahAngka(1,2));\r\n&lt;/script&gt;</code></pre>\r\n\r\n<div class="note">Tidak seperti pada function declaration yang bisa fleksibel melakukan pemanggilan function dimanapun dalam baris kode, function expression harus dideklarasikan terlebih dahulu sebelum kita melakukan pemanggilan function. </div>\r\n</div>\r\n', '1460', 0, 1554171121, 1573840536),
(41, 'jiipolr', '3', 'j1', 13, 'JS Function - Parameter', 'Function Parameter dan Argument', 'function-parameter-dan-argument', 1, '<p>Jika kita belajar tentang function (user-defined function) dalam berbagai macam bahasa program terutama dalam JavaScript, tentunya akan selalu berkaitan dengan istilah <strong>parameter</strong> dan <strong>argument</strong>. Keduanya merupakan bahan baku utama untuk diolah dalam sebuah function dan akan selalu berhubungan satu sama lain.</p>\r\n\r\n<h3>Definisi</h3>\r\n\r\n<div class="wrapper-content">\r\n<p><strong>Parameter</strong> adalah sebuah variabel yang ditulis di dalam tanda kurung setelah nama function dideklarasikan. Parameter digunakan untuk menampung nilai yang nantinya akan dikirimkan saat function dipanggil.</p>\r\n\r\n<p>Sedangkan yang dimaksud dengan <strong>argument</strong> adalah nilai yang dikirimkan ke variable parameter saat proses pemanggilan function.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  function jumlahAngka(a,b) { // a dan b disebut dengan parameter\r\n    return a + b;\r\n  }\r\n  \r\n  // pemanggilan function\r\n  var x = jumlahAngka(4,5); // angka 4 dan 5 disebut dengan argument\r\n  alert(''hasil penjumlahan variable a + b adalah '' + x);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>Karakter <code>a</code> dan <code>b</code> yang berada di dalam tanda kurung setelah nama function tersebut adalah yang dinamakan dengan parameter. Kemudian angka <code>4</code> dan <code>5</code> adalah argument yang akan diolah di dalam function itu, yang dalam hal ini akan dijumlahkan dang menghasilkan angka 9.</p>\r\n\r\n<p>Nilai yang dimasukkan sebagai argument bisa fleksibel sesuai dengan kebutuhan kita. Kita bisa memasukkan sebuah nilai tetap seperti contoh di atas, ataupun nama variable yang nilainya berupa input dari user, bahkan function lain pun bisa dimasukkan sebagai argument.</p>\r\n\r\n<p>Perhatikan contoh yang lebih kompleks di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  // deklarasi function dengan parameter a dan b\r\n  function jumlahAngka(a,b) {\r\n    return a + b;\r\n  }\r\n  \r\n  // menangkap input user yang dimasukkan dalam dialog prompt\r\n  var a = parseInt(prompt(''Masukkan angka pertama :''));\r\n  var b = parseInt(prompt(''Masukkan angka kedua :''));\r\n  \r\n  // pemanggilan function dengan argument variable a dan b\r\n  // nilai argument a dan b mengacu pada variable BUKAN pada parameter lagi meski memiliki nama yang sama\r\n  var x = jumlahAngka(a,b);\r\n  alert(''hasilnya adalah : '' + x);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>Untuk memahami penggunaan nama parameter dan argument kita juga perlu hati-hati dalam membedakannya. Dari contoh di atas, penggunaan karakter <code>a</code> dan <code>b</code> pada parameter dan argument sepenuhnya berbeda. Argument akan mengacu pada nilai dari variable yang dideklarasikan yaitu berupa input user dalam dialog prompt.</p>\r\n</div>\r\n\r\n<h3>Parameter dan Argument</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dalam beberapa kasus tertentu penggunaan parameter beserta argumentnya bisa saja tidak sesuai. Tidak sesuai di sini yang dimaksud adalah, jika sebuah function memiliki 2 parameter sedangkan di dalam pemanggilan functionnya menggunakan 3 argument atau sebaliknya, maka apa yang akan terjadi ? Khusus untuk bahasa program JavaScript, perilaku parameter dan argument dari functionnya sendiri, kita tidak akan mendapati error karena kejanggalan dalam kasus seperti ini. Berbeda dengan bahasa program lain seperti PHP, yang mengharuskan jumlah parameter dan argumentnya harus sesuai.</p>\r\n\r\n<p>Di dalam JavaScript, jika jumlah parameter lebih <em>sedikit</em> dari argument, maka argument yang berlebihan itu akan diabaikan. Perhatikan contoh di bawah ini, bahwa nilai angka 3 akan diabaikan dan tidak akan dilakukan operasi penjumlahan dengan angka 1 dan 2 karena function penjumlahan tersebut hanya menerima 2 parameter saja yaitu a = 1, dan b = 2.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  // deklarasi function dengan parameter a dan b\r\n  function penjumlahan(a,b) {\r\n    return a + b;\r\n  }\r\n  \r\n  // pemanggilan function dengan argument dengan nilai 1, 2, dan 3\r\n  var x = penjumlahan(1,2,3);\r\n  alert(''hasilnya adalah : '' + x);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>Sedangkan jika jumlah parameternya lebih <em>banyak</em> dari argument, maka parameter yang berlebihan secara default akan diisi dengan nilai <code>undefinied</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  // deklarasi function dengan parameter a, b, dan c\r\n  function penjumlahan(a,b,c) {\r\n    return a + b;\r\n  }\r\n  \r\n  // pemanggilan function dengan argument dengan nilai 1 dan 2\r\n  var x = penjumlahan(1,2);\r\n  alert(''hasilnya adalah : '' + x);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Keyword Arguments</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dalam penjelasan di atas, ada istilah argument, namun di JavaScript ada lagi keyword yang hampir mirip yaitu <code>arguments</code> atau yang berarti sekumpulan argument. Keyword ini berfungsi sebagai variable yang dibuat langsung oleh JavaScript untuk menampung semua argument yang dimasukkan ke dalam function. Tipe dari variable ini adalah array.</p>\r\n\r\n<p>Pada saat kita memanggil sebuah function dengan beberapa argument di dalamnya, hal yang terjadi adalah nilai-nilai argument itu dikirimkan ke parameter. Namun yang sebenarnya terjadi tidak hanya itu saja. Nilai-nilai dari argument itu secara default akan dikirimkan juga ke dalam variable arguments ini. Variable ini juga disebut sebagai <em>pseudo variable</em> atau variable semu yang berarti variable itu kelihatan tidak ada padahal sebenarnya ada dan berbentuk array.</p>\r\n\r\n<p>Untuk mengetahui bahwa variable ini ada, perhatikan contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Variable Arguments&lt;/h3&gt;\r\n  &lt;h3&gt;Bukalah console DevTools untuk melihat hasilnya.&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  // deklarasi function tanpa parameter dan akan menghasilkan nilai arguments \r\n  function percobaan() {\r\n    return arguments;\r\n  }\r\n  \r\n  // pemanggilan function dengan 4 argument dengan tipe data yang berbeda\r\n  var x = percobaan(1,2,"halo",false);\r\n  \r\n  console.log(x);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Manfaat Arguments</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Hal yang merepotkan dalam membuat function bekerja tepat sesuai dengan keinginan kita adalah kita harus menentukan jumlah parameter agar sesuai dengan jumlah argument yang akan dioperasikan.</p>\r\n\r\n<p>Misalkan kita membuat function dengan parameter hanya 3 saja, sedangkan kita menginginkan ada 5 argument yang akan dimasukkan di dalamnya. Tentunya kita harus mengubah atau menambahkan parameter pada function tersebut agar sesuai dengan banyaknya argument.</p>\r\n\r\n<p>Dalam hal ini, kita bisa memanfaatkan keyword arguments untuk menangani hal ini. Pada arguments ini, yang nilainya berupa data array, setiap masing-masing nilai akan memiliki nomor indeks sesuai urutannya dari kiri ke kanan. Nomor indeks dari data array inilah nantinya yang akan digunakan untuk menangani permasalahan ini dengan cara melakukan <em>loop</em> atau pengulangan.</p>\r\n\r\n<p>Perhatikan contohnya di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  // deklarasi function tanpa parameter\r\n  function penjumlahan() {\r\n    var x = 0;\r\n    \r\n    // proses looping\r\n    for( var i = 0; i &lt; arguments.length; i++){\r\n      x += arguments[i];\r\n    }\r\n    return x;\r\n  }\r\n  \r\n  // pemanggilan function dengan beberapa argument yang jumlahnya sesuai keinginan kita \r\n  var x = penjumlahan(1,2,4);\r\n  \r\n  // menampilkan nilai di dalam box alert\r\n  alert(''hasilnya adalah : '' + x);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n', '908', 0, 1554171121, 1573841562),
(42, 'jgdqepm', '3', 'j1', 14, 'JS Function - Scope', 'Jangkauan Variable JavaScript', 'jangkauan-variable-javascript', 1, '<p>Materi scope variable ini mungkin akan cukup membingungkan jika kita belum mengetahui konsep JavaScript lainnya yaitu tentang function. Untuk itu, jika belum paham mengenai function, silahkan pelajari terlebih dahulu materi tentang <a href="http://localhost/helloworld/lesson/javascript/memahami-function-di-javascript" target="_blank">function</a>.</p>\r\n\r\n<h3>Jenis Scope</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Scope Variable adalah lingkup dimana sebuah variable dapat diakses di dalam program.</p>\r\n\r\n<p>Sebelum memahami lebih lanjut tentang variable scope, kita perlu mengetahui jenis-jenis scope yang ada pada bahasa program. Di dalam bahasa program terdapat dua jenis scope yaitu <strong>block scope</strong> dan <strong>function scope</strong> yang setiap masing-masing bahasa program akan menerapkan salah satu diantara kedua jenis tersebut.</p>\r\n\r\n<p>Satu scope kode ini umumnya akan ditandai dengan ditulisnya tanda kurung kurawal buka <code>({)</code> dan diakhiri dengan kurung kurawal tutup <code>(})</code></p>\r\n\r\n<h4>Block scope</h4>\r\n\r\n<p>Bahasa program yang menerapkan konsep block scope ini memiliki aturan bahwa setiap variable hanya akan bisa diakses di dalam suatu blok kode tertentu saja.</p>\r\n\r\n<pre>\r\n<code>// KONSEP BLOCK SCOPE\r\nvar_pertama = 2; // deklarasi sebuah variable\r\n\r\nif(var_pertama &lt; 5) \r\n{ // awal dari blok kode\r\n\r\n  var_kedua = true; // deklarasi variable lainnnya\r\n\r\n} // akhir dari blok kode\r\n\r\nalert(var_kedua); // akan menghasilkan error (var_kedua tidak dikenali)</code></pre>\r\n\r\n<p>Jika kita perhatikan pada kode program di atas, var_kedua hanya akan bisa diakses di dalam tanda block kode. Saat kita ingin menggunakan var_kedua di luar dari block kode, maka akan menghasilkan error. Error yang dimaksud pada kode program tersebut adalah var_kedua tidak dikenali atau dianggap tidak pernah ada.</p>\r\n\r\n<p>Beberapa bahasa program yang menggunakan konsep block scope ini adalah bahasa C dan bahasa C++.</p>\r\n\r\n<h4>Function scope</h4>\r\n\r\n<p>Sedangkan pada function scope, sebuah variable hanya akan bisa diakses di dalam blok function tersebut. Maka, saat kita mencoba untuk mengakses variable yang ada di dalam function akan mendapatkan error bahwa variable tidak dikenali.</p>\r\n\r\n<pre>\r\n<code>// KONSEP FUNCTION SCOPE\r\nfunction test() \r\n{ // awal dari blok function\r\n\r\n  var_kedua = true; // deklarasi variable\r\n\r\n} // akhir dari blok function\r\n\r\ntest(); // menjalankan function\r\n\r\nalert(var_kedua); // akan menghasilkan error (var_kedua tidak dikenali) </code></pre>\r\n\r\n<p>JavaScript sendiri menggunakan aturan konsep function scope sehingga jika contoh pertama dijalankan pada bahasa program JavaScript maka kode akan berjalan tanpa error.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  var var_pertama = 2;\r\n  if(var_pertama &lt; 5) {\r\n    var var_kedua = true;\r\n  }\r\n  alert(var_kedua);  \r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>Sedangkan jika kode tersebut diterapkan pada function JavaScript, maka akan terjadi error :</p>\r\n\r\n<p><code>Uncaught ReferenceError: var_lain is not defined</code></p>\r\n\r\n<p>Bukalah console pada DevTools <kbd>F12</kbd> browser untuk melihat errornya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;script&gt;\r\n  function test() { \r\n    var var_lain = true; // deklarasi variable\r\n  }\r\n  \r\n  test(); // menjalankan function\r\n  \r\n  alert(var_lain); // mengakses var_lain di luar function\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>Pada kasus di atas, variable var_lain disebut sebagai local variable.</p>\r\n</div>\r\n\r\n<h3>Local Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebuah variable bisa disebut sebagai local variable karena proses deklarasi dari variable tersebut ditulis di dalam function tertentu. Variable hanya akan bisa diakses di dalam blok function itu saja, selain dari itu, variable tidak akan dikenali.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Local Variable&lt;/h3&gt;\r\n  &lt;h3&gt;Deklarasi variable nama = ''local'' di dalam function&lt;/h3&gt;\r\n  &lt;h3&gt;isi dari variable nama adalah &lt;span id="hasil1"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;type data dari variable nama adalah &lt;span id="hasil2"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  // mengakses variable di sini akan menghasilkan undefined\r\n  // document.getElementById(''hasil'').innerHTML = nama; // nama is not defined\r\n\r\n  function test() { \r\n    var nama = ''local'';\r\n    // mencetak variable nama di dalam function\r\n    document.getElementById(''hasil1'').innerHTML = nama;\r\n  }\r\n  \r\n  test(); // menjalankan function\r\n  \r\n  // mengakses variable di sini akan menghasilkan undefined\r\n  document.getElementById(''hasil2'').innerHTML = typeof nama; // nama is not defined\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<p></p>\r\n\r\n<h3>Global Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Lain halnya jika kita mendeklarasikan sebuah variable di luar function, variable tersebut akan disebut sebagai global variable. Global variable bisa diakses dimana pun baik itu di dalam atau di luar function.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Global Variable&lt;/h3&gt;\r\n  &lt;h3&gt;Deklarasi variable nama = ''global'' di luar function&lt;/h3&gt;\r\n  &lt;h3&gt;isi dari variable nama adalah &lt;span id="hasil1"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;type dari variable nama adalah &lt;span id="hasil2"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  var nama = ''global'';\r\n\r\n  function test() { \r\n    // mencetak variable nama di dalam function\r\n    document.getElementById(''hasil1'').innerHTML = nama;\r\n  }\r\n  \r\n  test(); // menjalankan function\r\n  \r\n  // mencetak type data dari variable nama di luar function\r\n  document.getElementById(''hasil2'').innerHTML = typeof nama;\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Variable global ini juga biasa disebut sebagai window scope atau variable yang berada di dalam object window secara langsung.</p>\r\n\r\n<pre>\r\n<code>var a = 10;\r\n\r\n// penulisan seperti ini\r\nconsole.log(a);\r\n\r\n// sama halnya jika kita mengaksesnya dengan\r\nconsole.log(window.a);</code></pre>\r\n</div>\r\n\r\n<h3>Otomatis Global</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Dalam sebuah kasus dimana kita dengan sengaja menulis variable tanpa keyword var, baik itu di dalam ataupun di luar function, maka secara otomatis variable tersebut akan dianggap sebagai global variable yang bisa diakses dimana pun.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Otomatis Global Variable&lt;/h3&gt;\r\n  &lt;h3&gt;Asign variable nama = ''auto global'' di dalam function tanpa keyword var&lt;/h3&gt;\r\n  &lt;h3&gt;isi dari variable nama adalah &lt;span id="hasil1"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n  &lt;h3&gt;type dari variable nama adalah &lt;span id="hasil2"&gt;&lt;/span&gt;&lt;/h3&gt;\r\n\r\n&lt;script&gt;\r\n  function test() { \r\n    nama = ''auto global'';\r\n    // mencetak variable nama di dalam function\r\n    document.getElementById(''hasil1'').innerHTML = nama;\r\n  }\r\n  \r\n  test();\r\n  \r\n  // mencetak type data dari variable nama di luar function\r\n  document.getElementById(''hasil2'').innerHTML = typeof nama;\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Dibalik layar, JavaScript akan membuatkan kita sebuah deklarasi variable global sebelum kita menetapkan nilai (assign) ke dalam variable tersebut.</p>\r\n\r\n<pre>\r\n<code>var nama; // kode yang dibuat secara otomatis\r\n\r\n// kode disini bisa menggunakan variable nama\r\n\r\nfunction test() { \r\n  nama = ''auto global'';\r\n  // kode disini bisa menggunakan variable nama\r\n}\r\n\r\n// kode disini juga bisa menggunakan variable nama</code></pre>\r\n</div>\r\n\r\n<h3>Deklarasi Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada kasus lainnya, ada kemungkinan kita akan menuliskan variable dengan nama yang sama dengan nilai yang berbeda. Akan tetapi jika variable ini berbeda scope, maka JavaScript akan membedakan keduanya sehingga nilainya tidak akan menimpa satu sama lain meskipun nama variablenya sama. .</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Variable dengan nama yang sama tapi berbeda scope&lt;/h3&gt;\r\n  &lt;h3&gt;Terdapat dua deklarasi variable :&lt;/h3&gt;\r\n  &lt;h4&gt;Global variable, contoh = ''variable di luar function''&lt;/h4&gt;\r\n  &lt;h4&gt;Local variable, contoh = ''variable di dalam function''&lt;/h4&gt;\r\n\r\n&lt;script&gt;\r\n  var contoh = ''variable di luar function''; // deklarasi global\r\n  \r\n  function test() { \r\n    var contoh = ''variable di dalam function''; // deklarasi local\r\n    // variable contoh akan mengacu pada deklarasi local\r\n    alert(contoh); \r\n  }\r\n  \r\n  test();\r\n  \r\n  // variable contoh akan mengacu pada deklarasi global\r\n  alert(contoh);\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Lifetime Variable</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam JavaScript, ada yang disebut sebagai Lifetime Variable yang artinya masa berlaku dari sebuah variable.</p>\r\n\r\n<p>Dalam prakteknya, saat kita mendeklarasikan sebuah variable dan menjalankan kode program tersebut pada web browser, nama variable beserta nilainya (jika ada) akan disimpan ke dalam memori komputer.</p>\r\n\r\n<p>Untuk masa berlaku bagi Local variable, hanya akan tersedia saat function dijalankan saja. Setelah function selesai dijalankan, semua variable di dalamnya akan dihapus dari memori. Hal itulah yang menyebabkan akses variable di luar function terhadap local variable akan mendapati error karena variable yang dimaksud sudah tidak tersedia lagi.</p>\r\n\r\n<pre>\r\n<code>function test(){\r\n  var nama = ''local''; // deklarasi &amp; inisialisasi\r\n  // browser akan menyimpan informasi tentang variable nama \r\n}\r\n\r\n// jalankan function sekaligus hapus variable nama dari memori\r\ntest(); \r\n</code></pre>\r\n\r\n<p>Sedangkan untuk masa berlaku Global variable adalah sejak mulai dibukanya tab browser sampai dimuat ulang atau ditutupnya sebuah window browser.</p>\r\n\r\n<pre>\r\n<code>var nama = ''global''; // deklarasi &amp; inisialisasi\r\n// browser akan menyimpan variable nama beserta nilainya\r\n// selama window atau tab browser tidak ditutup\r\n// variable nama tetap bisa digunakan </code></pre>\r\n</div>\r\n\r\n<div class="note">Konsep tentang scope variable ini sangat penting untuk dipahami saat kita sudah benar-benar membuat kode program yang di dalamnya terdiri dari bermacam-macam function dan kemungkinan menggunakan nama variable yang sama. Memahami konsep ini akan mencegah sebuah variable menimpa variable lainnya.</div>\r\n', '1133', 0, 1554171121, 1573835267),
(43, 'jtoncur', '3', 'j1', 7, 'JS Data Type', 'Tipe Data di JavaScript', 'tipe-data-di-javascript', 1, '<p>Untuk memahami tipe data dalam bahasa program yang dalam hal ini adalah JavaScript, kita perlu mengetahui apa sebenarnya istilah &quot;<strong>data</strong>&quot; pada sebuah komputer. Setelah mengetahui apa itu data, maka kita akan menjabarkannya lagi menjadi jenis data atau tipe dari data itu.</p>\r\n\r\n<h3>Definisi Data</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam sebuah komputer, jika kita teliti lebih dalam, maka yang ada hanyalah apa yang disebut dengan &quot;DATA&quot;. Data ini tersimpan di dalam memory komputer dalam hal ini ada di dalam RAM dan CPU sebagai unit pemroses data. Kita bisa memodifikasi, menambah atau menghapus data-data yang ada di dalamnya.</p>\r\n\r\n<p>Semua data tadi tersimpan dalam rangkaian <em>bit</em>. Apa itu bit ? <strong>Bit </strong>atau bisa disebut <strong>binary digit </strong>/ bilangan biner adalah satuan terkecil yang ada di dalam komputer yang nilainya hanya ada <code>1 </code>dan <code>0</code>. Angka 1 merepresentasikan bahwa sebuah hardware itu dialiri dengan listrik sedangkan 0, tidak dialiri listrik. Hal ini mirip dengan instalasi lampu di rumah kita, 1 bisa kita anggap sebgai lampu menyala dan 0 sebagai lampu padam.</p>\r\n\r\n<p>Lalu bagaimana cara komputer merepresentasikan sebuah data? Jika kita mengenal angka bulat seperti angka 23 (dua puluh tiga), maka di dalam bilangan biner angka tersebut akan menjadi 10111. Bagaimana hal itu bisa terjadi?</p>\r\n\r\n<p>Seperti teori matematika pada bilangan desimal yaitu adanya satuan, puluhan, ribuan dst. Pada angka 23, angka 2 mewakili nilai puluhan sedangkan angka 3 mewakili satuan.</p>\r\n\r\n<p style="text-align: center;"><img alt="desimal" class="img-responsive" src="http://localhost/helloworld/assets/img/desimal.png" style="width: 400px; height: 134px;" title="bilangan desimal" /></p>\r\n\r\n<p>Hal yang sama terjadi pada bilangan biner di komputer, namun yang membedakan adalah nilai yang dipakai, yaitu angka 1, 2, 4, 8, 16, 32, 64 dst.</p>\r\n\r\n<p style="text-align: center;"><img alt="biner" class="img-responsive" src="http://localhost/helloworld/assets/img/biner.png" style="width: 437px; height: 131px;" title="bilangan biner" /></p>\r\n\r\n<p>Sekarang bisa kita bayangkan pada sebuah komputer yang memiliki kapasitas memori yang mencapai satuan <em>Terabit</em>. Akan lebih banyak bit yang bisa kita modifikasi. Agar bisa bekerja dengan bit sebanyak itu tanpa bingung, komputer akan menggunakan bit-bit tersebut untuk membagi ke dalam potongan yang disebut dengan value. Meski potongan tersebut tersusun dari bit, tetapi bisa saja memiliki peran yang berbeda. Dan peran inilah yang nantinya kita sebut dengan <strong>TIPE DATA</strong>.</p>\r\n\r\n<p>Sedikit rumit memang untuk kita sebagai awam memahami bagaimana komputer ini bekerja dengan bilangan biner atau bisa disebut bahasa mesin, tetapi itulah teori sebenarnya dipakai oleh komputer untuk menerjemahkan bahasa kita agar dimengerti dan diolah oleh komputer sebagai benda mati buatan manusia yang diberikan bekal untuk berpikir dengan caranya sendiri. Kita bisa coba bermain konversi bilangan atau text apa saja untuk diterjemahkan dalam bilangan biner di situs <a href="https://www.convertworld.com/" target="_blank">https://www.convertworld.com</a>.</p>\r\n</div>\r\n\r\n<p>Di dalam bahasa program JavaScript terdapat 6 tipe data, yaitu :</p>\r\n\r\n<ul>\r\n	<li>Number</li>\r\n	<li>String</li>\r\n	<li>Boolean</li>\r\n	<li>Object</li>\r\n	<li>Function</li>\r\n	<li>Undefined</li>\r\n</ul>\r\n\r\n<p>Keenam tipe data ini adalah peran yang ada di dalam sebuah komputer. Untuk menggunakannya kita cukup hanya menuliskan nilainya. Seperti halnya jika kita ingin membuat angka 10, -5, atau 3.14, maka kita cukup menuliskan angkanya saja dan secara otomatis, komputer akan memberikan label bahwa yang dimasukkan ini adalah bertipe data number. Begitu juga apabila kita ingin memasukkan sebuah text, maka kita cukup menuliskannya di antara tanda kutip, dan komputer akan memberikan label data itu dengan tipe data string.</p>\r\n\r\n<p>Untuk bisa mengetahui tipe data dari setiap variable yang ada, kita bisa menggunakan keyword <code>typeof</code>.</p>\r\n\r\n<h3>Tipe Data Number</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tipe data number adalah tipe data yang berisi nilai angka baik itu angka bulat atau angka pecahan desimal maupun angka nengatif.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data number&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;typeof x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;typeof y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;typeof z&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = 35,\r\n      y = 3.14,\r\n      z = -10;\r\n  function cek1(){\r\n    alert(typeof x);\r\n  }\r\n  function cek2(){\r\n    alert(typeof y);\r\n  }\r\n  function cek3(){\r\n    alert(typeof z);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tipe Data String</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tipe data string atau bisa disebuat juga sebagai text yaitu tipe data yang nilainya berisi kumpulan karakter yang membentuk sebuah text. String ini harus ditulis di dalam tanda kutip double <code>(&quot; &quot;) </code>atau bisa juga tanda kutip singgle <code>(&#39; &#39;)</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data string&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;typeof x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;typeof y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;typeof z&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = ''Hello World'',\r\n      y = ''5'',\r\n      z = 10 + ''10'';\r\n  function cek1(){\r\n    alert(typeof x);\r\n  }\r\n  function cek2(){\r\n    alert(typeof y);\r\n  }\r\n  function cek3(){\r\n    alert(typeof z);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tipe Data Boolean</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tipe data boolean adalah tipe data yang isinya hanya berupa kondisi yang diwakili dengan <b>true </b>untuk kondisi benar dan <strong>false </strong>untuk kondisi salah.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data boolean&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;typeof x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;typeof y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;nilai dan typeof z&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = true,\r\n      y = false,\r\n      z = 1 &lt; 2; // ekspresi 1 lebih kecil dari 2\r\n  function cek1(){\r\n    alert(typeof x);\r\n  }\r\n  function cek2(){\r\n    alert(typeof y);\r\n  }\r\n  function cek3(){\r\n    alert(''nilai dari z adalah ''+ z + '' dan bertipe data '' + typeof z);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Tipe Data Object</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam JavaScript, terdapat data yang diberi nama <code>object </code>dan <code>array</code>. Keduanya berfungsi untuk menampung nilai, sama seperti variable pada umumnya, namun untuk object dan array ini bisa menampung beberapa nilai sekaligus.</p>\r\n\r\n<p>Cara penulisan data object harus ditulis di dalam tanda kurung kurawal <code>{ } </code>yang antar nilainya dipisahkan dengan tanda koma, sedangkan untuk array, penulisannya yaitu di dalam tanda kurung siku <code>[ ]</code>.</p>\r\n\r\n<p>Array di dalam JavaScript termasuk ke dalam tipe data object, tidak seperti bahasa lainnya yang mengelompokkan array sebagai tipe data sendiri. Array di JavaScript memiliki metode yang berbeda dari object.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;object&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;typeof dari object orang&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;isi dari object orang&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;hr&gt;\r\n  &lt;h3&gt;array&lt;/h3&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;typeof dari array angka&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek4()"&gt;&lt;h3&gt;isi dari array angka&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;hr&gt;\r\n  &lt;h1 id="demo"&gt;&lt;/h1&gt;\r\n\r\n&lt;script&gt;\r\n  var orang = { nama: ''John'', umur: 28 }; // object\r\n  var angka = [''satu'',''dua'',''tiga'',''empat'']; // array\r\n  var cetak = document.getElementById(''demo'');\r\n  function cek1(){\r\n    alert(typeof orang);\r\n  }\r\n  function cek2(){\r\n    cetak.innerHTML = orang.nama +'' ''+ orang.umur;\r\n  }\r\n  function cek3(){\r\n    alert(typeof angka);\r\n  }\r\n  function cek4(){\r\n    cetak.innerHTML = angka;\r\n  }    \r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Penjelasan lebih detail tentang object dan array akan kita bahas pada materi terpisah lainnya.</p>\r\n</div>\r\n\r\n<h3>Tipe Data Function</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Beberapa contoh dalam setiap materi JavaScript ini rata-rata menggunakan function. Function atau fungsi digunakan untuk mengelompokkan bagian-bagian kode sesuai fungsi yang dikehendaki. Jika function ini dimasukkan di dalam sebuah variable, maka tipe data dari variable tersebut adalah tipe data <code>function</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data function&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai dan tipe dari x&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = function(){\r\n    console.log(x);\r\n  };\r\n  function cek1(){\r\n    alert(''nilai dari x adalah '' + x);\r\n    alert(''tipenya adalah '' + typeof x);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Penjelasan tentang materi function ini akan sangat kompleks dan luas sekali jika dibahas dalam satu bab saja, maka dari itu materi function akan kita berikan penjelasan pada materi terpisah lainnya.</p>\r\n</div>\r\n\r\n<h3>Tipe Data Undefined</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tipe data undefined adalah sebuah tipe data dalam JavaScript yang nilainya secara default akan diberikan oleh JavaScript sendiri.</p>\r\n\r\n<p>Hal ini terjadi saat kita mendeklarasikan sebuah variable tanpa mengisikan nilainya, maka JavaScript akan secara otomatis memberikan nilai pada variable itu dengan nilai <code>undefined</code>, begitu pula dengan tipe datanya juga akan bertipe <code>undefined</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data undefined&lt;/h3&gt;\r\n  \r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai dan type dari x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;nilai dan type dari y&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;nilai dan type dari z&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = ''Hello World'',\r\n      y = 5,\r\n      z;\r\n  function cek1(){\r\n    alert(''nilai dari x adalah '' + x + '' yang tipenya adalah '' + typeof x);\r\n  }\r\n  function cek2(){\r\n    alert(''nilai dari y adalah '' + y + '' yang tipenya adalah '' + typeof y);\r\n  }\r\n  function cek3(){\r\n    alert(''nilai dari z adalah '' + z + '' dan tipenya juga '' + typeof z);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Kondisi seperti ini akan sering kita jumpai jika kita telah memahami tentang variable scope, atau function dimana pendeklarasian dan proses assignment terhadap sebuah variable harus dilakukan dengan teliti.</p>\r\n\r\n<h4>Nilai String Kosong</h4>\r\n\r\n<p>Hal berbeda jika kita mendeklarasikan variable kemudian mengisikan sebuah nilai meski nilainya berupa string kosong, variable yang tadinya bertipe undefined akan berubah menjadi string.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data undefined menjadi string&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai dan type dari x&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x; // type data undefined\r\n  x = ''''; // type data berubah menjadi string\r\n  function cek1(){\r\n    alert(''nilai dari x adalah '' + x + '', yang tipenya adalah '' + typeof x);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Nilai null</h4>\r\n\r\n<p>Di dalam JavaScript nilai <code>null </code>berarti penetapan nilai yang &quot;<strong>tidak ada</strong>&quot;. Meski nilainya agak mirip dengan undefined yaitu sama-sama &quot;<strong>tidak ada</strong>&quot; , namun keduanya merupakan dua tipe data yang berbeda. null bertipe object sedangkan undefined merupakan tipe data sendiri.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;tipe data undefined dan nilai null&lt;/h3&gt;  \r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai dan type dari x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;nilai dan type dari y&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = undefined; // type data undefined\r\n  var y = null; // type data object\r\n  function cek1(){\r\n    alert(''nilai dari x adalah '' + x + '', yang tipenya adalah '' + typeof x);\r\n  }\r\n  function cek2(){\r\n    alert(''nilai dari y adalah '' + y + '', yang tipenya adalah '' + typeof y);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '1359', 0, 1554171121, 1573740707);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(44, 'jxdq2tn', '3', 'j1', 10, 'JS Data Type - String', 'Tipe Data String pada JavaScript', 'tipe-data-string-pada-javascript', 1, '<p>Tipe data string adalah sebuah nilai yang berisi kumpulan karakter yang membentuk sebuah text. Tipe data ini digunakan untuk merepresentasikan data yang bersifat tekstual atau plain text.</p>\r\n\r\n<h3>Penulisan String</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Aturan utama penulisan data string ini adalah harus selalu ditulis di dalam tanda kutip ganda <code>(&quot; &quot;) </code>ataupun di dalam tanda kutip tunggal <code>(&#39; &#39;)</code>. Setelah itu kita bisa menuliskan text atau bahkan juga angka di dalamnya.</p>\r\n\r\n<p>Pemilihan tanda kutip ganda atau tunggal ini bebas, namun yang perlu diperhatikan adalah jika kita ingin menampilkan karakter tanda kutip itu sendiri di dalam string, maka kita harus memperhatikan penulisannya agar data bisa ditampilkan sesuai yang diharapkan.</p>\r\n\r\n<p>Jika di dalam string terdapat karakter tanda kutip tunggal maka sebaiknya string diapit dengan tanda kutip ganda. Begitupun jika di dalam string terdapat karakter tanda kutip ganda maka string sebaiknya diapit tanda kutip tunggal.</p>\r\n\r\n<p>Perhatikan contoh penulisan string berikut ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Penulisan string dengan tanda kutip&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;\r\n    &lt;h3&gt;isi variable x, y dan z&lt;/h3&gt;\r\n  &lt;/button&gt; \r\n\r\n&lt;script&gt;\r\n  var x = "Saya sedang belajar JavaScript";\r\n  // string yang terdapat tanda kutip tunggal\r\n  var y = "Apakah sekarang adalah hari Jum''at ?";\r\n  // string yang terdapat tanda kutip ganda\r\n  var z = ''Saya sedang belajar "JavaScript" di sebuah website'';\r\n  function cek(){\r\n    alert(x);\r\n    alert(y);\r\n    alert(z);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Special Character</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Karena di dalam bahasa program terdapat karakter-karakter yang dugunakan sebagai syntax aturan penulisan kode, maka kita harus benar-benar memperhatikan penggunaan beberapa karakter-karakter khusus ini.</p>\r\n\r\n<p>Jika kita ingin menuliskan kedua tanda kutip baik kutip ganda dan kutip tunggal dalam sebuah string, sedangkan tanda kutip tunggalnya telah digunakan untuk membungkus string tersebut seperti pada contoh string di bawah ini.</p>\r\n\r\n<p>Contoh penulisan seperti ini akan menghasilkan error yang secara otomatis, JavaScript akan berhenti mengeksekusi kode yang ditulis pada baris selanjutnya.</p>\r\n\r\n<pre>\r\n<code>''Pada hari Jum''at kemarin, saya belajar "JavaScript" di sebuah website''</code></pre>\r\n\r\n<p>Untuk kasus seperti itu, hal yang perlu kita lakukan adalah meng-<em>escape character</em>. <strong>Escape character </strong>adalah cara yang digunakan untuk menampilkan sebuah karakter yang akan diartikan berbeda pada bahasa program. Tanda kutip dalam JavaScript digunakan untuk menandai sebuah nilai itu adalah data string. Sedangkan untuk menampilkan string tanda kutip itu sendiri, kita perlu menambahkan tanda backslash <code>(\\) </code>sebelum tanda kutip yang ingin ditampilkan sebagai string.</p>\r\n\r\n<p>Sehingga cara penulisan string yang tepat untuk menghindari error JavaScript adalah seperti di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Penulisan string dengan escape karakter&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;\r\n    &lt;h3&gt;isi variable x&lt;/h3&gt;\r\n  &lt;/button&gt; \r\n\r\n&lt;script&gt;\r\n  var x = ''Pada hari Jum\\''at kemarin, saya belajar "JavaScript" di sebuah website'';\r\n  function cek(){\r\n    alert(x);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Beberapa karakter yang bisa diartikan lain oleh JavaScript sebagai escape character adalah sebagai berikut :</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-striped table-bordered" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">escape character</th>\r\n			<th scope="col">hasil output</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\0</code></td>\r\n			<td>karakter <code>NULL</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\&quot;</code></td>\r\n			<td>karakter kutip ganda <code>&quot;</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\&#39;</code></td>\r\n			<td>karakter kutip tunggal <code>&#39;</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\\\</code></td>\r\n			<td>karakter backslash <code>\\</code></td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\n</code></td>\r\n			<td>karakter baris baru</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\t</code></td>\r\n			<td>karakter tab</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\b</code></td>\r\n			<td>backspace</td>\r\n		</tr>\r\n		<tr>\r\n			<td style="text-align: center;"><code>\\uXXX</code></td>\r\n			<td>karakter <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters" target="_blank">unicode</a> (simbol unik)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n</div>\r\n\r\n<h3>Property Length</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Property length di dalam string digunakan untuk menghitung panjang karakter pada sebuah string. Penghitungan ini termasuk menghitung katakter spasi (<em>whitespace</em>).</p>\r\n\r\n<p>Perhatikan contoh penggunaannya di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Property length pada string&lt;/h3&gt;\r\n  &lt;h3&gt;Jika x = "Saya sedang belajar"&lt;/h3&gt;\r\n  &lt;button onclick="hitung()"&gt;\r\n    &lt;h3&gt;Panjang karakter dari variable x adalah ?&lt;/h3&gt;\r\n  &lt;/button&gt; \r\n\r\n&lt;script&gt;\r\n  var x = "Saya sedang belajar";\r\n  function hitung(){\r\n    var hasil = x.length;\r\n    alert(hasil + '' karakter'');\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '493', 0, 1554171121, 1573740612),
(45, 'j5gyei7', '3', 'j1', 11, 'JS Method String', 'Fungsi Method pada Tipe Data String', 'fungsi-method-pada-tipe-data-string', 1, '<p>Di dalam data string terdapat banyak sekali method yang bisa dipakai untuk berbagai macam keperluan dalam mengolah data seperti mencari karakter tertentu dalam string, ataupun menghapus spasi di awal dan akhir dari sebuah string.</p>\r\n\r\n<h4>Mencari bagian string di dalam string</h4>\r\n\r\n<p>Untuk keperluan ini method yang bisa digunakan ialah <code>indexOf()</code>, <code>lastIndexOf()</code>, <code>search()</code> dan <code>charAt()</code></p>\r\n\r\n<h3>Method indexOf</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>indexOf()</code> biasa digunakan untuk mencari letak index karakter yang spesifik dalam sebuah string. Method ini akan memulai pencarian karakter yang dimulai dari karakter awal dari sebuah string dan akan mengembalikan nilai berupa angka index tempat karakter yang dicari itu ditemukan.</p>\r\n\r\n<p>Parameter yang dibutuhkan berupa karakter yang akan dicari.</p>\r\n\r\n<pre class="line-numbers">\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string indexOf&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;letak huruf "W" dari awal string&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek(){\r\n    // parameter huruf "W" yang akan dicari\r\n    hasil = text.indexOf("W");\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method lastIndexOf</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>lastIndexOf()</code> juga digunakan untuk mencari letak index karakter yang spesifik dalam sebuah string. Berbeda dengan indexOf, <code>lastIndexOf()</code> akan memulai pencarian karakter yang dimulai dari karakter paling akhir dari sebuah string dan akan mengembalikan nilai berupa angka index tempat karakter yang dicari itu ditemukan.</p>\r\n\r\n<p>Parameter yang dibutuhkan berupa karakter yang akan dicari.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string lastIndexOf&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;letak huruf "W" dari akhir string&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek(){\r\n    // parameter huruf "W" yang akan dicari\r\n    hasil = text.lastIndexOf("W");\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Penghitungan angka index selalu dimulai dari angka 0 dan karakter spasi (whitespace) termasuk dalam hitungan satu karakter. method <code>indexOf()</code> akan mengembalikan nilai -1 apabila karakter yang dicari tidak ditemukan.</div>\r\n\r\n<h3>Method search</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>search()</code> hampir sama dengan method indexOf yaitu mengembalikan angka index lokasi sebuah karakter atau text di dalam sebuah string. Perbedaannya adalah dengan method search, kita bisa memasukkan <strong>regular expression</strong> sebagai parameternya.</p>\r\n\r\n<p><strong>Regular Expression</strong> adalah sekumpulan karakter yang membentuk frase dan terdiri dari beberapa karakter khusus yang bisa diartikan berbeda dengan tujuan untuk menemukan karakter atau text sesuai pola frase yang dikehendaki.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string search&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;letak karakter "l"&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;letak karakter "L"&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek1(){\r\n  // regular expression dengan flag i untuk mencari karakter huruf "l"\r\n  // tanpa mempedulikan caseSensitif\r\n    hasil = text.search(/l/i);\r\n    alert(hasil);\r\n  }\r\n  function cek2(){\r\n  // regular expression tanpa flag i untuk mencari karakter "L" \r\n    hasil = text.search(/L/);\r\n    alert(hasil); // hasilnya -1 atau tidak ditemukan\r\n  }  \r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method charAt</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>charAt()</code> merupakan kebalikan dari indeOf. Kita bisa mencari karakter apa yang terletak pada index tertentu.</p>\r\n\r\n<p>Parameter yang dibutuhkan berupa angka index yang akan dicari.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string charAt&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;karakter pada index ke-1&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek(){\r\n    // parameter posisi index ke-1\r\n    hasil = text.charAt(1);\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method toLowerCase</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>toLowerCase()</code> berfungsi untuk mengkonversi string menjadi format huruf kecil.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string toLowerCase&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello WorLd WhoOA"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;ubah ke lowercase&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello WorLd WhoOA";\r\n  var hasil;\r\n  function cek(){\r\n    hasil = text.toLowerCase();\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Method toUpperCase</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kebalikan dari toLowerCase yaitu method <code>toUpperCase()</code> berfungsi untuk mengkonversi string menjadi format huruf besar/kapital.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string toUpperCase&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello WorLd WhoOA"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;ubah ke UPPERCASE&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello WorLd WhoOA";\r\n  var hasil;\r\n  function cek(){\r\n    hasil = text.toUpperCase();\r\n    alert(hasil);\r\n  }  \r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Method concat</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>concat()</code> berfungsi untuk menggabungkan dua atau lebih string.</p>\r\n\r\n<p>Parameternya diisi dengan string yang akan digabungkan dan memisahkannya dengan tanda koma.</p>\r\n\r\n<p>Penggabungan dalam method ini sama persis penggunaannya dengan operator plus <code>(+)</code> pada string.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string concat&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text1 = "Hello" dan text2 = " World"&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;gabungkan dengan concat&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;gabungkan dengan operator +&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text1 = "Hello";\r\n  var text2 = " World";\r\n  var hasil;\r\n  function cek1(){\r\n    hasil = text1.concat(text2);\r\n    alert(hasil);\r\n  }\r\n  // sama halnya jika menggunakan operator +\r\n  function cek2(){\r\n    hasil = text1 + text2;\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method replace</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>replace()</code> digunakan untuk mengganti string dengan string lainnya.</p>\r\n\r\n<p>Parameter yang dibutuhkan :</p>\r\n\r\n<ul>\r\n	<li>parameter pertama diisi dengan string yang akan diganti</li>\r\n	<li>parameter kedua diisi dengan string pengganti.</li>\r\n</ul>\r\n\r\n<p>Penggunaan method <code>replace()</code> bisa memanfaatkan regular expression untuk menemukan semua string yang cocok dengan target pencarian yang akan diubah.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string replace&lt;/h3&gt;\r\n  &lt;h3 id="demo1"&gt;Belajar JavaScript itu membosankan&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;ubah kata membosankan&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;p id="demo2"&gt;\r\n  HTML adalah bahasa pemrograman tingkat tinggi dan dinamis.\r\n  HTML populer di internet dan dapat bekerja di sebagian besar penjelajah web populer \r\n  seperti Google Chrome, Internet Explorer, Mozilla Firefox, Netscape dan Opera. \r\n  Kode HTML dapat disisipkan dalam halaman web menggunakan tag SCRIPT\r\n  &lt;/p&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;ubah setiap kata HTML&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = document.getElementById(''demo1'').innerHTML;\r\n  var paragraf = document.getElementById(''demo2'').innerHTML;\r\n  var hasil;\r\n  function cek1(){\r\n    hasil = text.replace(''membosankan'',''menyenangkan'');\r\n    document.getElementById(''demo1'').innerHTML = hasil;\r\n  }\r\n  \r\n  function cek2(){\r\n    // modifier flag g pada regular expression untuk mencari semua kata yang cocok\r\n    hasil = paragraf.replace(/HTML/g, ''&lt;b&gt;&lt;u&gt;JavaScript&lt;/u&gt;&lt;/b&gt;'');\r\n    document.getElementById(''demo2'').innerHTML = hasil;\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Method trim</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>trim()</code> digunakan untuk menghilangkan karakter spasi (whitespace) di awal dan di akhir string. Penggunaannya biasa dipakai untuk form input login yang sensitif dengan tanda spasi awal dan akhir.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string trim&lt;/h3&gt;\r\n  &lt;pre&gt;\r\n    &lt;span id="demo" style="background: yellow;"&gt;  JavaScript adalah bahasa program yang dinamis  &lt;/span&gt;\r\n  &lt;/pre&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;hilangkan spasi awal dan akhir&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = document.getElementById(''demo'').innerHTML;\r\n  var hasil;\r\n  function cek(){\r\n    hasil = text.trim();\r\n    document.getElementById(''demo'').innerHTML = hasil;\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Mengekstrak bagian string ke dalam potongan</h4>\r\n\r\n<p>Untuk keperluan ini method yang bisa digunakan ialah <code>slice()</code>, <code>substring()</code>, dan <code>substr()</code></p>\r\n\r\n<h3>Method slice</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>slice()</code> digunakan untuk memotong bagian string dan mengembalikannya dalam bentuk string baru.</p>\r\n\r\n<p>Parameter yang dibutuhkan :</p>\r\n\r\n<ul>\r\n	<li>parameter pertama diisi dengan nomor index karakter awal pemotongan</li>\r\n	<li>parameter kedua diisi dengan nomor index akhir pemotongan.</li>\r\n</ul>\r\n\r\n<p>Jika kita memasukkan hanya satu parameter saja, maka yang dikembalikan adalah semua string dari awal pemotongan sampai akhir dari string.</p>\r\n\r\n<p>Jika kita memasukkan parameternya berupa angka negatif, maka penghitungan awal dan akhir pemotongan dihitung dari akhir string tersebut.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string slice&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;dapatkan kata "World"&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek(){\r\n    // slice untuk mendapatkan kata "World" yang berada pada index 6 sampai 11\r\n    hasil = text.slice(6,11);\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n</code></pre>\r\n\r\n<p>Untuk method <code>substring()</code> fungsinya sama persis dengan <code>slice()</code>, hanya yang membedakan adalah substring tidak bisa menerima parameter angka negatif.</p>\r\n</div>\r\n\r\n<h3>Method substr</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Fungsi dari method <code>substr()</code> sama dengan yang lain, yaitu untuk memotong bagian string. Perbedaannya hanya pada parameter kedua yang berupa <strong>length</strong> atau panjang karakter sejak dimulainya pemotongan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method string substr&lt;/h3&gt;\r\n  &lt;h3&gt;Jika text = "Hello World Whooa"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;substr kata "World"&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var text = "Hello World Whooa";\r\n  var hasil;\r\n  function cek(){\r\n    // substr inde ke-6 sampai 5 karakter untuk mendapatkan kata "World"\r\n    hasil = text.substr(6,5);\r\n    alert(hasil);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<p>Selain method-method yang dijelaskan di atas, masih ada banyak lagi method string. Untuk lebih lengkapnya silahkan kunjungi referensi link di bawah ini.</p>\r\n\r\n<ul>\r\n	<li class="reff"><a href="https://www.w3schools.com/jsref/jsref_obj_string.asp" target="_blank">w3schools.com/jsref/jsref_obj_string.asp</a></li>\r\n</ul>\r\n', '1099', 0, 1554171121, 1573705622),
(46, 'jc1y33q', '3', 'j1', 8, 'JS Data Type - Number', 'Tipe Data Number pada JavaScript', 'tipe-data-number-pada-javascript', 1, '<p>Ukuran angka yang bisa ditampung dan diproses oleh JavaScript bisa mencapai 64-bit atau 2<sup>64 </sup>atau 18 x 10<sup>18</sup>. Meski nilai ini terbilang sangat besar, kita tidak bisa menggunakan semua digit yang ada, karena di dalam 64-bit tadi, sebagian akan digunakan sebagai penanda untuk beberapa angka tertentu misalkan untuk tanda minus atau negatif.</p>\r\n\r\n<p>Berikut ini adalah nilai-nilai angka yang bisa ditampung oleh JavaScript untuk diolah.</p>\r\n\r\n<h3>Angka Bulat</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Meski dikatakan angka bulat atau angka yang tidak mengandung tambahan pecahan desimal seperti angka <strong>1</strong>, <strong>12</strong>, atau <strong>12000</strong>, namun sebenarnya yang terjadi di balik layar adalah angka bulat ini menyimpan angka lainnya di belakang koma setelah angka tersebut.</p>\r\n\r\n<p>Perlu diketahui bahwa di dalam JavaScript, tipe data number atau angka ini agak sedikit berbeda dengan kebanyakan bahasa lainnya. Di JavaScript tidak ada yang namanya bilangan bulat (<strong>integer</strong>) namun yang ada adalah bilangan pecahan (<strong>float</strong>).</p>\r\n\r\n<p>Nilai bilangan bulat pada JavaScript terbatas nilai akurasinya sampai 15 digit saja. Setelah lebih dari 15 digit, maka nilai float yang sebenarnya ada namun tidak ditampilkan tadi sudah cukup untuk membulatkan angka utamanya.</p>\r\n\r\n<p>Hal ini bisa dibuktikan jika kita menuliskan angka yang besarnya terdiri 16 digit atau lebih.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Angka bulat pada JavaScript&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;angka bulat 15 digit&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;angka bulat 16 digit&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var angka1 = 999999999999999; // 15 digit\r\n  var angka2 = 9999999999999999; // 16 digit\r\n  \r\n  function cek1(){\r\n    alert(angka1)\r\n  }\r\n  function cek2(){\r\n    alert(angka2)\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Angka Pecahan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Tipe data number juga bisa diisi angka pecahan atau angka yang memiliki nilai tambahan dibelakang koma.</p>\r\n\r\n<p>Untuk penulisan tanda koma pada angka, harus dituliskan dengan tanda titik <code>(.)</code>. Sedangkan untuk nilai angka yang berada di belakang koma hanya terbatas sampai 17 digit saja.</p>\r\n\r\n<pre>\r\n<code>var x = 3.14;\r\nvar y = 2.0123456;</code></pre>\r\n\r\n<p>Perlu diperhatikan pula apabila kita melakukan operasi matematika terhadap angka pecahan. Dalam mengolahnya, JavaScript terkadang menghasilkan akurasi yang tidak diharapkan. Hal itu terjadi karena float poin yang ada pada JavaScript ikut berperan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Akurasi penghitungan angka pecahan&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt; 0.3 + 0.7 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt; 0.1 + 0.2 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt; agar 0.1 + 0.2 = 0.3 &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function cek1(){\r\n    var xx = 0.3 + 0.7;\r\n    alert(''hasilnya adalah ''+ xx); \r\n    // hasilnya angka tanpa desimal yaitu 1\r\n  }\r\n  function cek2(){\r\n    var xx = 0.1 + 0.2;\r\n    alert(''hasilnya adalah '' + xx);\r\n    // hasilnya bukan 0.3 seperti yang diharapkan\r\n  }\r\n  function cek3(){\r\n    var xx = (0.2 * 10 + 0.1 * 10) / 10;\r\n    alert(''hasilnya adalah '' + xx);\r\n    // cara manual agar hasilnya sesuai harapan\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Ekponen Notation</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Eksponen Notation adalah tata cara penulisan angka yang memiliki nilai yang sangat besar ataupun nilai yang sangat kecil.</p>\r\n\r\n<p>Seperti contoh penulisan angka <strong>0 </strong>pada dalam angka <strong>1000000 </strong>bisa disingkat dengan menulis <strong>1e6</strong>, yang artinya setelah angka satu maka akan disisipkan angka 0 sebanyak 6 digit dan membentuk bilangan satu juta.</p>\r\n\r\n<p>Sedangkan untuk angka yang sangat kecil seperti <strong>0.000001 </strong>bisa disingkat menjadi <strong>1e-6</strong>, yang artinya angka tersebut memiliki nilai angka pecahan sebesar 6 digit di belakang tanda koma.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Eksponen Notation&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai angka1&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;nilai angka2&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var angka1 = 1e6; // angka bulat positif\r\n  var angka2 = 1e-6; // angka pecahan desimal 0.\r\n  \r\n  function cek1(){\r\n    alert(angka1)\r\n  }\r\n  function cek2(){\r\n    alert(angka2)\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Angka Negatif</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Selain angka positif, kita juga bisa memasukkan angka negatif seperti <strong>-1 </strong>atau <strong>-234 </strong>ke dalam JavaScript.</p>\r\n\r\n<p>Nilai ukuran maksimal dari tipe data number yang jumlahnya mencapai 64-bit sebagian akan digunakan sebagai penanda di sini, untuk menandai sebuah angka itu positif atau negatif sebesar 1-bit. Sedangkan 11-bit lainnya digunakan untuk penanda eksponen dan baru sisanya sebesar 52-bit ini lah yang bisa kita pakai secara utuh.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt; - 3 + 7 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function cek1(){\r\n    var xx = -3 + 7;\r\n    alert(''hasilnya adalah ''+ xx); \r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<p>Selain angka-angka di atas, JavaScript juga memiliki nilai angka yang spesial. Angka spesial ini adalah <code>Infinity</code>, <code>-Infinity </code>dan <code>NaN</code>. Nilai Infinity dan -Infinity serta NaN ini termasuk reserved word JavaScript yang masuk ke dalam tipe data number.</p>\r\n\r\n<h3>Infinity</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Infinity atau yang berarti tidak terbatas terbentuk jika hasil dari operasi matematika yang nilainya di luar batas maksimal yang bisa diolah oleh JavaScript.</p>\r\n\r\n<p>Seperti pada sebuah operasi bilangan positif dibagi dengan angka 0 akan menghasilkan nilai <code>Infinity</code>. Sedangkan sebuah nilai bisa menjadi <code>-Infinty </code>jika sebuah angka negatif dibagi dengan angka 0.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Angka Infinity dan -Infinity&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt; 2 / 0 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt; -2 / 0 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = 2 / 0;\r\n  var y = -2 / 0;\r\n  function cek1(){\r\n    alert(''hasilnya adalah ''+ x);\r\n  }\r\n  function cek2(){\r\n    alert(''hasilnya adalah '' + y);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>NaN</h3>\r\n\r\n<div class="wrapper-content">\r\n<p><code>NaN</code>atau (Not a Number) digunakan oleh JavaScript untuk menandai bahwa sebuah variable itu bertipe number atau bukan.</p>\r\n\r\n<p>Nilai NaN bisa dihasilkan jika angka <strong>0 </strong>dibagi dengan angka <strong>0</strong>, atau bisa juga dihasilkan dengan operasi antara tipe data string dan tipe data number.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;operasi yang menghasilkan NaN (Not a Number)&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt; 10 + "string" = ? &lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt; 0 / 0 = ? &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function cek1(){\r\n    var xx = 10 / "text"; // number dibagi string\r\n    alert(''hasilnya adalah ''+ xx);\r\n    alert(''tipe datanya adalah '' + typeof xx);\r\n  }\r\n  function cek2(){\r\n    var xx = 0 / 0; // number dibagi string angka\r\n    alert(''hasilnya adalah '' + xx);\r\n    alert(''tipe datanya adalah '' + typeof xx);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Method isNaN</h4>\r\n\r\n<p>Kita bisa menggunakan fungsi global JavaScript berupa <code>isNaN() </code>untuk mengecek suatu data itu berupa number atau bukan. Fungsi ini akan mengembalikan nilai boolean true atau false.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;menggunakan fungsi isNaN()&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt; apakah 100 / "string" = NaN ? &lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  function cek1(){\r\n    var str = 100 / "string";\r\n    alert(isNaN(str));\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '910', 0, 1554171121, 1573705200),
(47, 'jazgmwd', '3', 'j1', 9, 'JS Method Number', 'Fungsi Method pada Tipe Data Number', 'fungsi-method-pada-tipe-data-number', 1, '<p>Di dalam tipe data Number JavaScrpt, ada beberapa <strong>global function</strong> yang dapat digunakan untuk membatu mengolah data angka yang ingin diproses.Selain fungsi <code>isNan() </code>yang digunakan untuk mengecek sesuatu itu bertipe data number atau bukan, masih ada function lainnya yaitu <code>toFixed()</code>, <code>Number()</code>, <code>parseInt()</code>, dan beberapa object<strong> Math</strong> lainnya. Global function pada JavaScript ini sering juga disebut sebagai istilah <strong>method</strong>.</p>\r\n\r\n<h3>Method toFixed</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika kita memiliki angka dengan tambahan pecahan desimal yang terdiri dari beberapa digit di belakan koma, dengan method ini kita bisa menentukan menentukan berapa digit dibelakang koma.</p>\r\n\r\n<p>Berikut contoh penggunaannya untuk menentukan 2 angka di belakang tanda koma.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode toString&lt;/h3&gt;\r\n  &lt;h3&gt;Jika x = 12.3445346&lt;/h3&gt;\r\n  &lt;button onclick="ubah()"&gt;&lt;h3&gt;toFixed&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = 12.3445346;\r\n  var y;\r\n  function ubah(){\r\n    y = x.toFixed(2);\r\n    // angka 2 di dalam kurung menentukan jumlah nilai yang dikehendaki\r\n    alert(y);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method Number</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode ini digunakan untuk mengkonversi sebuah data untuk dipaksa menjadi bertipe data number. Jika sebuah data tidak bisa dipaksa untuk menjadi angka, maka akan mengembalikan nilai NaN.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Number&lt;/h3&gt;\r\n  &lt;h3&gt;Jika x = "12"&lt;/h3&gt;\r\n  &lt;button onclick="ubah1()"&gt;&lt;h3&gt;nilai dan tipe dari x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="ubah2()"&gt;&lt;h3&gt;konversi ke Number&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;hr&gt;\r\n  &lt;h3&gt;Jika text = "saya bukan angka 12"&lt;/h3&gt;\r\n  &lt;button onclick="ubah3()"&gt;&lt;h3&gt;konversi ke Number&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = "12";\r\n  var y;\r\n  var text = "saya bukan angka 12";\r\n  function ubah1(){\r\n    alert(x);\r\n    alert(''tipenya ''+ typeof x);\r\n  }\r\n  function ubah2(){\r\n    y = Number(x);\r\n    alert(y);\r\n    alert(''tipenya ''+ typeof y);\r\n  }\r\n  function ubah3(){\r\n    y = Number(text);\r\n    alert(y);\r\n    alert(''tipenya ''+ typeof y);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method parseInt</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Metode ini digunakan untuk mengkonversi angka yang tadinya berupa angka pecahan desimal, diubah menjadi integer atau angka bulat. Konversi yang dihasilkan yaitu menghapus nilai angka yang ada di belakang koma.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode parseInt&lt;/h3&gt;\r\n  &lt;h3&gt;Jika x = "12.9345"&lt;/h3&gt;\r\n  &lt;button onclick="ubah1()"&gt;&lt;h3&gt;nilai dan tipe dari x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="ubah2()"&gt;&lt;h3&gt;konversi parseInt&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var x = "12.9345";\r\n  var y;\r\n  function ubah1(){\r\n    alert(x);\r\n    alert(''tipenya ''+ typeof x);\r\n  }\r\n  function ubah2(){\r\n    y = parseInt(x);\r\n    alert(y);\r\n    alert(''tipenya ''+ typeof y);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<div class="note">Metode <code>Number()</code>, <code>parseInt()</code>, dan <code>parseFloat()</code> bukanlah method yang asli dimiliki tipe data number, namun ketiga ini adalah global function JavaScript yang berarti penggunaannya tidak harus selalu dikaitkan dengan tipe data number.</div>\r\n\r\n<p>Tipe data number pada JavaScript selain memiliki method seperti di atas, juga memiliki object berupa keyword <code>Math</code>. Dengan object ini kita bisa melakukan tugas matematika terhadap beberapa angka.</p>\r\n\r\n<h3>Math random</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Digunakan untuk mencetak angka secara acak, yang nilainya secara default berupa angka dibawah 1.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Math.random&lt;/h3&gt;\r\n  &lt;h3&gt;hasilkan angka acak dengan menekan tombol&lt;/h3&gt;\r\n  &lt;button onclick="ran()"&gt;&lt;h3 id="demo"&gt;random&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var acak;\r\n  var cetak = document.getElementById(''demo'');\r\n  function ran(){\r\n    acak = Math.random(); \r\n    cetak.innerHTML = acak;\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Math round</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Digunakan untuk membulatkan angka pecahan desimal ke angka bulat terdekat.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Math.round&lt;/h3&gt;\r\n  &lt;h3&gt;jika x = 34.3344 dan y = 34.8844&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;bulatkan nilai x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;bulatkan nilai y&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = 34.3344; // pecahan desimal 0.3344\r\n  var y = 34.8844; // pecahan desimal 0.8844\r\n  var z;\r\n  function cek1(){\r\n    z = Math.round(x);\r\n    alert(z)\r\n  }\r\n  function cek2(){\r\n    z = Math.round(y);\r\n    alert(z)\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Math ceil</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Digunakan untuk membulatkan angka pecahan desimal menjadi angka bulat terdekat yang lebih besar. Hal ini akan mengabaikan berapapun nilai angka yang ada di belakang koma.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Math.ceil&lt;/h3&gt;\r\n  &lt;h3&gt;jika x = 34.99 dan y = 34.01&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;bulatkan nilai x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;bulatkan nilai y&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = 34.99; // pecahan desimal 0.99\r\n  var y = 34.01; // pecahan desimal 0.1\r\n  var z;\r\n  function cek1(){\r\n    z = Math.ceil(x);\r\n    alert(z)\r\n  }\r\n  function cek2(){\r\n    z = Math.ceil(y);\r\n    alert(z)\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Math floor</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Digunakan untuk membulatkan angka pecahan desimal menjadi angka bulat terdekat yang lebih kecil. Hal ini akan mengabaikan berapapun nilai angka yang ada di belakang koma. Mirip seperti menghiangkan angka pecahan desimalnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Math.floor&lt;/h3&gt;\r\n  &lt;h3&gt;jika x = 34.99 dan y = 34.01&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;bulatkan nilai x&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;bulatkan nilai y&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = 34.99; // pecahan desimal 0.99\r\n  var y = 34.01; // pecahan desimal 0.1\r\n  var z;\r\n  function cek1(){\r\n    z = Math.floor(x);\r\n    alert(z)\r\n  }\r\n  function cek2(){\r\n    z = Math.floor(y);\r\n    alert(z)\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Math min max</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Digunakan untuk menentukan nilai terkecil dan nilai terbesar dari beberapa data angka.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;metode Math.min dan Math.max&lt;/h3&gt;\r\n  &lt;h3&gt;jika x = 34.0191 , y = 4.0001 dan z = 10&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;nilai terbesar&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;nilai terkecil&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var x = 34.0191;\r\n  var y = 4.0001;\r\n  var z = 10;\r\n  var cetak;\r\n  function cek1(){\r\n    cetak = Math.max(x,y,z);\r\n    alert(cetak);\r\n  }\r\n  function cek2(){\r\n    cetak = Math.min(x,y,z);\r\n    alert(cetak)\r\n  }\r\n&lt;/script&gt;  \r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<p class="reff">Referensi lebih lengkap tentang method number :</p>\r\n\r\n<ul>\r\n	<li class="reff"><a href="https://w3schools.com/jsref/jsref_obj_number.asp" target="_blank">w3schools.com/jsref/jsref_obj_number.asp</a> </li>\r\n	<li class="reff"><a href="https://www.w3schools.com/jsref/jsref_obj_math.asp" target="_blank">w3schools.com/jsref/jsref_obj_math.asp</a></li>\r\n</ul>\r\n', '713', 0, 1554171121, 1573705430),
(48, 'jopilbn', '3', 'j1', 15, 'JS Array', 'Array pada JavaScript', 'array-pada-javascript', 1, '<p>Di dalam setiap bahasa program, konsep array ini sering kali digunakan. Ada bahasa program yang menentukan bahwa array ini adalah sebuah tipe data dan ada juga yang menentukan bahwa array ini adalah berupa struktur data. Lalu apa sebenarnya definisi dari array itu sendiri? dan apakah array dalam JavaScript itu merupakan tipe data atau struktur data?</p>\r\n\r\n<h3>Definisi Array</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Menurut definisi array dari wikipedia, array adalah tipe data yang digunakan untuk mendeskripsikan kumpulan elemen (nilai atau variable) yang setiap elemnnya memiliki nomor index.</p>\r\n\r\n<p>Secara sederhana, array adalah sebuah variable yang dapat menampung banyak nilai sekaligus.</p>\r\n\r\n<p>Perhatikan contoh berikut ini.</p>\r\n\r\n<p>Jika pada variable biasa penulisan variable seperti ini.</p>\r\n\r\n<pre>\r\n<code>  var hewan;\r\n  hewan = "kelinci";\r\n  hewan = "koala";\r\n  hewan = "kucing";</code></pre>\r\n\r\n<p>Variable <strong>hewan</strong> pada script di atas tidak bisa menampung semua nilai yang ditugaskan untuk masuk ke dalamnya. Yang ada malah nilai terakhir yang ditugaskan untuk masuk ke dalam variable hewan yaitu kucing akan menimpa nilai variable sebelumnya.</p>\r\n\r\n<p>Maka nilai variablenya tidak boleh sama antar tiap nilai agar bisa mengakses satu per satu nilainya.</p>\r\n\r\n<pre>\r\n<code>  var hewan1, hewan2, hewan3;\r\n  hewan1 = "kelinci";\r\n  hewan2 = "koala";\r\n  hewan3 = "kucing";</code></pre>\r\n\r\n<p>Dan jika kita diharuskan menuliskan nama-nama hewan yang berkaki 4 sejumlah 50 nama, kita juga akan perlu lebih banyak nama variable untuk dideklarasikan. Tentu sangat tidak efisien.</p>\r\n</div>\r\n\r\n<h3>Membuat Array</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk membuat contoh di atas menjadi data yang berupa array kita bisa menulisnya menggunakan metode <strong>array literal</strong> dan juga menggunakan keyword <code style="color: #c7254e">new</code>.</p>\r\n\r\n<h4>Array Literal</h4>\r\n\r\n<p>Penulisan array dimasukkan ke dalam tanda kurung kotak <code>[ ]</code> yang masing-masing nilainya selalu dipisahkan dengan tanda koma.</p>\r\n\r\n<p>Tanda spasi dan baris baru atau enter tidak dipedulikan dalan penulisan array.</p>\r\n\r\n<pre>\r\n<code>var hewan = ["kelinci","koala","kucing"];\r\n\r\n// atau seperti ini\r\n\r\nvar hewan = [\r\n  "kelinci",\r\n  "koala",\r\n  "kucing"\r\n];</code></pre>\r\n\r\n<p>Tata cara penulisan dengan metode seperti inilah yang paling umum digunakan.</p>\r\n\r\n<h4>Keyword new</h4>\r\n\r\n<p>Penulisan array dengan metode keyword new adalah seperti di bawah ini.</p>\r\n\r\n<pre>\r\n<code>var hewan = new Array("kelinci","koala","kucing");</code></pre>\r\n\r\n<p>Kedua tata cara penulisan ini sama saja, namun untuk kemudahan dalam pembacaan kode, lebih disarankan untuk menggunakan metode array literal.</p>\r\n</div>\r\n\r\n<h3>Mengakses Array</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Setelah berhasil meringkas penulisan nilai dari variable menjadi bentuk array, sekarang bagaimana cara mengakses satu per satu nilainya?</p>\r\n\r\n<p>Untuk mengakses setiap nilai dalam aray, kita bisa memanfaatkan sifat dasar dari array, yaitu nomor index. Array sendiri merupakan variable yang berisi kumpulan pasangan antara <strong>key</strong> dan <strong>value</strong>.</p>\r\n\r\n<p>Key berupa nomor index yang berupa angka dan selalu dimulai dari angka 0. sedangkan value berupa nilai-nilai yang dimasukkan ke dalam variable. Sehingga secara otomatis Javascript akan mengenali isi dari array dengan format seperti di bawah ini.</p>\r\n\r\n<pre>\r\n<code>  var hewan = ["kelinci","koala","kucing"];\r\n  // variable hewan dengan index ke-0 = "kelinci"\r\n  // variable hewan dengan index ke-1 = "koala"\r\n  // variable hewan dengan index ke-2 = "kucing"</code></pre>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Mengakses nilai array&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Cetak isi variable hewan ke dalam alert&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;variable hewan index ke-2&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;looping variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek1(){\r\n    alert(hewan);\r\n  }\r\n  function cek2(){\r\n    alert(hewan[2]);\r\n  }\r\n  function cek3(){\r\n    for (var i = 0; i &lt; hewan.length; i++){\r\n      alert(hewan[i]);\r\n    }\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Karakteristik Array</h3>\r\n\r\n<div class="wrapper-content">\r\n<h4>Memiliki Property length</h4>\r\n\r\n<p>Property atau fungsi bawaan length digunakan untuk menghitung jumlah nilai/value/element di dalam sebuah array.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Property length pada array&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;hitung jumlah isi variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek(){\r\n    alert(hewan.length);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Multiple Value Data Type</h4>\r\n\r\n<p>Array bisa menampung nilai-nilai dengan tipe data yang berbeda.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Array dengan value dengan tipe yang berbeda&lt;/h3&gt;\r\n  &lt;h3&gt;Jika orang = ["John",25,true]&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;variable orang index ke-0&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;variable orang index ke-1&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek3()"&gt;&lt;h3&gt;variable orang index ke-2&lt;/h3&gt;&lt;/button&gt;\r\n  \r\n&lt;script&gt;\r\n  var orang = ["John",25,true];\r\n  function cek1(){\r\n    alert(orang[0]);\r\n    alert(''tipenya ''+ typeof orang[0]);\r\n  }\r\n  function cek2(){\r\n    alert(orang[1]);\r\n    alert(''tipenya ''+ typeof orang[1]);\r\n  }\r\n  function cek3(){\r\n    alert(orang[2]);\r\n    alert(''tipenya ''+ typeof orang[2]);\r\n  }  \r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Array JavaScript bertipe data Object</h4>\r\n\r\n<p>Tidak seperti bahasa program lain seperti PHP atau lainnya yang menentukan bahwa array adalah sebuah tipe data sendiri, di JavaScript, array ini bertipe data Object.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Array JavaScript bertipe Object&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;tipe data dari variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek(){\r\n    alert(''tipenya ''+ typeof hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Multidimensi Array</h4>\r\n\r\n<p>Kita bisa juga menyimpan array di dalam array atau yang bisa disebut sebagai multidimensi array. Perhatikan pula cara mengakses nilai array yang ada dalam array.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Multidimensi Array&lt;/h3&gt;\r\n  &lt;h3&gt;Jika orang = ["John",25,true,[3.14,2.13,3.00]]&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;variable orang index ke-3&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;hr&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;variable orang index ke-1 dari index ke-3&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var orang = ["John",25,true,[3.14,2.13,3.00]];\r\n  function cek1(){\r\n    alert(orang[3]);\r\n    alert(''tipenya ''+ typeof orang[3]);\r\n  }\r\n  function cek2(){\r\n    alert(orang[3][1]); // mengakses nilai 2.13\r\n    alert(''tipenya ''+ typeof orang[3][1]);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '719', 0, 1554171121, 1573910890);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(49, 'j3qxb7g', '3', 'j1', 16, 'JS Method Array', 'Fungsi Method pada Data Array', 'fungsi-method-pada-data-array', 1, '<p>Seperti pada tipe data Number dan String, pada struktur data Array JavaScript juga terdapat method-method yang digunakan untuk mengolah atau memanipulasi data array ini.</p>\r\n\r\n<h4>Mengkonversi array menjadi string</h4>\r\n\r\n<p>Pada dasarnya web browser akan menampilkan semua karakter dalam bentuk string meski sebenarnya data tersebut awalnya berupa array atau tipe data yang lain. Di dalam bahasa program lainnya seperti PHP, array ini tidak bisa langsung ditampilkan sebagai string tanpa dikonversi terlebih dahulu menjadi string. Namun untuk JavaScript hal itu bisa dilakukan meski hanya menggunakan tampilan default.</p>\r\n\r\n<p>Untuk mengkonversi data yang semula berupa array menjadi tipe data string dengan tujuan untuk mencetak nilainya ke dalam browser, terdapat method berupa <code>toString()</code> dan method <code>join()</code>.</p>\r\n\r\n<h3>Method toString</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method ini dapat langsung mengubah atau mengkonversi sebuah array menjadi string.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array toString&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;button onclick="cek1()"&gt;&lt;h3&gt;isi variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;button onclick="cek2()"&gt;&lt;h3&gt;method toString&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek1(){\r\n    // data array\r\n    alert(hewan);\r\n    alert(''tipenya adalah '' + typeof hewan);\r\n  }\r\n  function cek2(){\r\n    // konversi ke tipe data string\r\n    alert(hewan.toString());\r\n    alert(typeof hewan.toString());\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method join</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di dalam penggunaan method ini, kita juga bisa menambahkan separator sebagai pemisah antar element yang ada di dalam array yang diletakkan di dalam parameter pada methodnya.</p>\r\n\r\n<p>Perhatikan contoh penggunaannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array join&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Tampilkan isi array sebagai string dengan karakter pemisah&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method join&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek(){\r\n    // default array ditampilkan dengan tanda koma sebagai pemisah antar elemen\r\n    alert(hewan);\r\n    // array ditampilkan sebagai string dengan tanda strip sebagai pemisah/separator\r\n    alert(hewan.join('' - ''));\r\n    // array ditampilkan sebagai string dengan tanda bintang sebagai pemisah/separator\r\n    alert(hewan.join('' * ''));\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Menambah dan menghapus element array</h4>\r\n\r\n<p>Array bisa dimanipulasi dalam bentuk seperti menambahkan, menghapus, atau mengubah element yang ada di dalamnya. Pada JavaScript method-method yang bisa digunakan antara lain <code>pop()</code>, <code>push()</code>, <code>shift()</code>, <code>unshift()</code> dan <code>splice()</code> serta <code>slice()</code>.</p>\r\n\r\n<h3>Method pop</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>pop()</code> digunakan untuk menghilangkan element terakhir dalam sebuah array.</p>\r\n\r\n<p>Method ini sendiri akan mengembalikan nilai berupa element yang dihilangkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array pop&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Ambil/hilangkan elemen terakhir dari array&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method pop&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // menghilangkan elemen terakhir dari array yaitu "domba"\r\n    alert(hewan.pop());\r\n    // isi array setelah dilakukan method pop\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method push</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>push()</code> adalah untuk menambahkan sebuah element baru ke dalam sebuah array yang diletakkan pada element terakhir.</p>\r\n\r\n<p>Method ini akan mengembalikan nilai berupa panjang array setelah dilakukan proses push. Kita juga bisa menambahkan isi array lebih dari satu element secara langsung dalam sekali method.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array push&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Tambahkan elemen "gajah", "harimau" dan "singa" pada elemen terakhir&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method push&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // isi array sebelum dilakukan method push\r\n    alert(hewan);\r\n    // menambahkan elemen baru ke dalam array pada index terakhir\r\n    hewan.push(''gajah'');\r\n    // isi array setelah dilakukan method push\r\n    alert(hewan);\r\n    // menambahkan lebih banyak elemen ke dalam array\r\n    hewan.push(''harimau'',''singa'');\r\n    // isi array setelah dilakukan method push lagi\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method shift</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>shift()</code> digunakan untuk menghilangkan element pertama dalam sebuah array. Mirip seperti method pop, method ini akan mengembalikan nilai berupa element yang dihilangkan.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array shift&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Ambil/hilangkan elemen pertama dari array&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method shift&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // menghilangkan elemen pertama dari array yaitu "kelinci"\r\n    alert(hewan.shift());\r\n    // isi array setelah dilakukan method shift\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method unshift</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sedangkan untuk <code>unshift()</code> adalah untuk menambahkan sebuah element baru ke dalam sebuah array yang diletakkan pada awal element dari sebuah array.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array unshift&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Tambahkan elemen "gajah" sebagai elemen pertama&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method unshift&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // isi array sebelum dilakukan method unshift\r\n    alert(hewan);\r\n    // menambahkan elemen baru ke dalam array pada index pertama / awal\r\n    hewan.unshift(''gajah'');\r\n    // isi array setelah dilakukan method unshift\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method splice</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method ini fungsinya sama seperti keempat method di atas, namun pebedaannya adalah pada method <code>splice()</code>, kita bisa menyisipkan dan menghilangkan element di dalam array secara lebih spesifik.</p>\r\n\r\n<p>Parameter yang biasa dibutuhkan adalah :</p>\r\n\r\n<ul>\r\n	<li>parameter pertama diisi dengan angka index tempat dimana eksekusi akan dilakukan</li>\r\n	<li>parameter kedua diisi dengan berapa banyak element yang akan dihapus</li>\r\n	<li>parameter ketiga dan seterusnya diisi dengan element apa yang akan disisipkan</li>\r\n</ul>\r\n\r\n<p>Sebenarnya method ini hanya membutuhkan parameter pertama saja untuk dapat dijalankan, parameter kedua dan seterusnya bersifat optional atau bisa ditulis ataupun tidak tergantung dengan kebutuhan.</p>\r\n\r\n<h4>splice untuk menyisipkan element baru</h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Menambah elemen dengan method array splice&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Tambahkan elemen "kuda" setelah "koala"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method splice&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // argument pertama : index posisi dimulainya eksekusi yaitu index ke 2\r\n    // argument kedua : tanpa menghapus elemen yang sudah ada dengan mengisi angka 0\r\n    // argument ketiga : elemen baru yang dimasukkan yaitu "kuda"\r\n    hewan.splice(2,0,''kuda'');\r\n    // isi array setelah dilakukan method splice\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>splice untuk menghapus element yang ada</h4>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Menghapus elemen dengan method array splice&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Hapus elemen "koala" dan "kucing"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method splice&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    // argument pertama : index posisi dimulainya eksekusi yaitu index ke 1\r\n    // argument kedua : angka 2 berarti menghapus 2 elemen\r\n    // argument ketiga : dikosongkan/ tidak menambah elemen apapun\r\n    hewan.splice(1,2);\r\n    // isi array setelah dilakukan method splice\r\n    alert(hewan);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method slice</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method slice() digunakan untuk memotong element dari sebuah array untuk dijadikan array baru.</p>\r\n\r\n<p>Parameter yang dibutuhkan :</p>\r\n\r\n<ul>\r\n	<li>parameter pertama diisi dengan angka index awal mulainya pemotongan</li>\r\n	<li>parameter kedua diisi dengan angka index akhir dari pemotongan</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array slice&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Ambil hanya elemen "koala" dan "kucing"&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method slice&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek(){\r\n    alert(hewan);\r\n    // argument pertama : index posisi dimulainya pemotongan yaitu index ke 1\r\n    // argument kedua : index posisi akhir pemotongan yaitu 3 : "sapi"\r\n    // nilai pada parameter kedua akan selalu mengambil elemen sebelumnya\r\n    // dalam hal ini "sapi" tidak akan termasuk ke dalam eksekusi method\r\n    var hewan2 = hewan.slice(1,3);\r\n    // isi variable hewan2\r\n    alert(hewan2);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Yang perlu diperhatikan saat menggunakan method ini dengan dua parameter, parameter kedua selalu akan mengacu pada element sebelumnya. Sehingga jika kita ingin mendapatkan element dengan index ke 1 sampai dengan index ke 2, kita harus menuliskan index angka ke 3 sebagai parameter kedua.</p>\r\n\r\n<p>Sedangkan jika kita hanya menuliskan satu parameter saja, maka pemotongan element akan dimulai dari angka parameter tersebut dan akan berakhir pada element terakhir dari array.</p>\r\n</div>\r\n\r\n<h3>Method sort</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>sort()</code> digunakan untuk mengurutkan nilai-nilai di dalam array berdasarkan urutan abjad huruf pertamanya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array sort&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Urutkan elemen array berdasarkan urutan abjadnya&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method sort&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  function cek(){\r\n    alert(hewan);\r\n    var hewan2 = hewan.sort();\r\n    alert(hewan2);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method concat</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Seperti hanya pada tipe data string, method <code>concat()</code> juga bisa digunakan pada data array. Fungsinya untuk menggabungkan sebuah array dengan array yang lainnya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array concat&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;dan hewan2 = ["ayam","bebek","angsa"]&lt;/h3&gt;\r\n  &lt;h3&gt;Gabungkan kedua array tersebut&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method concat&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  var hewan2 = ["ayam","bebek","angsa"];\r\n  function cek(){\r\n    alert(hewan);\r\n    alert(hewan2);\r\n    alert(hewan.concat(hewan2));\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Pengulangan terhadap element array</h4>\r\n\r\n<p>Di dalam JavaScript juga terdapat method yang khusus digunakan untuk melakukan perulangan pada setiap element di dalam array. Method yang bisa digunakan antara lain adalah <code>forEach()</code>, <code>map()</code>.</p>\r\n\r\n<h3>Method forEach</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>forEach()</code> digunakan untuk melakukan pengulangan pada setiap element di dalam sebuah array dan nilai yang dikembalikan oleh method ini berupa string.</p>\r\n\r\n<p>Parameter yang dibutuhkan :</p>\r\n\r\n<ul>\r\n	<li>parameter pertama berupa element di dalam array itu sendiri yang ditulis sebagai parameter dari function</li>\r\n	<li>parameter kedua berupa index dari masing-masing element (optional)</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array forEach&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Cetak ke layar masing-masing elemen dengan sebuah function&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method forEach&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;p id="hasil"&gt;&lt;/p&gt;\r\n&lt;script&gt;\r\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n  var hewan2 = '''';\r\n  \r\n  function cek(){\r\n    // forEach dengan function expression\r\n    // parameter pertama berupa element\r\n    // parameter kedua berupa index\r\n    hewan.forEach(function(element,index){\r\n      // gabungkan setiap elemen dan index di dalam variable hewan\r\n      // lalu masukkan ke dalam variable hewan2\r\n      hewan2 += ''hewan yang ke ''+ index + '' adalah '' + element + ''&lt;br&gt;'';\r\n    });\r\n    // cetak variable hewan2 ke layar\r\n    document.getElementById(''hasil'').innerHTML = hewan2;\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method map</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Fungsinya sama persis seperti forEach, namun perbedaannya adalah pada method <code>map()</code> akan mengembalikan nilainya tetap berupa data array sehingga jika ingin dilakukan pengolahan data lebih lanjut, hal itu masih sangat memungkinkan.</p>\r\n\r\n<p>Parameter yang dibutuhkan berupa element di dalam array itu sendiri yang ditulis sebagai parameter dari function.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array map&lt;/h3&gt;\r\n  &lt;h3&gt;Jika angka = [1,3,9,5,8]&lt;/h3&gt;\r\n  &lt;h3&gt;Cetak ke layar masing-masing elemen dengan sebuah function&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method map&lt;/h3&gt;&lt;/button&gt;\r\n  &lt;p id="hasil"&gt;&lt;/p&gt;\r\n&lt;script&gt;\r\n  var angka = [1,3,9,5,8];\r\n  var angka2 = '''';\r\n  \r\n  function cek(){\r\n    // map dengan function expression\r\n    // setiap elemen di dalam variable angka lakukan function (+1)\r\n    // kemudian simpan di dalam variable angka2\r\n    angka2 = angka.map(function(element){\r\n      return element + 1;\r\n    }); \r\n    // lalu cetak angka2 yang berupa array ke layar sebagai string \r\n    document.getElementById(''hasil'').innerHTML = angka2.join('' - '');\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h4>Mencari element di dalam array</h4>\r\n\r\n<p>Untuk keperluan ini, kita bisa menggunakan beberapa method array berupa <code>filter()</code>, <code>find()</code> dan <code>includes()</code>.</p>\r\n\r\n<h3>Method filter</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>filter()</code> digunakan untuk mencari elemen-elemen yang telah ditentukan di dalam array dan akan dikembalikan dalam bentuk array yang baru.</p>\r\n\r\n<p>Parameter yang dibutuhkan untuk menjalankan method ini berupa element di dalam array itu sendiri yang ditulis sebagai parameter dari function.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array filter&lt;/h3&gt;\r\n  &lt;h3&gt;Jika angka = [4,2,1,7,5,9,20,15,13]&lt;/h3&gt;\r\n  &lt;h3&gt;Cari angka yang lebih kecil dari 10&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method filter&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var angka = [4,2,1,7,5,9,20,15,13];\r\n  function cek(){\r\n    var angka2 = angka.filter(function(element){\r\n      // pencarian nilai elemen yang nilainya &lt; 10\r\n      return element &lt; 10;\r\n    });\r\n    // variable angka2 berisi array hasil dari pencarian\r\n    alert(angka2.join('' - ''));\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;\r\n</code></pre>\r\n</div>\r\n\r\n<h3>Method find</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method <code>find()</code> juga berfungsi untuk menemukan element di dalam array namun hanya akan mengembalikan nilai pertama yang ditemukan di dalam elemen-elemen array yang dicari.</p>\r\n\r\n<p>Parameter yang dibutuhkan untuk menjalankan method ini berupa element di dalam array itu sendiri yang ditulis sebagai parameter dari function.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array find&lt;/h3&gt;\r\n  &lt;h3&gt;Jika angka = [4,2,8,7,5,9,20,15,13]&lt;/h3&gt;\r\n  &lt;h3&gt;Cari angka yang lebih kecil dari 10&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method find&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var angka = [4,2,8,7,5,9,20,15,13];\r\n  function cek(){\r\n    var angka2 = angka.find(function(element){\r\n      // pencarian nilai elemen yang nilainya &lt; 10\r\n      return element &lt; 10;\r\n    });\r\n    // variable angka2 berisi array hasil dari pencarian\r\n    // tetapi hanya akan menemukan nilai pertama yang ditemukan\r\n    alert(angka2);\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Method includes</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Method includes() digunakan untuk mengecek apakah di dalam sebuah array terdapat sebuah element tertentu.</p>\r\n\r\n<p>Parameter yang dibutuhkan berupa element yang akan dicari. Penulisan parameter ini bersifat case sensitif dan nilai yang dikembalikan oleh method ini berupa boolean antara true dan false.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Method array includes&lt;/h3&gt;\r\n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\r\n  &lt;h3&gt;Cek apakah elemen "gajah" ada di dalam array?&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;method includes&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  function cek(){\r\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\r\n    alert(hewan.includes(''gajah''));\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<p>Selain method-method yang dijelaskan di atas, masih ada banyak lagi method array. Untuk lebih lengkapnya silahkan kunjungi referensi link di bawah ini.</p>\r\n\r\n<ul>\r\n	<li class="reff"><a href="https://www.w3schools.com/jsref/jsref_obj_array.asp" target="_blank">w3schools.com/jsref/jsref_obj_array.asp</a> </li>\r\n	<li class="reff"><a href="https://developer.mozilla.org/id/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank">developer.mozilla.org/id/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li>\r\n</ul>\r\n', '1746', 0, 1554171121, 1573704117),
(50, 'jtds9ia', '3', 'j1', 19, 'JS Control Flow', 'Struktur Pengkondisian pada JavaScript', 'struktur-pengkondisian-pada-javascript', 0, '<p style="text-align:justify"><strong>Tipe data boolean</strong></p>\r\n\r\n<p>Di dalam programing, kita akan sering melakukan pengujian terhadap suatu kondisi dengan menampilkan suatu hasil berdasarkan kondisi yang diuji, dan tentunya stiap kondisi berbeda, kita akan menampilkan hasil yang berbeda pula. Kalau tidak ON ya berarti OFF, atau kalau tidak YES berarti NO, atau kalau tidak TRUE berarti FALSE.</p>\r\n\r\n<p><strong>Statement Kondisi</strong></p>\r\n\r\n<p>Dalam JavaScript, kita akan mengimplementasikan tipe data boolean yang nilainya hanya ada dua kemungkinan yaitu <em>TRUE</em> dan <em>FALSE</em>. TRUE berarti benar dan FALSE berarti salah.</p>\r\n\r\n<p>JavaScript menyediakan statement <code>if,</code> <code>else if,</code> <code>else</code> sebagai penguji dari suatu kondisi. </p>\r\n\r\n<p><strong>Struktur if</strong> </p>\r\n\r\n<p>gunakan i<code>f</code> untuk menjalankan blok kode jika suatu kondisi terpenuhi syaratnya atau syaratnya bernilai true.</p>\r\n\r\n<pre>\r\n<code>if (syarat) {\r\n   // blok kode yang akan dijalankan jika syarat terpenuhi (TRUE)\r\n}</code></pre>\r\n\r\n<hr />\r\n<p><strong>Struktur if else</strong></p>\r\n\r\n<p>gunakan <code>else</code> untuk menjalankan blok kode jika kondisi if sebelumnya tidak terpenuhi syaratnya atau bernilai false.</p>\r\n\r\n<pre>\r\n<code>if(syarat){\r\n   // kode yang akan dijalankan jika syarat terpenuhi (TRUE)\r\n} else {\r\n   // kode yang akan dijalankan jika syarat tidak terpenuhi (FALSE)\r\n}</code></pre>\r\n\r\n<hr />\r\n<p><strong>Struktur else if</strong></p>\r\n\r\n<p>gunakan <code>else if</code> untuk memberikan kondisi pengujian lain ketika syarat if pertama tidak terpenuhi. if elseif dan else biasanya digunakan secara bersamaan untuk membentuk suatu pengujian agar menampilkan feedback kondisi yang dinamis.</p>\r\n\r\n<pre>\r\n<code>if(syarat pertama){\r\n   // kode yang akan dijalankan jika syarat pertama terpenuhi (TRUE)\r\nelse if (syarat kedua) {\r\n   // kode yang akan dijalankan jika syarat pertama tidak terpenuhi (FALSE) dan syarat kedua terpenuhi (TRUE)\r\n} else {\r\n   // kode yang akan dijalankan jika semua syarat tidak ada yang terpenuhi (FALSE)\r\n}</code></pre>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;struktur if elseif dan else&lt;/h3&gt;\r\n&lt;p&gt;Pukul berapakah sekarang ? \r\n  &lt;button id="pukul" onclick="lihat()"&gt; lihat jam&lt;/button&gt;\r\n&lt;/p&gt;\r\n&lt;p&gt;Maka saya harus mengucapkan..? \r\n  &lt;button id="ucapan" onclick="greet()"&gt;Selamat&lt;/button&gt;\r\n&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\n// function Date untuk menampilkan waktu sekarang\r\nvar waktu = new Date();\r\n// function getHours untuk menampilkan jam sekarang (format 0-24)\r\nvar jam   = waktu.getHours();\r\nvar selamat;\r\nif(jam &lt; 10){\r\n  // jika jam saat ini lebih kecil dari 10, maka..\r\n  selamat = "Selamat Pagi...";\r\n} else if(jam &lt; 15){\r\n  // jika jam saat ini lebih kecil dari 15, maka..\r\n  selamat = "Selamat Siang...";\r\n} else if(jam &lt; 19){\r\n  // jika jam saat ini lebih kecil dari 18, maka..\r\n  selamat = "Selamat Sore...";\r\n} else {\r\n  // jika jam saat ini tidak ada yang cocok dengan semua kondisi di atas, maka..\r\n  selamat = "Selamat Malam...";\r\n}\r\n// function cek untuk menambahkan digit nol sebelum digit jam\r\nfunction cek(i) {\r\n    if (i &lt; 10) {\r\n        i = "0" + i;\r\n    }\r\n    return i;\r\n}\r\njam   = cek(jam);\r\nmenit = waktu.getMinutes();\r\nmenit = cek(menit);\r\n\r\nfunction lihat(){\r\n  document.getElementById(\\''pukul\\'').innerHTML = jam +"."+ menit +" WIB" ;    \r\n}\r\nfunction greet(){\r\n  document.getElementById(\\''ucapan\\'').innerHTML = selamat;    \r\n}\r\n&lt;/script&gt;</code></pre>\r\n', '425', 0, 1554171121, 1573739959),
(51, 'j6ez73g', '3', 'j1', 20, 'JS Switch', 'Struktur Pengkondisian Switch pada JavaScript', 'struktur-pengkondisian-switch-pada-javascript', 0, '<p style="text-align:justify">Switch digunakan untuk menjalankan blok kode yang berbeda berdasarkan kondisi yang berbeda pula.</p>\r\n\r\n<pre>\r\n<code>switch(kondisi){\r\n   case kondisi_1 :\r\n   // kode yang akan dijalankan jika kondisi cocok dengan kondisi_1\r\n   break;\r\n   case kondisi_2 :\r\n   // kode yang akan dijalankan jika kondisi cocok dengan kondisi_2\r\n   break;\r\n   case kondisi_3 :\r\n   // kode yang akan dijalankan jika kondisi cocok dengan kondisi_3\r\n   break;\r\n   \r\n   default :\r\n   // kode yang akan dieksekusi jika semua kondisi tidak ada yang cocok dengan semua case\r\n}</code></pre>\r\n\r\n<ul>\r\n	<li style="text-align:justify"><code>switch</code>(kondisi) -&nbsp;menempatkan sebuah kondisi di dalam tanda kurung yang nantinya akan diuji dengan case yang dibawahnya.</li>\r\n	<li style="text-align:justify"><code>case</code> kondisi_penguji :&nbsp;- menempatkan keyword pengujian untuk menguji kondisi pada switch kemudian ditutup dengan tanda titik dua : dan setelah itu kita menulis kode yang akan dieksekusi</li>\r\n	<li style="text-align:justify"><code>break;</code> -&nbsp;mengakhiri setiap blok kode case dengan keyword break untuk menghentikan pengujian jika kondisi sudah menemukan kondisi_penguji yang cocok atau dalam artian kondisinya sudah bernilai TRUE.</li>\r\n	<li style="text-align:justify"><code>default :</code> - blok kode yang akan dijalankan jika kondisi tidak ada yang cocok dengan semua case kondisi_penguji.&nbsp;&nbsp;&nbsp;</li>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;p&gt;Sekarang adalah hari &lt;b id="demo"&gt;&lt;/b&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\n// function Date untuk menampilkan tanggal sekarang\r\n// function getDay untuk menampilkan hari dan format yang dihasilkan adalah 0 - 6 sesuai dengan jumlah hari dalam seminggu\r\nswitch (new Date().getDay()) {\r\n	case 0: // jika hari ini == 0, maka..\r\n		hari = "Minggu"; break;\r\n	case 1: // jika hari ini == 1, maka..\r\n		hari = "Senin"; break;\r\n	case 2: // jika hari ini == 2, maka..\r\n		hari = "Selasa"; break;\r\n	case 3: // jika hari ini == 3, maka..\r\n		hari = "Rabu"; break;\r\n	case 4: // jika hari ini == 4, maka..\r\n		hari = "Kamis"; break;\r\n	case 5: // jika hari ini == 5, maka..\r\n		hari = "Jum''at"; break;\r\n	case 6: // jika hari ini == 6, maka..\r\n		hari = "Sabtu"; break;\r\n	default : // jika hari ini tidak ada yang cocok dengan semua case yang ada, maka...\r\n		hari = "Mungkin sekarang adalah hari besar"; \r\n}\r\ndocument.getElementById(''demo'').innerHTML = hari;\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', '', 0, 1554171121, 1554263685),
(52, 'j07fxbd', '3', 'j1', 21, 'JS Date', 'Mengatur Tampilan Waktu di JavaScript', 'mengatur-tampilan-waktu-di-javascript', 0, '<p style="text-align:justify">Date atau tanggal dalam hal ini berarti sebuah ukuran waktu didefinisikan dengan tahun, bulan, hari, jam, menit, detik dan milidetik. Di JavaScript sendiri, format date ini biasa ditulis dalam bentuk string.</p>\r\n\r\n<p style="text-align:justify"><em>Format waktu default dalam bentuk string</em></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;waktu dalam bentuk string&lt;/h3&gt;\r\n&lt;p&gt;Waktu sekarang yang ditampilkan JavaScript dalam bentuk string :&lt;/p&gt;\r\n&lt;b id="demo"&gt;&lt;/b&gt;\r\n\r\n&lt;script&gt;\r\nfunction str(){\r\n  var sekarang = new Date();\r\n  document.getElementById(''demo'').innerHTML = sekarang;    \r\n}\r\n// setInterval digunakan untuk menjalankan function\r\n// dalam kurun waktu 500 milidetik\r\nsetInterval(str,500);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<hr />\r\n<p style="text-align:justify"><em>Format waktu default dalam bentuk number</em></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;waktu dalam bentuk number&lt;/h3&gt;\r\n&lt;p&gt;Waktu sekarang yang ditampilkan JavaScript dalam bentuk number(milidetik) :&lt;/p&gt;\r\n&lt;b id="demo"&gt;&lt;/b&gt;&lt;hr&gt;\r\n\r\n&lt;script&gt;\r\nfunction num(){\r\n  var sekarang = new Date();\r\n  document.getElementById(''demo'').innerHTML = sekarang.getTime();    \r\n}\r\n// setInterval digunakan untuk menjalankan function\r\n// dalam kurun waktu 1 milidetik\r\nsetInterval(num,1);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p style="text-align:justify">Untuk menuliskan tanggal sekarang kita hanya perlu menulis keyword <code>new Date()</code> . Penghitungan tanggal ini, dihitung dalam satuan milidetik sejak <code>1 Januari 1970 00:00:00.</code> Dalam satu hari jika dihitung dalam satuan  milidetik adalah <code>86400000</code> </p>\r\n\r\n<hr />\r\n<p style="text-align:justify"><strong>Metode get</strong></p>\r\n\r\n<p style="text-align:justify">Menampilkan waktu yang mudah dibaca tentu tidak perlu format default yang ada. Maka dari itu ada yang namanya metode dalam date ini.  Kita bisa mengatur format tampilan waktu sesuai yang kita inginkan atau yang menurut aturan format tanggal dan waktu yang dipakai dalam suatu negara.</p>\r\n\r\n<table border="1" cellpadding="1" cellspacing="1" class="table table-bordered table-striped">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">metode</th>\r\n			<th scope="col">deskripsi</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td><code>getDay()</code></td>\r\n			<td>menghasilkan output hari dalam seminggu sebagai angka (0-6). 0 untuk Sunday/Minggu sampai dengan 6 untuk Saturday/Sabtu </td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getDate()</code></td>\r\n			<td>menghasilkan output tanggal (1-31)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getMonth()</code></td>\r\n			<td>menghasikan output bulan (0-11). 0 untuk bulan January sampai dengan 11 untuk December</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getFullYear()</code></td>\r\n			<td>menghasilkan output tahun dalam 4 digit (yyyy)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getHours()</code></td>\r\n			<td>menghasillkan output jam (0-23)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getMinutes()</code></td>\r\n			<td>menghasilkan output menit (0-59)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getSeconds()</code></td>\r\n			<td>menghasilkan output detik (0-59)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getMilliseconds()</code></td>\r\n			<td>menghasilkan output milidetik (0-999)</td>\r\n		</tr>\r\n		<tr>\r\n			<td><code>getTime()</code></td>\r\n			<td>menghasilkan output dalam milidetik sejak 1 Januari 1970</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  *{ font-family: verdana }\r\n  #tanggal,#jam { background: black; color: white; padding: 10px; text-align: center; font-weight: bold; }\r\n  #jam { font-size: 22px; }\r\n&lt;/style&gt;\r\n\r\n&lt;p&gt;Format waktu sekarang yang ditampilkan dalam format Indonesia :&lt;/p&gt;\r\n&lt;p id="tanggal"&gt;&lt;/p&gt;\r\n&lt;p id="jam"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\n// membuat format tanggal sesuai dengan format negara Indonesia\r\nfunction tampilkan_waktu(){\r\n  var waktu = new Date();\r\n// mendapatkan angka tahun\r\n  var tahun     = waktu.getFullYear();\r\n// mendapatkan angka bulan\r\n  var bulanJS   = waktu.getMonth();\r\n  var namaBulan = [''Januari'',''Februari'',''Maret'',''April'',''Mei'',''Juni'',''Juli'',''Agustus'',''September'',''Oktober'',''November'',''Desember''];\r\n  var bulan     = namaBulan[bulanJS];\r\n// mendapatkan angka tangkal\r\n  var tanggal   = waktu.getDate();\r\n// mendapatkan angka hari\r\n  var hariJS    = waktu.getDay();\r\n  var namaHari  = [''Minggu'',''Senin'',''Selasa'',''Rabu'',''Kamis'',''Jumat'',''Sabtu''];\r\n  var hari      = namaHari[hariJS];\r\n// mendapatkan angka jam\r\n  var jam       = waktu.getHours();\r\n// mendapatkan angka menit\r\n  var menit     = waktu.getMinutes();\r\n// mendapatkan angka detik\r\n  var detik     = waktu.getSeconds();\r\n    \r\n    jam   = cek(jam);\r\n    menit = cek(menit);\r\n    detik = cek(detik);\r\n    var cetakTanggal = hari+", "+tanggal+" "+bulan+" "+tahun;\r\n    var cetakJam = jam+":"+menit+":"+detik+" WIB";\r\n    document.getElementById("tanggal").innerHTML = cetakTanggal;\r\n    document.getElementById("jam").innerHTML = cetakJam;\r\n}\r\nfunction cek(i) {\r\n    if (i &lt; 10) {\r\n        i = "0" + i;\r\n    }\r\n    return i;\r\n}\r\nsetInterval(tampilkan_waktu, 500);\r\n&lt;/script&gt;</code></pre>\r\n\r\n<hr />\r\n<p><strong>Metode set</strong></p>\r\n\r\n<p>Jika metode get digunakan untuk mendapatkan hasil waktu saat ini, maka pada metode set bisa kita pakai untuk menuliskan waktu yang spesifik yang kita inginkan.</p>\r\n\r\n<p> </p>\r\n\r\n<p>referensi lebih lengkap tentang date JavaScript bisa dibaca <a href="http://www.w3schools.com/jsref/jsref_obj_date.asp" target="_blank">disini</a></p>\r\n\r\n<p> </p>\r\n', '', 0, 1554171121, 1569324804),
(53, 'jumbvg4', '3', 'j1', 22, 'JS Loop For', 'Metode Loop for pada JavaScript', 'metode-loop-for-pada-javascript', 0, '<p style="text-align:justify"><strong>Apa itu Loop?</strong></p>\r\n\r\n<p style="text-align:justify">Loop di JavaScript adalah&nbsp;pengulangan. Salah satu manfaat loop programing yaitu memudahkan kita untuk menghasilkan&nbsp;output&nbsp;yang banyak keluar di layar dalam sekali&nbsp;waktu&nbsp;dengan hanya menulis beberapa baris kode saja.</p>\r\n\r\n<p style="text-align:justify">Seperti pada kasus untuk mengeluarkan isi dari data di dalam array. Mungkin kode yang akan kita tulis akan seperti ini :</p>\r\n\r\n<pre>\r\n<code>var pelajaran = ["Biologi","Fisika","Kimia","Geografi","Ekonomi","Bahasa"];\r\nnama += pelajaran[0] + "&lt;br&gt;"; \r\nnama += pelajaran[1] + "&lt;br&gt;"; \r\nnama += pelajaran[2] + "&lt;br&gt;"; \r\nnama += pelajaran[3] + "&lt;br&gt;"; \r\nnama += pelajaran[4] + "&lt;br&gt;"; \r\nnama += pelajaran[5] + "&lt;br&gt;";</code></pre>\r\n\r\n<p style="text-align:justify">Kode di atas bisa kita tulis manual selama data yang dikeluarkan masih sedikit, namun jika data yang perlu dikeluarkan ada ratusan, maka teknik copy paste saja tidak akan membantu.</p>\r\n\r\n<p style="text-align:justify">Untuk itu, dengan loop, kita bisa menulis kodenya menjadi seperti ini:</p>\r\n\r\n<pre>\r\n<code>var i;\r\nfor (i = 0; i &lt; pelajaran.length; i++) { \r\n    nama += pelajaran[i] + "&lt;br&gt;";\r\n}</code></pre>\r\n\r\n<p style="text-align:justify">Hasil yang akan dikeluarkan pun akan tetap sama.</p>\r\n\r\n<hr />\r\n<p style="text-align:justify"><strong>Macam-macam Loop di JavaScript</strong></p>\r\n\r\n<ol>\r\n	<li style="text-align:justify"><strong>For&nbsp;</strong></li>\r\n	<li style="text-align:justify"><strong>For/in</strong></li>\r\n	<li style="text-align:justify"><strong>While</strong></li>\r\n	<li style="text-align:justify"><strong>Do/while</strong></li>\r\n</ol>\r\n\r\n<hr />\r\n<p style="text-align:justify"><strong>Loop For</strong></p>\r\n\r\n<p style="text-align:justify">Loop for seringkali digunakan untuk mengulang beberapa blok&nbsp;kode untuk menghasilkan output dalam sekali waktu.</p>\r\n\r\n<p style="text-align:justify">Syntax penulisannya :</p>\r\n\r\n<pre>\r\n<code>for (statement 1; statement 2; statement 3) {\r\n    // kode yang akan dieksekusi\r\n}</code></pre>\r\n\r\n<p style="text-align:justify"><em>statement 1</em> - berupa nilai awal sebelum dilakukan loop</p>\r\n\r\n<p style="text-align:justify"><em>statement 2</em> - berupa syarat atau biasa diisi dengan batas loop akan dilakukan</p>\r\n\r\n<p style="text-align:justify"><em>statement 3</em> - berupa nilai perpindahan setiap loop dilakukan</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;menulis pengulangan 10 kali dengan loop for&lt;/h3&gt;\r\n&lt;button onclick="ulang()"&gt;loop&lt;/button&gt;\r\n&lt;div id="demo"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar nomor = "";\r\nvar x;\r\nfunction ulang() {\r\n  for ( x = 0; x &lt; 10; x++ ){\r\n    nomor = nomor + "ini adalah pengulangan yang ke- " + x + "&lt;br&gt;";\r\n  }\r\n  document.getElementById(''demo'').innerHTML = nomor;\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<hr />\r\n<p><strong>Loop For/In</strong></p>\r\n\r\n<p style="text-align:justify">Loop for/in pada JavaScript digunakan untuk pengulangan berdasarkan nama property pada data object. Data object sendiri selalu akan memiliki property dan value.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;mengeluarkan isi data objek dengan loop for/in&lt;/h3&gt;\r\n&lt;button onclick="ulang()"&gt;loop&lt;/button&gt;\r\n&lt;div id="demo"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar data = "";\r\nvar n;\r\nvar biodata = {\r\n   nama      : "Ngadiono",\r\n   umur      : 25,\r\n   pekerjaan : "Karyawan Swasta",\r\n   hobi      : "Naik gunung"\r\n}\r\nfunction ulang(){\r\n  for( n in biodata ){\r\n    data = data + biodata[n] + " | ";\r\n  }\r\n  document.getElementById("demo").innerHTML = data;\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<hr />\r\n<p>&nbsp;untuk materi loop while dan do while akan kita bahas pada chapter berikutnya</p>\r\n\r\n<p>&nbsp;</p>\r\n', '', 0, 1554171121, 1554263685),
(54, 'jjqzqsl', '3', 'j1', 23, 'JS Loop While', 'Metode Loop while pada JavaScript', 'metode-loop-while-pada-javascript', 0, '<p><strong>Loop While</strong></p>\r\n\r\n<p>Loop while digunakan untuk melakukan pengulangan selama kondisinya bernilai true</p>\r\n\r\n<pre>\r\n<code>while (kondisi) {\r\n   // kode yang akan dieksekusi jika kodisi masih bernilai true\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;melakukan pengulangan 10 kali dengan while&lt;/h3&gt;\r\n&lt;button onclick="loop()"&gt;while&lt;/button&gt;\r\n&lt;div id="demo"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nfunction loop(){\r\n    var data = '''';\r\n    var x = 0;\r\n    while( x &lt; 10 ){ \r\n        data = data + "&lt;br&gt;ini adalah hasil loop while yang ke- " + x;\r\n        x++; // JANGAN DIHAPUS // nilai perpindahan yang menentukan batas loop\r\n    }\r\n    document.getElementById(''demo'').innerHTML = data;\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<ul>\r\n	<li><em>keyword while</em>&nbsp;- menulis keyword while&nbsp;kemudian di dalam tanda kurung kita memasukkan syarat kondisi</li>\r\n	<li><em>syarat kondisi</em> - selama variable x lebih kecil dari 10 <code>( x &lt; 10 )</code> maka lakukan loop</li>\r\n	<li><em>increment</em> -&nbsp;<code>x++</code> artinya, setiap kali loop dilakukan x akan selalu ditambahkan 1 <code>( x++ = x + 1)</code></li>\r\n	<li><em>penting</em> - jika kita lupa menuliskan perpindahan ini, loop akan terus dilakukan sampai browser bisa <em>crash</em> karena pengulangan nilai x akan selalu tetap (x akan selalu lebih kecil dari 10)</li>\r\n</ul>\r\n\r\n<hr />\r\n<p>&nbsp;<strong>Loop Do/While</strong></p>\r\n\r\n<p style="text-align:justify">Metode loop do/while ini mirip dengan while. Perbedaannya terletak pada keyword <code>do</code> yang artinya, lakukan pengulangannya minimal satu kali, baru melihat syarat dari <code>while</code>.</p>\r\n\r\n<pre>\r\n<code>do { \r\n   // kode yang akan dieksekusi\r\n}\r\nwhile ( syarat kondisi )\r\n</code></pre>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;melakukan pengulangan dengan do while&lt;/h3&gt;\r\n&lt;button onclick="loop()"&gt;do/while&lt;/button&gt;\r\n&lt;div id="demo"&gt;&lt;/div&gt;&lt;hr&gt;\r\n\r\n&lt;script&gt;\r\nfunction loop(){\r\n  var data = '''';\r\n  var x = 0; // ubah nilai x menjadi lebih dari 10, dan loop akan tetap dilakukan\r\n  do {\r\n    data = data + "&lt;br&gt;ini adalah hasil loop do/while yang ke- " + x;\r\n    x++; // JANGAN DIHAPUS // nilai perpindahan yang menentukan batas loop\r\n  }\r\n  while ( x &lt; 10 )\r\n  document.getElementById(''demo'').innerHTML = data;\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<ul>\r\n	<li><em>keyword do</em><strong>&nbsp;</strong>- perintah untuk&nbsp;melakukan loop tanpa melihat syarat terlebih dahulu (nilai awal x = 0)</li>\r\n	<li><em>increment</em><strong> - </strong>perpindahan pada setiap loop<strong>&nbsp;</strong></li>\r\n	<li><em>keyword while</em><strong> -&nbsp;</strong>memberikan&nbsp;syarat&nbsp;( x &lt; 10 )&nbsp;</li>\r\n	<li>perintah loop akan dilakukan minimal sekali meski nilai x diubah menjadi lebih besar dari 10, karena aturan do/while yaitu menuliskan syaratnya setelah kode pada statement <code>do</code> dieksekusi</li>\r\n</ul>\r\n\r\n<hr />\r\n<p><strong>Perbedaan loop for dan loop while</strong></p>\r\n\r\n<p>Pada dasarnya output yang dikeluarkan akan tetap sama, perbedaanya hanya terletak pada kondisi penulisan syntax syarat pada loopnya.&nbsp;</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;perbedaan for dan while&lt;/h3&gt;\r\n&lt;button onclick="loop_for()"&gt;loop dengan for&lt;/button&gt;\r\n&lt;button onclick="loop_while()"&gt;loop dengan while&lt;/button&gt;\r\n&lt;div id="demo"&gt;&lt;/div&gt;\r\n\r\n&lt;script&gt;\r\nvar pelajaran = ["Biologi","Fisika","Kimia","Geografi","Ekonomi","Bahasa","Matematika"];\r\n\r\n// mengeluarkan isi variable array pelajaran\r\n// dengan loop for\r\nfunction loop_for(){\r\n  var loop_for = "";\r\n  var a;\r\n  for( a = 0; pelajaran[a]; a++ ){\r\n    loop_for = loop_for + "isi variable pelajaran dengan metode for : " + pelajaran[a] + "&lt;br&gt;";\r\n  }\r\n  document.getElementById(''demo'').innerHTML = loop_for;\r\n}\r\n// dengan loop while\r\nfunction loop_while(){\r\n  var loop_while = "";\r\n  var b = 0;\r\n  while(pelajaran[b]){\r\n    loop_while = loop_while + "isi variable pelajaran dengan metode while : " + pelajaran[b] + "&lt;br&gt;";\r\n    b++;\r\n  }\r\n  document.getElementById(''demo'').innerHTML = loop_while;\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n', '', 0, 1554171121, 1554263685),
(55, 'jyi0fhp', '3', 'j1', 24, 'JS Errors', 'Proses Debugging pada JavaScript', 'proses-debugging-pada-javascript', 0, '<p style="text-align:justify">Ketika kita menulis kode JavaScript, pasti akan selalu terjadi berbagai macam kesalahan. Macam-macam kesalahan ini juga akan menimbulkan hasil yang berbeda-beda. Seperti halnya kesalahan penulisan (typo) ataupun kesalahan penempatan syntax kode.</p>\r\n\r\n<p style="text-align:justify"><strong>Try dan Catch</strong></p>\r\n\r\n<p style="text-align:justify">Statement try dan cath ini adalah satu kesatuan dan tidak bisa dipisahkan dalam pemakaiannya.</p>\r\n\r\n<p style="text-align:justify">Pada statement <code>try</code>, memungkinkan kita untuk mengetes beberapa baris blok kode, apakah terjadi kesalahan atau tidak.</p>\r\n\r\n<p style="text-align:justify">Sedangan pada <code>catch</code>, kita bisa menuliskan kode untuk dijalankan apabila kode pada statement try mengalami kesalahan atau error.</p>\r\n\r\n<pre>\r\n<code>try {\r\n    // blok kode yang akan dijalankan / ditest\r\n}\r\ncatch(x) {\r\n    // blok kode yang akan dijalankan untuk mengatasi error pada try\r\n}</code></pre>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan try dan catch&lt;/h3&gt;\r\n&lt;p id="demo"&gt;&lt;button onclick="myFunction()"&gt;munculkan alert&lt;/button&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nfunction myFunction(){\r\n  try {\r\n    alort(''Selamat datang di Hello World'');\r\n  }\r\n  catch(errornya) {\r\n    document.getElementById(''demo'').innerHTML = "ada yang error : " + errornya.message;\r\n  }\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<ul>\r\n	<li>kita sengaja melakukan typo pada statement <code>try</code> yaitu penulisan kerword <code>alert</code> yang salah</li>\r\n	<li>kemudian di dalam statement <code>cacth</code> dengan parameter <code>error</code> yang ditangkap, kita menuliskan error yang terjadi pada elemen ber-id demo</li>\r\n</ul>\r\n\r\n<hr />\r\n<p><strong>JavaScript Throw</strong></p>\r\n\r\n<p style="text-align:justify">Ketika error terjadi, normalnya JavaScript akan berhenti dan mencetak pesan error. Ini bisa kita lihat langsung pada developer tool browser pada tab console. Dengan statement throw, kita bisa mencetak teks error ini secara custom. Seperti pada contoh di bawah :</p>\r\n\r\n<ul>\r\n	<li>kita membuat sebuah input teks yang nilainya akan divalidasi oleh sebuah tombol test</li>\r\n	<li>kemudian mengkombinasikan try dengan beberapa kodisi di dalam statement if</li>\r\n	<li>ketika nilai dimasukkan dan diklik tombol, validasi akan dijalankan</li>\r\n	<li>statement throw memberikan pesan  yang terjadi  sesuai dengan apa yang diinputkan</li>\r\n	<li>ketika nilai yang diinputkan selain angka diantara 5 sampai 10, maka statement catch akan  menampilkan error yang ada di dalam statement try berupa kondisi throw yang dihasilkan </li>\r\n</ul>\r\n\r\n<hr />\r\n<p><strong>JavaScript Finally</strong></p>\r\n\r\n<p style="text-align:justify">Statement ini masih merupakan satu block kode dengan penggunaan try dan catch, yang fungsinya untuk mengakhiri try dan catch ketika kode selesai dijalankan.</p>\r\n\r\n<ul>\r\n</ul>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penggunaan try catch throw dan finally&lt;/h3&gt;\r\n&lt;p&gt;Masukkan angka hanya antara 5 sampai dengan 10 &lt;/p&gt;\r\n&lt;input id="demo" type="text"&gt;\r\n&lt;button onclick="cek()"&gt;Test&lt;/button&gt;\r\n&lt;p id="notifikasi"&gt;&lt;/p&gt;\r\n\r\n&lt;script&gt;\r\nfunction cek() {\r\n  var pesan, x;\r\n  pesan = document.getElementById("notifikasi");\r\n  pesan.innerHTML = "";\r\n  var x = document.getElementById("demo").value;\r\n  try { \r\n    // menguji kondisi nilai input\r\n    // dan memberikan feedback dengan keyword throw\r\n    if(x == "") throw "input masih kosong";\r\n    if(isNaN(x)) throw "input bukan angka";\r\n    x = Number(x);\r\n    if(x &lt; 5) throw "angka terlalu kecil";\r\n    if(x &gt; 10) throw "angka terlalu besar";\r\n  }\r\n  catch(err) { // menangkap adanya error\r\n    pesan.innerHTML = "notifikasi : " + err;\r\n  }\r\n  finally { // mensetting input kembali kosong\r\n    document.getElementById("demo").value = "";\r\n  }\r\n}\r\n&lt;/script&gt;</code></pre>\r\n\r\n<p>pada contoh, statement finally mengeksekusi kode yang isinya berupa perintah untuk mereset kembali nilai dari input setelah tombol test diklik.</p>\r\n\r\n<hr />\r\n<p><strong>Mengetahui Error pada JavaScript</strong></p>\r\n\r\n<p style="text-align:justify">Seringkali saat kita belajar menulis kode JavaScript dan terjadi sebuah kesalahan baik berupa kesalahan syntax kesalahan logika ataupun sesuatu yang sangat susah untuk dicari penyebabnya. Normalnya halaman browser tidak akan menampilkan apa-apa atau di balik layar, JavaScript menghentikan kode yang telah kita buat. Untuk itulah pada setiap browser modern saat ini selalu ada yang namanya developer tool, yang fungsinya dikhususkan untuk proses debugging atau mencari penyebab kesalahan kode yang menyebabkan tampilan pada suatu halaman tidak berjalan sesuai apa yang diharapkan.</p>\r\n\r\n<p style="text-align:justify">Umumnya, pada setiap browser ada shortcut untuk mengakses developer tool ini dengan menekan tombol <kbd>f12</kbd> pada keyboard.</p>\r\n\r\n<p style="text-align:justify"> </p>\r\n', '', 0, 1554171121, 1568826508);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(56, 'jjdnpeh', '3', 'j1', 1, 'JS Programming', 'Mengenal Pemrograman JavaScript', 'mengenal-pemrograman-javascript', 1, '<p>Dari sekian banyaknya bahasa pemrograman, JavaScript memiliki alasan utama kenapa harus dipilih sebagai bahasa pemrograman pertama yang harus dipelajari. JavaScript itu mudah dipelajari bahkan oleh pemula. Namun yang harus kita tahu adalah meski belajar JavaScript itu mudah tetapi kita akan kesulitan untuk menjadi ahli dalam JavaScript. Hal itu karena JavaScript saat ini adalah bahasa pemrograman yang sangat pesat perkembangannya sehingga, meski kita telah menguasai beberapa konsep JavaScript, akan lebih banyak lagi konsep-konsep JavaScript yang telah berkembang jauh di luar sana.</p>\r\n\r\n<p>Untuk lebih detail tentang sejarah dan perkembangan bahasa pemrograman JavaScript kita bisa kunjungi referensinya di website <a href="https://id.wikipedia.org/wiki/JavaScript" target="_blank">Wikipedia</a>.</p>\r\n\r\n<h3>Pemrograman JavaScript</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebelum kita lebih lanjut untuk langsung mempelajari syntax-syntax JavaScript, ada beberapa pengetahuan dasar tentang JavaScript. JavaScript sendiri merupakan bahasa pemrograman murni, tidak seperti HTML atau CSS, sehingga tidak bisa disamakan dalam hal tingkat kompleksitasnya jika dibanding dengan HTML yang notabene hanya sebagai bahasa markup atau CSS yang identik dengan warna warni halaman. Namun, JavaScript ada sebagai bahasa program untuk mendukung penyempurnaan interface dari sebuah halaman website.</p>\r\n\r\n<p style="text-align: center;"><img alt="behavior" src="http://localhost/helloworld/assets/img/html-css-js.png" style="width: 300px; height: 185px;" title="kombinasi HTML CSS JS" /></p>\r\n\r\n<p>Beberapa keunggulan dalam belajar JavaScript sebagai bahasa pemrograman khususnya untuk pemula, di antaranya adalah sebagai berikut :</p>\r\n\r\n<h4>JavaScript Gratis</h4>\r\n\r\n<p>JavaScript bisa dipelajari oleh siapapun yang ingin mempelajarinya tanpa harus mengeluarkan biaya seperti untuk membeli lisensi software atau lainnya.</p>\r\n\r\n<h4>JavaScript Tidak Perlu Instalasi</h4>\r\n\r\n<p>Jika dibandingkan dengan bahasa pemrograman lain seperti PHP yang mengharuskan kita menginstal aplikasi server untuk menjalankan programnya, JavaScript hanya membutuhkan web browser saja. Hal ini tidaklah rumit karena setiap perangkat komputer pasti akan memiliki aplikasi web browser tanpa harus mengisntal aplikasi tambahan lainnya.</p>\r\n\r\n<p>JavaScript merupakan bahasa pemrograman web yang bersifat <strong>Client Side Programming Language</strong> yang berarti bahwa<b> </b>JavaScript adalah tipe bahasa pemrograman yang pemrosesannya dilakukan di sisi komputer client (komputer pengunjung).</p>\r\n\r\n<h4>Console Machine dari JavaScript</h4>\r\n\r\n<p>Dalam sebuah web browser seperti Chrome, Firefox dll, di dalamnya telah dibekali mesin dari JavaScript sehingga, jika kita ingin menjalankan sebuah program, maka web browser sebagai media belajar kita sudah sangat mendukung untuk mempelajari bahasa ini dengan adanya fitur console JavaScript.</p>\r\n\r\n<p style="text-align: center;"><img alt="console" class="img-responsive" src="http://localhost/helloworld/assets/img/console.png" style="width: 500px; height: 238px;" title="developer tools chrome" /></p>\r\n\r\n<h4>Hight-level Language</h4>\r\n\r\n<p>Yang dimaksud hight-level language dalam bahasa program adalah, struktur syntax yang dipakai JavaScript hampir atau sudah mendekati dengan bahasa manusia (dalam hal ini adalah bahasa inggris). Jika dibandingkan dengan beberapa bahasa lain JavaScript memiliki urutan teratas sebagai bahasa yang mudah dimengerti oleh manusia.</p>\r\n\r\n<p style="text-align: center;"><img alt="tingkat bahasa program" src="http://localhost/helloworld/assets/img/language.png" style="width: 365px; height: 390px;" title="tingkat bahasa program" /></p>\r\n</div>\r\n\r\n<h3>Kemampuan JavaScript</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada dasarnya, JavaScript adalah bahasa program yang murni digunakan untuk keperluan <strong>front-end</strong> seperti memanipulasi tampilan elemen HTML dan mempadukannya dengan CSS. JavaScript mengambil objek dari HTML kemudian diolah dan ditampilkan kembali sesuai kode perintah yang dituliskan, dan bisa dijalankan pada event-event yang telah ditentukan.</p>\r\n\r\n<p>JavaScript pada awal perkembangannya berfungsi untuk membuat interaksi antara user dengan situs web menjadi lebih cepat tanpa harus menunggu pemrosesan di web server. Sebelum javascript, setiap interaksi dari user harus diproses oleh web server.</p>\r\n\r\n<p>Bayangkan ketika kita mengisi formulir registrasi untuk pendaftaran di sebuah situs web, lalu men-klik tombol submit, kemudian menunggu sekitar 20 detik untuk website memproses isian formulir tersebut, dan mendapati halaman yang menyatakan bahwa terdapat kolom form yang masih belum diisi.</p>\r\n\r\n<p>Untuk keperluan seperti inilah JavaScript dikembangkan. Pemrosesan untuk mengecek apakah seluruh form telah terisi atau tidak, bisa dipindahkan dari web server ke dalam web browser.</p>\r\n\r\n<p>Dalam perkembangan selanjutnya, JavaScript tidak hanya berguna untuk validasi form, namun untuk berbagai keperluan yang lebih modern. Berbagai animasi untuk mempercantik halaman web, fitur chatting, efek-efek modern, games, semuanya bisa dibuat menggunakan JavaScript.</p>\r\n\r\n<p>Akan tetapi karena sifatnya yang dijalankan di sisi client yakni di dalam web browser yang digunakan oleh pengunjung situs, user sepenuhnya dapat mengontrol eksekusi JavaScript. Hampir semua web browser menyediakan fasilitas untuk mematikan JavaScript, atau bahkan mengubah kode JavaScript yang ada, sehingga kita tidak bisa bergantung sepenuhnya kepada JavaScript.</p>\r\n\r\n<p>Namun, dengan berkembangnya JavaScript yang sangat pesat sampai saat ini, bahasa JavaScript sekarang juga sudah bisa dijalankan melalui server.</p>\r\n</div>\r\n\r\n<h3>Website JavaScript</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Banyak hal yang bisa dilakukan JavaScript untuk bisa membuat sebuah halaman website menjadi lebih interaktif. Interaktif yang dimaksud disini adalah sebuah website yang bisa merespon apa saja yang pengunjung lakukan terhadap konten dari website, seperti jika pengunjung mengklik sebuah tombol, maka lakukan sebuah proses tertentu, atau jika pengunjung menscroll halaman, maka lakukan proses yang lain. Yang pada intinya, kita akan membuat sebuah website yang bisa menarik perhatian pengunjung untuk betah berlama-lama di website kita, karena selain fungsionalitasnya sesuai dengan apa yang dicari pengunjung juga kontennya yang interaktif dengan peran dari JavaScript.</p>\r\n\r\n<p>Berikut ini adalah contoh sederhana sebuah kode JavaScript mengubah atau memanipulasi elemen HTML. Jangan terlalu khawatir jika syntax kode JavaScript yang ada dalam contoh berikut belum terlalu familiar dengan apa yang sudah kamu pelajari sebelumnya tentang HTML dan CSS.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;style&gt;\r\n      button {\r\n        padding: 10px;\r\n        margin: 10px auto;\r\n        background: silver;\r\n        display: block;\r\n        font-size: 18px;\r\n        width: 400px;\r\n      }\r\n      div { margin: 10px; text-align: center; }\r\n      img { \r\n        margin: 10px auto; \r\n        display: block;\r\n      }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n  \r\n  &lt;body&gt;\r\n    &lt;div&gt;\r\n      &lt;h3&gt;JavaScript membuat interaksi dalam elemen button dan img HTML&lt;/h3&gt;\r\n      &lt;img id="lampu" src="http://localhost/helloworld/assets/img/lamp_off.gif"&gt;    \r\n    &lt;/div&gt;\r\n    &lt;button id="tombol"&gt;klik untuk nyalakan lampu&lt;/button&gt;\r\n  \r\n  &lt;script&gt;\r\n    var on  = "http://localhost/helloworld/assets/img/lamp_on.gif";\r\n    var off = "http://localhost/helloworld/assets/img/lamp_off.gif"; \r\n    var tombol = document.getElementById(''tombol'');\r\n    var lampu = document.getElementById(''lampu'');\r\n    \r\n    tombol.addEventListener(''click'', function(){\r\n      lampu.src = on;\r\n      tombol.innerHTML = ''double-click untuk padamkan lampu'';\r\n    });\r\n    tombol.addEventListener(''dblclick'', function(){\r\n      lampu.src = off;\r\n      tombol.innerHTML = ''klik untuk nyalakan lampu'';\r\n    });\r\n  &lt;/script&gt;\r\n  \r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n', '824', 0, 1554171121, 1573740886),
(57, 'c5er0pu', '2', 'c1', 16, 'dddjjjaahahCsss', 'sjkksshshpshpshpsh', 'sjkksshshpshpshpsh', 0, '', '', 0, 1570165847, 1570165847),
(58, 'heuv56a', '1', 'h2', 24, 'HTML5 Vs HTML4', 'Perbedaan HTML5 dengan Versi HTML sebelumnya', 'perbedaan-html5-dengan-versi-html-sebelumnya', 1, '<p>HTML5 adalah versi terbaru dari HTML. Versi terakhir HTML sebelum HTML5 adalah HTML 4.01. dan XHTML 1.1. Kali ini kita akan membahas apa saja fitur-fitur baru yang tersedia di dalam HTML5 serta perbedaannya dengan versi HTML sebelumnya.</p>\r\n\r\n<h3>Perkembangan HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Perkembangan HTML terhenti pada versi 4.01 di tahun 1999. <strong>W3C</strong> sebagai badan yang bertanggung jawab dalam standarisasi teknologi internet (termasuk HTML), kemudian beralih mengembangkan XHTML yang juga akhirnya menemui jalan buntu pada versi 2.0. Jika sebelumnya kita sudah terbiasa menggunakan HTML 4.01 ataupun XHTML 1.1, terdapat perubahan kecil pada HTML5.</p>\r\n\r\n<p>Pada dasarnya HTML5 adalah gabungan &lsquo;<em>best practice</em>&lsquo; dari HTML 4.01 dan XHTML. Hampir semua tag atau elemen pada HTML 4.01 maupun XHTML 1.1 dapat digunakan dalam HTML5.</p>\r\n</div>\r\n\r\n<h3>Tag Doctype</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penulisan doctipe pada HTML5 lebih sederhana. Mungkin inilah perbedaan paling mencolok dari halaman HTML yang ditulis menggunakan HTML5 atau tidak. Penulisan Doctype atau DTD pada HTML5 menjadi lebih sederhana <code> &lt;!DOCTYPE html&gt;</code>.</p>\r\n\r\n<p>Jika dibandingkan dengan versi HTML sebelumnya yang terkesan cukup panjang dan susah dihafal, yaitu :</p>\r\n\r\n<pre>\r\n<code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Atribut Type</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penulisan atribut <code class="html-attr" style="color:#90ca1c">type</code> untuk tag <code class="language-html">&lt;style&gt;</code> dan <code class="language-html">&lt;script&gt;</code> tidak diperlukan lagi pada HTML5. Hal ini karena secara default web browser akan menggunakan <code class="html-attr" style="color:#90ca1c">text/css</code> untuk tag <code>style</code>, dan <code class="html-attr" style="color:#90ca1c">text/javascript</code> untuk tag <code>script</code>.</p>\r\n\r\n<p>Sebagai contoh, untuk menggunakan internal CSS, Pada HTML versi sebelumnya kita menuliskan tag <code>style</code> secara lengkap, namun dalam HTML5 kita bisa membuatnya lebih sederhana.</p>\r\n\r\n<pre>\r\n<code>Penulisan tag style versi HTML\r\n\r\n&lt;style type="text/css"&gt;\r\n…kode CSS… \r\n&lt;/style&gt;\r\n\r\nPenulisan tag style versi HTML5\r\n\r\n&lt;style&gt;\r\n…kode CSS… \r\n&lt;/style&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Meta Charset</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penulisan meta tag karakter set (<em>charset</em>) pada HTML5 menjadi lebih sederhana.</p>\r\n\r\n<pre>\r\n<code>&lt;meta charset=”utf-8″&gt;</code></pre>\r\n\r\n<p>Jika dibandingkan versi sebelumnya yaitu :</p>\r\n\r\n<pre>\r\n<code>&lt;meta http-equiv="content-type" content="text/html;charset=UTF-8" /&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Void Element</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Pada HTML5, tag yang berdiri sendiri (<em>void element</em>) tidak harus ditutup seperti dalam XHTML.</p>\r\n\r\n<pre>\r\n<code>Penulisan tag break, input, img dan void element lainnya pada HTML\r\n&lt;br /&gt;\r\n&lt;img src="url" /&gt;\r\n&lt;input type="text" /&gt;\r\n\r\nPenulisan tag break, input, img dan void element lainnya pada HTML5\r\n&lt;br&gt;\r\n&lt;img src="url"&gt;\r\n&lt;input type="text"&gt;</code></pre>\r\n\r\n<p>Yang artinya, HTML5 mendukung penulisan kedua aturan di atas, tetapi tidak pada xHTML.</p>\r\n</div>\r\n\r\n<h3>Tag Penutup</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Walaupun tidak dianjurkan, sebuah tag pada HTML5 boleh ditulis tanpa tag penutup. Sebenarnya hal ini masih bisa dipraktekkan pada HTML5 <strong>&quot;jika&quot;</strong> tag yang digunakan hanyalah tag yang mengandung konten tulisan paragraf. Tetapi jika sudah bercampur dengan elemen <code>div</code> yang di dalamnya terdapat elemen <code>div</code> lainnya yang bersarang, hal itu bisa merusak tampilan desain dari CSS karena batas dari elemen <code>div</code> tidak ditulis.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n.satu { height: 100px; }\r\n.dua { font-family: sans-serif; }\r\n.tiga { background-color: blue; color: white; width: 200px; }\r\n.empat { background-color: darkblue ; }\r\n\r\n&lt;/style&gt;\r\n\r\n&lt;div class="satu"&gt;\r\n  &lt;div class="dua"&gt;\r\n    &lt;div class="tiga"&gt;\r\n      &lt;p&gt;Sebuah paragraf\r\n  &lt;div class="empat"&gt;\r\n    &lt;h1&gt;text lainnya</code></pre>\r\n\r\n<p>Perhatikan contoh di atas, terlihat bahwa kita memberikan property <code class="css-code" style="color:#18c4e7">color</code> hanya pada elemen div dengan class tiga, tetapi yang terjadi elemen dengan class empat pun ikut berwana <code class="css-code" style="color:#18c4e7">white</code> karena elemen dengan class tiga tidak memiliki batas penutupnya. Jadi, silahkan pertimbangkan lagi untuk penulisan tag penutup ini.</p>\r\n</div>\r\n\r\n<h3>Kapitalisasai</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Penulisan tag dan atribut adalah <em>case-insensitive</em> di dalam HTML5, sehingga tag <code class="language-html">&lt;p&gt;</code> dan tag <code class="language-html">&lt;P&gt;</code> akan dianggap sama. Hal ini berbeda dengan XHTML yang mengharuskan seluruh tag ditulis dalam huruf kecil.</p>\r\n\r\n<pre>\r\n<code class="language-html">Penulisan nama tag yang diharuskan di xHTML\r\n&lt;p class="satu"&gt;Sebuah paragraf&lt;/p&gt;\r\n\r\nPenulisan keduanya valid di HTML5\r\n&lt;p class="satu"&gt;Sebuah paragraf&lt;/p&gt;\r\n&lt;P class="SATU"&gt;Sebuah paragraf&lt;/P&gt;</code></pre>\r\n\r\n<p>Namun kita juga tetap disarankan agar membedakan antara kode HTML dengan text konten dari elemen yaitu menulis semua huruf kode HTML dengan huruf kecil semua.</p>\r\n</div>\r\n\r\n<h3>Tanda Kutip</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Di HTML5, penulisan nilai atribut tidak harus selalu di dalam tanda kutip kecuali jika nilai atributnya lebih dari satu kata. Berbeda dengan xHTML yang mengharuskan semua nilai atribut tag harus diapit tanda kutip.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;h3&gt;penulisan atribut dengan nilai satu kata&lt;/h3&gt;\r\n&lt;p class=satu&gt;contoh paragraf&lt;/p&gt;\r\n\r\n&lt;h3&gt;penulisan atribut dengan nilai lebih dari satu kata&lt;/h3&gt;\r\n&lt;p class="satu dua"&gt;contoh paragraf&lt;/p&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Dukungan Multimedia</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>HTML5 mendukung multimedia secara langsung menggunakan tag <code class="language-html">&lt;audio&gt;</code> dan <code class="language-html">&lt;video&gt;</code>, sehingga kita tidak perlu tergantung kepada aplikasi pihak ke-3 seperti <em>flash player</em>. seperti pada HTML sebelumnya.</p>\r\n\r\n<p>Untuk penjelasan tentang tag multimedia ini akan kita bahas pada materi selanjutnya.</p>\r\n</div>\r\n\r\n<div class="wrapper-content">\r\n<p>Meski di HTML5 memberikan beberapa fleksibilitas atau kebebasan dengan aturan yang tidak teralalu ketat seperti xHTML, akan tetapi cara penulisan kode yang tidak tepat pun akan tetap berpengaruh dalam kemampuan kecepatan browser dalam menerjemahkannya menjadi halaman yang seharusnya ditampilkan.</p>\r\n\r\n<p>Kita bisa melakukan pengecekan syntax-syntax kode HTML yang telah kita tulis dengan mengunjungi situs <a href="http://validator.w3.org/" target="_blank">W3 validator</a>. Di sana kita bisa melakukan pengecekan jika terjadi kesalahan ataupun saran penulisan tag yang lebih tepat.</p>\r\n</div>\r\n', '702', 0, 1554171121, 1573708429),
(59, 'cpj4lig', '2', 'c1', 5, 'CSS Units', 'Satuan Standard dalam Value CSS', 'satuan-standard-dalam-value-css', 1, '<p>Dalam merancang halaman web, kadang ada saatnya kita membutuhkan fleksibilitas dalam menentukan nilai atau value tertentu untuk suatu properti, seperti tinggi sebuah box, besar ukuran font maupun besar border dari tabel. Untuk keperluan ini, CSS menyediakan berbagai satuan ukuran seperti <b>pixel, centimeter, point</b>, <b>inchi,</b> dll.</p>\r\n\r\n<p>Sebuah nilai dalam CSS dapat bernilai positif maupun negatif, bisa berupa angka bulat, maupun angka desimal. Namun beberapa properti juga memiliki batasan, seperti warna yang hanya bisa bernilai 0 - 255 atau 0 sampai dengan FF.</p>\r\n\r\n<p>Tata cara penulisan nilai dalam CSS ini harus tidak boleh ada spasi antara nilai dengan satuannya, seperti <code>10px</code>, <code>2.3em</code>, dll. Jika terdapat spasi di antaranya, maka deklarasi tersebut dianggap tidak valid. Dan jika nilai dari sebuah property bernilai <code>0</code>, maka penulisan satuan boleh ditulis ataupun tidak, hal itu tidak berpengaruh seperti contoh <code class="css-code" style="color:#18c4e7;">{ margin: 0px} </code>sama halnya dengan <code class="css-code" style="color:#18c4e7;">{ margin: 0 }</code>. Penulisan angka 0 di depan koma (dalam hal ini ditulis dengan tanda titik), bisa dihilangkan sehingga, <code>0.5px</code> bisa ditulis dengan <code>.5px</code>.</p>\r\n\r\n<p>Dari begitu banyak satuan nilai yang bisa dipakai dalam CSS, sebenarnya satuan-satuan ini hanya terbagi menjadi 2 jenis saja, yaitu satuan yang besifat Absolute dan satuan yang bersifat Relative.</p>\r\n\r\n<h3>Satuan Value Absolute</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Nilai absolute adalah sebuah nilai di dalam CSS, dimana nilai tersebut tidak dipengaruhi kondisi tag induknya (<em>parent</em>), dan didasarkan pada ukuran sebenarnya di media printing.</p>\r\n\r\n<p>Di dalam CSS, satuan dengan sifat absolute ini adalah sebagai berikut :</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-striped table-hover" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">Satuan</th>\r\n			<th scope="col">Perbandingan</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>millimeters (mm)</td>\r\n			<td></td>\r\n		</tr>\r\n		<tr>\r\n			<td>centimeters (cm)</td>\r\n			<td></td>\r\n		</tr>\r\n		<tr>\r\n			<td>inches (in)</td>\r\n			<td>1in = 96px = 2.54cm</td>\r\n		</tr>\r\n		<tr>\r\n			<td>points (pt)</td>\r\n			<td>1pt = 1/72 in</td>\r\n		</tr>\r\n		<tr>\r\n			<td>pixels (px)</td>\r\n			<td>1px = 1/96 in = 0.26mm</td>\r\n		</tr>\r\n		<tr>\r\n			<td>picas (pc)</td>\r\n			<td>1pc = 12pt</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Nilai-nilai dalam satuan absolute ini berasal dari media percetakan. Kita tentunya sudah familiar dengan ukuran seperti <b>milimeter</b>, dan <b>centimeter</b>, dimana nilai konversinya bisa kita tentunkan dengan 1in = 2.54cm = 25.4mm.</p>\r\n\r\n<p>Ukuran <b>point</b> sering digunakan dalam media cetak offline seperti Microsoft word dalam menentukan ukuran dari <b>font</b>. 1 inchi setara dengan 72pt, sehingga ukuran font normal sebesar 12pt setara dengan seperdelapan inchi. Contoh penggunaannya dalam CSS: <code>p { font-size: 18pt }</code> sama dengan <code>p { fontsize: 0.25in }</code></p>\r\n\r\n<p>Beberapa nilai absolut tersebut, selain <b>pt</b> tidak terlalu sering digunakan, karena konversi dari ukuran dunia nyata ke dalam monitor dipengaruhi banyak hal, 1cm di satu monitor bisa jadi berbeda dengan 1cm pada monitor lainnya, sehinga agak menyulitkan dalam mendesain kode CSS yang lebih akurat.</p>\r\n\r\n<p>Ukuran <strong>pixel</strong>, merupakan ukuran yang paling sering digunakan dalam CSS. Pengecualian di dalam CSS, pixel termasuk nilai relatif karena ia tidak terikat dengan perbandingan media tertentu. Didalam spesifikasi CSS, 1 pixel disamakan dengan 0.26mm atau 1/96 inci, namun banyak browser yang mengabaikan spesifikasi ini dan menyamakan 1 pixel dengan 1 pixel sesungguhnya yang terdapat di monitor.</p>\r\n\r\n<p>Perhatikan contoh implementasi nilai satuan absolute di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body    { font-size: 14pt; }\r\n  p.satu  { font-size: 8mm; }\r\n  p.dua   { font-size: 0.35in; }\r\n  p.tiga  { font-size: 30px; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n &lt;p&gt;Kalimat ini akan berukuran 14 point (inherit dari tag body)&lt;/p&gt;\r\n &lt;p class="satu"&gt;Kalimat ini akan berukuran 8 milimeter&lt;/p&gt;\r\n &lt;p class="dua"&gt;Kalimat ini akan berukuran 0,35 inchi&lt;/p&gt;\r\n &lt;p class="tiga"&gt;Kalimat ini akan berukuran 30 pixel&lt;/p&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Satuan Value Relative</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Berbeda dengan nilai absolute, nilai relative didalam CSS dipengaruhi oleh tag disekitarnya. CSS mendukung banyak satuan nilai relative. Beberapa di antaranya adalah sebagai berikut :</p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-striped table-hover" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col">Satuan</th>\r\n			<th scope="col">Definisi</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td>em</td>\r\n			<td>relative terhadap nilai yang dideklarasikan dari <em>parent</em> elemen</td>\r\n		</tr>\r\n		<tr>\r\n			<td>rem</td>\r\n			<td>relative terhadap nilai yang dideklarasikan pada elemen root</td>\r\n		</tr>\r\n		<tr>\r\n			<td>vw</td>\r\n			<td>relative terhadap nilai 1% dari keseluruhan lebar perangkat (browser)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>vh</td>\r\n			<td>relative terhadap nilai 1% dari keseluruhan tinggi perangkat (browser)</td>\r\n		</tr>\r\n		<tr>\r\n			<td>%</td>\r\n			<td>relative terhadap elemen di sekitarnya (parent atau child)</td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<h4>Nilai Satuan Em</h4>\r\n\r\n<p>Dalam satuan em, <code>1em</code> sama dengan besar ukuran asal yang diturunkan tag tersebut. Ketika kita mendeklarasikan ukuran text sebuah paragraf dalam tag div sebesar 14px, maka beberapa tag yang berada di dalam div tersebut disebut secara <em>inheritance</em> akan berukuran <code>1em</code>. Jika kita mengubah ukuran elemen p yang ada di dalam tag div dengan ukuran 1.5em, maka ukuran elemen p akan berubah menjadi 1.5 kali dari ukuran tag div (14px * 1.5em) yaitu 21px. Begitu juga dengan beberapa elemen yang bersarang (<em>nested</em>) di dalam tag p, ukurannya akan bergantung pada tag p sebagai <em>parent</em>nya. Pewarisan ukuran ini akan terus berlanjut sampai pada anak terakhir dari elemen div itu sendiri.</p>\r\n\r\n<p>Perhatikan contoh di bawah ini tentang penggunaan satuan <strong>em</strong></p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  div { font-size: 14px; }\r\n  p { font-size: 1.5em; }\r\n  span { font-size: 1.2em; }\r\n  strong { font-size: 0.8em; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Contoh penggunaan satuan em dengan property font-size&lt;/h3&gt;\r\n  \r\n  &lt;div&gt;\r\n    Text div ini berukuran 14px (acuan terhadap nilai lainnya).\r\n    &lt;p&gt;\r\n      elemen p ini berukuran 21px (14px * 1.5em)&lt;br&gt; \r\n      &lt;span&gt;\r\n        elemen span ini berukuran 25.2px (21px * 1.2em)&lt;br&gt;\r\n        &lt;strong&gt;\r\n          elemen strong  ini berukuran 20.16px (25.2px * 0.8em)\r\n        &lt;/strong&gt;\r\n      &lt;/span&gt; \r\n    &lt;/p&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Nilai Satuan Rem</h4>\r\n\r\n<p>Jika kita tidak menginginkan sebuah nilai (dalam hal ini font-size) seperti pada contoh kasus sebelumnya dengan menggunakan satuan <strong>em</strong>, maka gunakanlah satuan <strong>rem</strong>. Huruf &quot;<code>r</code>&quot; pada <code>rem</code> berarti <code>root</code> ini sama dengan font-size yang ditentukan pada elemen akar (elemen terluar) pada umumnya merupakan elemen <code>html</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;style&gt;\r\n      html    { font-size: 14px; }\r\n      div     { font-size: 1rem; }\r\n      p       { font-size: 1.5rem; }\r\n      span    { font-size: 1.2rem; }\r\n      strong  { font-size: 0.8rem; }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n  \r\n  &lt;body&gt;\r\n    &lt;div&gt;\r\n      Text div ini berukuran 14px\r\n      &lt;p&gt;\r\n        elemen p ini berukuran 21px (14px * 1.5rem)&lt;br&gt; \r\n        &lt;span&gt;\r\n          elemen span ini berukuran 16.8px (14px * 1.2rem)&lt;br&gt;\r\n          &lt;strong&gt;\r\n            elemen strong  ini berukuran 11.2px (14px * 0.8rem)\r\n          &lt;/strong&gt;\r\n        &lt;/span&gt; \r\n      &lt;/p&gt;\r\n    &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<h4>Nilai Satuan Vw dan Vh</h4>\r\n\r\n<p>Teknik desain web responsif sangat bergantung dengan aturan persentase. Namun, persentase CSS tidak dapat selalu menjadi solusi terbaik untuk menyelesaikan setiap masalah. Lebar pada CSS relatif dengan ukuran parent elemen terdekat yang mengandungnya. Bagaimana jika kita ingin menggunakan lebar dan tinggi viewport bukannya lebar dari parent element? Itulah yang CSS memberikan unit <strong>vh</strong> dan <strong>vw</strong>.</p>\r\n\r\n<p>Satuan vh sama dengan 1/100 dari tinggi viewport. Contohnya, jika tinggi viewport browser 900px, 1vh akan menjadi 9px. Demikian pula, jika lebar viewport 750px, 1vw akan menjadi 7.5px.</p>\r\n\r\n<h4>Nilai Satuan Persentase</h4>\r\n\r\n<p>Nilai persentase adalah sebuah nilai per seratus (<code>%</code>) dari suatu property yang relatif terhadap induk (<em>parent</em>) dari tag tersebut. Misalkan kita membuat sebuah deklarasi CSS sebagai <code>p { font-size: 10pt }</code>, dan <code>em { font-size: 120% }</code>. Maka jika terdapat tag <code class="language-html">&lt;em&gt;</code> didalam tag <code class="language-html">&lt;p&gt;</code>, maka ukuran font dari tag em akan menjadi 120% dari 10pt, atau sekitar 12pt.</p>\r\n\r\n<p>Dengan membuat nilai font lainnya menjadi persen, hal ini akan memudahkan jika suatu saat kita ingin merubah seluruh tampilan web. Hanya merubah ukuran tag p, maka secara langsung tag em akan menyesuaikan tampilannya.</p>\r\n</div>\r\n\r\n<h3>Perbandingan Satuan</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Kita membuat sebuah selector <code>body { font-size:14pt }</code> pada bagian awal deklarasi CSS. Selector body akan menurunkan (<em>inheritance</em>) ukuran font ini ke seluruh tag p yang berada di dalam tag body, namun pada masing-masing tag p, kita menambahkan property HTML &ldquo;class&rdquo;, sehingga ukuran font akan ditimpa (<em>override</em>) oleh nilai lainnya.</p>\r\n\r\n<p>Khusus untuk elemen p class empat dan lima, kita menggunakan nilai relatif em, dan %, sehingga nilainya bergantung dengan nilai induknya (<em>parent</em>), yakni <code>body { font-size:14pt }</code>. Cobalah mengubah ukuran font-size pada body ini, maka secara otomatis kedua kalimat tersebut juga akan berubah ukurannya.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;style&gt;\r\n      /*nilai absolute*/\r\n      body    { font-size:14pt; }\r\n      p.satu  { font-size:8mm; }\r\n      p.dua   { font-size:0.35in; }   \r\n      p.tiga  { font-size:20px; }\r\n  \r\n      /*nilai relative*/    \r\n      p.empat { font-size:1.8em }\r\n      p.lima  { font-size:190%; }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n\r\n  &lt;body&gt;\r\n   &lt;p&gt;Kalimat ini akan berukuran 14 point&lt;/p&gt;\r\n   &lt;p class="satu"&gt;Kalimat ini akan berukuran 8 milimeter&lt;/p&gt;\r\n   &lt;p class="dua"&gt;Kalimat ini akan berukuran 0,35 inchi&lt;/p&gt;\r\n   &lt;p class="tiga"&gt;Kalimat ini akan berukuran 20 pixel&lt;/p&gt;\r\n   &lt;p class="empat"&gt;Kalimat ini akan berukuran 1,8 em&lt;/p&gt;\r\n   &lt;p class="lima"&gt;Kalimat ini akan berukuran 190%&lt;/p&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n', '1202', 0, 1557638414, 1573706720),
(60, 'c9ifjrg', '2', 'c1', 3, 'CSS Selector', 'Urutan Prioritas Selector CSS', 'urutan-prioritas-selector-css', 1, '<p>Jika pada materi sebelumnya, kita telah sedikit membahas tentang urutan prioritas CSS berdasarkan sumber kode CSS tersebut (dimana inline style memiliki prioritas terkuat), kali ini kita akan melihat urutan prioritas kode CSS jika seluruh kode CSS tersebut berada dalam file yang sama yang hanya dibedakan dengan jenis selectornya saja.</p>\r\n\r\n<p>Dalam kasus ini kita akan mempelajari apa yang akan terjadi jika beberapa kode CSS yang dibuat saling menimpa sebuah elemen.</p>\r\n\r\n<h3>Contoh Kasus</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sebelum menjalankan kode ini, silahkan perhatikan terlebih dahulu deklarasi CSS nya. Terdapat 5 jenis selector yang mencoba untuk merubah warna text. Dari semua selector ini, sama-sama merujuk pada elemen <code class="language-html">&lt;h1&gt;</code> yang ada pada elemen <code class="language-html">&lt;div&gt;</code> yang ada di dalam elemen <code class="language-html">&lt;body&gt;</code>. Kemudian tebaklah, akan berwarna apakah elemen h1 tersebut.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Contoh Kasus Spesifik CSS&lt;/title&gt;\r\n    &lt;style&gt;\r\n      h1 { color: red }\r\n      div h1 { color: green }\r\n      #belajar { color: blue }\r\n      body div h1 { color: yellow }\r\n      div h1.belajar { color: silver }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n \r\n  &lt;body&gt;\r\n   &lt;div&gt;\r\n    &lt;h1 id="belajar" class="belajar"&gt;Belajar prioritas selector CSS...&lt;/h1&gt;\r\n   &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Maka, seperti yang kita lihat, elemen <strong>h1</strong> tersebut akan berwarna <strong><span style="color:#3498db;">blue</span></strong>, dimana selector CSS <code class="css-code" style="color:#18c4e7;">#belajar</code> adalah tempat deklarasi <code class="css-code" style="color:#18c4e7;">color: blue</code>, namun bagaimana ini bisa terjadi? Bagaimana dengan keempat deklarasi CSS yang lainnya?</p>\r\n\r\n<p>Hal itu terjadi karena selector <code class="css-code" style="color:#18c4e7;">#belajar</code> dianggap paling spesifik atau paling dominan<em> </em>dari keempat selector lainnya dan mengabaikan urutan baris alur penulisan kodenya.</p>\r\n</div>\r\n\r\n<h3>Nilai Prioritas Selector</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>CSS memiliki aturan tertentu tentang urutan prioritas dari selector, yaitu ketika sebuah property dari CSS saling menimpa satu sama lain, selector yang paling dominan lah yang akan menang dan diterapkan deklarasinya.</p>\r\n\r\n<p>Aturan prioritas selector CSS dihitung menggunakan formula 4 digit, contohnya: <strong>0,1,0,0</strong>. Perhitungannya sama seperti hitung-hitungan kita sehari-hari, dimana <strong>0,1,0,0</strong> lebih besar daripada <strong>0,0,1,5</strong>, atau agar lebih mudah nilai <strong>0,1,0,0</strong> bisa ditulis menjadi <strong>0100</strong>, dan nilai <strong>0,0,1,5</strong> menjadi <strong>0015</strong>.</p>\r\n\r\n<p>Berikut adalah rumus nilai priotitas untuk selector di dalam CSS :</p>\r\n\r\n<ol start="1">\r\n	<li>Setiap <code>elemen / tag selector</code> bernilai <strong>0,0,0,1</strong></li>\r\n	<li>Setiap <code>class selector</code>, dan <code>attribut selector</code> bernilai <strong>0,0,1,0</strong></li>\r\n	<li>Setiap <code>ID selector</code> bernilai <strong>0,1,0,0</strong></li>\r\n	<li>Setiap <code>inline style</code> bernilai <strong>1,0,0,0</strong></li>\r\n</ol>\r\n\r\n<p>Dengan menggunakan aturan tersebut, mari kita hitung nilai prioritas selector dari contoh kode sebelumnya.</p>\r\n\r\n<ol start="1">\r\n	<li>Selector <b>h1</b>, hanya terdiri dari 1 tag selector, maka nilainya : <strong>0,0,0,1</strong></li>\r\n	<li>Selector <b>div h1</b>, terdiri dari 2 tag selector, maka nilainya : <strong>0,0,0,2</strong></li>\r\n	<li>Selector <b>#belajar</b>, terdiri dari 1 ID selector, maka nilainya : <strong>0,1,0,0</strong></li>\r\n	<li>Selector <b>body div h1</b>, terdiri dari 3 tag selector, maka nilainya : <strong>0,0,0,3</strong></li>\r\n	<li>Selector <b>div h1.belajar</b>, terdiri dari 1 class selector dan 2 tag selector, maka nilainya : <strong>0,0,1,2</strong></li>\r\n</ol>\r\n\r\n<p>Dari hasil yang kita peroleh, maka selector <strong>#belajar</strong> memiliki nilai paling tinggi yaitu 0,1,0,0. Maka, karena itulah elemen h1 dalam contoh kode sebelumnya akan menerapkan deklarasi <code class="css-code" style="color:#18c4e7;">#belajar { color : blue }</code>.</p>\r\n</div>\r\n\r\n<h3>Keyword Important</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika aturan prioritas diatas tidak cukup, CSS menyediakan &ldquo;<em>senjata</em>&rdquo; pamungkas, yaitu menggunakan perintah <code>!important</code>. Perintah ini diletakkan di belakang propery dari CSS, dan perintah ini akan mengambil alih urutan prioritas CSS yang kita pelajari diatas.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;title&gt;Contoh Kasus Spesifik CSS&lt;/title&gt;\r\n    &lt;style&gt;\r\n      h1 { color: red !important }\r\n      div h1 { color: green }\r\n      #belajar { color: blue }\r\n      body div h1 { color: yellow }\r\n      div h1.belajar { color: silver }\r\n    &lt;/style&gt;\r\n  &lt;/head&gt;\r\n \r\n  &lt;body&gt;\r\n   &lt;div&gt;\r\n    &lt;h1 id="belajar" class="belajar"&gt;Belajar prioritas selector CSS...&lt;/h1&gt;\r\n   &lt;/div&gt;\r\n  &lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n\r\n<p>Terlihat jelas bukan, bahwa CSS akan menerapkan deklarasi <code class="css-code" style="color:#18c4e7;">h1 { color : red !important }</code> meskipun sebenarnya nilai dari elemen selector ini memilikiurutan nilai terendah dibanding selector yang lainnya.</p>\r\n</div>\r\n\r\n<div class="note">Penggunaan perintah <code>!important</code> sebaiknya digunakan jika memang sudah terdesak dan sedapat mungkin dihindari. Hal ini karena perintah !important akan mengubah urutan prioritas dan akan menyulitkan perancangan CSS apabila akan dilakukan perubahan style oleh JavaScript.</div>\r\n', '572', 0, 1557643786, 1573706107),
(61, 'cpkg1at', '2', 'c1', 11, 'CSS Box Model - Height & Width', 'Mengatur Lebar dan Tinggi Konten Elemen', 'mengatur-lebar-dan-tinggi-konten-elemen', 1, '<p>Pada dasarnya, semua elemen pada HTML secara default akan memiliki lebar 100% tag yang bersifat <strong>block</strong> atau yang bersifat <strong>inline</strong>. Khusus untuk tag yang bertipe block seperti tag div, h1, atau p, nilai lebar 100% ini bergantung pada lebar dari lebar layar browser yang sedang digunakan untuk mengakses halaman itu. Sedangkan untuk tag yang bersifat inline, lebarnya sesuai dengan lebar konten di dalamnya.</p>\r\n\r\n<p>Pada pembahasan kali ini kita akan belajar tentang pengaturan lebar dan tinggi sebuah <strong>&quot;konten&quot;</strong> dari elemen dimana kita bisa menggunakan property <code class="css-code" style="color:#18c4e7;">width</code> dan <code class="css-code" style="color:#18c4e7;">height</code>. Kedua property ini hanya berlaku pada penyusun box model berupa konten saja, yang artinya padding, border, dan margin bukan termasuk apa yang akan diubah atau dimanipulasi oleh kedua property ini.</p>\r\n\r\n<p>Di bawah ini adalah gambar ilustrasi letak width dan height dari sebuah elemen.</p>\r\n\r\n<p style="text-align: center;"><img alt="width dan height" src="http://localhost/helloworld/assets/img/width.png" style="width: 300px; height: 212px;" /></p>\r\n\r\n<h3>Property Width</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk mengatur lebar elemen HTML dengan CSS baik itu berupa elemen paragraf, gambar atau tag umum berupa tag div, kita bisa menggunakan property <code class="css-code" style="color:#18c4e7;">width</code> . Property ini diisi dengan satuan seperti pixel, persen, em, atau juga bisa diatur nilainya menjadi <code class="css-code" style="color:#18c4e7;">auto</code> yang artinya lebar elemen akan menyesuaikan terhadap layar browser.</p>\r\n\r\n<p>Silahkan coba untuk mengatur lebar layar browser untuk melihat perbedaan efek width pada masing-masing elemen div di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n  }\r\n  div {\r\n    height: 50px;\r\n    background-color: yellow;\r\n  }\r\n  .kotak2 { width: 10em; }\r\n  .kotak3 { width: 500px; }\r\n  .kotak4 { width: 50%; }\r\n  .kotak5 { width: auto; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div class="kotak1"&gt;lebar default elemen div&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak2"&gt;lebar dengan satuan em&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak3"&gt;lebar dengan satuan pixel&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak4"&gt;lebar dengan satuan persen&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak5"&gt;lebar dengan nilai auto&lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<p>Untuk pemilihan nilai satuan yang diberikan pada property width baik itu mengunakan nilai absolute seperti pixel atau relatif seperti persen, akan menjadi sangat berpengaruh pada fitur responsive dari sebuah halaman website nantinya. Karena itu, materi tentang property ini sangatlah penting untuk dipahami.</p>\r\n</div>\r\n\r\n<h3>Membatasi Lebar Elemen</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika kita perhatikan, ada sebuah masalah pada contoh sebelumnya. Pada elemen div dengan class kotak3, saat kita mengatur nilai property width dengan nilai absolute (pixel) ketika lebar layar lebih kecil daripada lebar elemen (500px), browser akan menampilkan scrollbar horizontal untuk menandakan bahwa elemen div itu tetap mempertahankan lebarnya (500px) meski lebar layar sedang berada pada lebar di bawah 500px. Untuk itulah perlu sebuah property pembatas agar bisa mengatasi situasi ini sehingga browser bisa menyesuaikan konten yang ada di dalamnya. Misalkan jika elemen itu diakses dari perangkat dengan layar yang lebih kecil seperti smartphone atau tablet. Property pembatas di sini yang dimaksud adalah <code class="css-code" style="color:#18c4e7;">max-width</code> dan <code class="css-code" style="color:#18c4e7;">min-width</code>.</p>\r\n\r\n<h4>Property Max-Width</h4>\r\n\r\n<p>Dengan property <code class="css-code" style="color:#18c4e7;">max-width</code>, sebuah elemen yang tadinya secara default memiliki lebar 100% dari lebar browser, kita bisa ubah lebar maksimalnya menjadi sesuai dengan keinginan kita.</p>\r\n\r\n<p>Perhatikan contoh implementasinya di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n  }\r\n  div {\r\n    height: 100px;\r\n  }\r\n  .contoh1 {\r\n    background: silver;\r\n  }\r\n  .contoh2 {\r\n    width: 500px;\r\n    background: salmon;\r\n  }\r\n  .contoh3 {\r\n    max-width: 500px;\r\n    background: yellow;\r\n  }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;h3&gt;Lihat perbedaan ketiga elemen div ini dengan mengatur lebar jendela browser&lt;/h3&gt;\r\n  \r\n  &lt;div class="contoh1"&gt;Elemen div tanpa diberikan pengaturan property width&lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh2"&gt;\r\n    Elemen div ini memiliki lebar yang tetap 500px \r\n    dan tidak peduli pada lebar browser\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh3"&gt;\r\n    Elemen div ini memiliki lebar maksimal 500px\r\n    &lt;br&gt;\r\n    Yang berarti div ini akan akan memiliki lebar 100%\r\n    namun hanya terbatas pada ukuran maksimal yang diberikan yaitu 500px\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n\r\n<h4>Property Min-Width</h4>\r\n\r\n<p>Seperti halnya pada max-width, property <code class="css-code" style="color:#18c4e7;">min-width</code> ini juga digunakan untuk memberi batas lebar. Yang membedakan adalah min-width digunakan untuk mengatur lebar minimal dari sebuah konten.</p>\r\n\r\n<p>Perhatikan penjelasan dari contoh di bawah ini.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { margin: 0; }\r\n  div {\r\n    height: 100px;\r\n  }\r\n  .contoh1 {\r\n    width: 500px;\r\n    background: steelblue;\r\n    color: white;\r\n  }\r\n  .contoh2{\r\n    max-width: 700px;\r\n    background: yellow;\r\n  }\r\n  .contoh3{\r\n    max-width: 700px;\r\n    min-width: 400px;\r\n    background: aqua;\r\n  }\r\n&lt;/style&gt;\r\n  \r\n&lt;body&gt;  \r\n  &lt;h3&gt;Lihat perbedaan ketiga div ini dengan mengatur halaman browser&lt;/h3&gt;\r\n  \r\n  &lt;div class="contoh1"&gt;\r\n    Elemen div ini memiliki lebar tetap 500px\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh2"&gt;\r\n    Elemen div ini memiliki lebar 100% tapi maksimal hanya 700px\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh3"&gt;\r\n    Elemen div ini memiliki lebar maksimal 700px dan lebar minimal 400px\r\n    Elemen div ini akan mempertahankan lebar kontennya tetap pada 400px\r\n    saat berada pada layar dibawah 400px\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Property Height</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Sama seperti pada property width, height digunakan untuk mengatur tinggi dari sebuah konten elemen. Nilai yang bisa diberikan juga sama dalam satuan pixel, em, atau persen.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body {\r\n    border: 1px solid red;\r\n  }\r\n  div {\r\n    width: 300px;\r\n    background-color: yellow;\r\n  }\r\n  .kotak2 { height: 5em; }\r\n  .kotak3 { height: 50px; }\r\n  .kotak4 { height: 50%; }\r\n  .kotak5 { height: auto; }\r\n&lt;/style&gt;\r\n\r\n&lt;body&gt;\r\n  &lt;div class="kotak1"&gt;tinggi default elemen div&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak2"&gt;tinggi dengan satuan em&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak3"&gt;tinggi dengan satuan pixel&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak4"&gt;tinggi dengan satuan persen&lt;/div&gt;&lt;br&gt;\r\n  &lt;div class="kotak5"&gt;tinggi dengan nilai auto&lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<h3>Membatasi Tinggi Elemen</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Konsep dari batas tinggi elemen ini juga sama dengan batas lebar elemen. Kita bisa menggunakan property <code class="css-code" style="color:#18c4e7;">max-height</code> dan <code class="css-code" style="color:#18c4e7;">min-height</code>.</p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;style&gt;\r\n  body { margin: 0; }\r\n  div {\r\n    width: 300px;\r\n  }\r\n  .contoh1 {\r\n    height: 150px;\r\n    background: aqua;\r\n  }\r\n  .contoh2{\r\n    min-height: 100px;\r\n    background: yellow;\r\n  }\r\n  .contoh3{\r\n    min-height: 80px;\r\n    max-height: 130px;\r\n    background: lightgray;\r\n  }\r\n&lt;/style&gt;\r\n  \r\n&lt;body&gt;\r\n  &lt;div class="contoh1"&gt;\r\n    &lt;b&gt;\r\n      Elemen div ini memiliki tinggi tetap 200px\r\n      tidak peduli berapa banyak konten di dalamnya.\r\n    &lt;/b&gt;\r\n    &lt;br&gt;text dummy\r\n    &lt;br&gt;text dummy\r\n    &lt;br&gt;text dummy\r\n    &lt;br&gt;text dummy\r\n    &lt;br&gt;text dummy\r\n    &lt;br&gt;text dummy\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh2"&gt;\r\n    &lt;b&gt;\r\n      Elemen div ini memiliki tinggi minimal 100px, \r\n      dan akan fleksibel menambah tingginya berdasarkan banyaknya konten.\r\n    &lt;/b&gt;\r\n    &lt;br&gt;text dummy\r\n  &lt;/div&gt;\r\n  &lt;br&gt;\r\n  &lt;div class="contoh3"&gt;\r\n    &lt;b&gt;\r\n      Elemen div ini memiliki tinggi minimal 80px dan maksimal 200px, \r\n      dan akan fleksibel menambah tingginya berdasarkan banyaknya konten,\r\n      tetapi terbatas sampai tinggi maksimal 200px\r\n    &lt;/b&gt;\r\n  &lt;/div&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n', '899', 0, 1557756801, 1573706754),
(62, 'c8ngf3r', '2', 'c1', 0, 'Giug', 'jklnn', 'jklnn', 0, '', '', 1, 1570165082, 1570165082);
INSERT INTO `tutors` (`id`, `snip_id`, `snip_category`, `snip_level`, `snip_order`, `snip_title`, `snip_slug`, `snip_meta`, `snip_publish`, `snip_content`, `snip_code`, `snip_bin`, `snip_upload`, `snip_update`) VALUES
(63, 'hcmrlj7', '1', 'h1', 2, 'HTML Introduction', 'Perkenalan HTML', 'perkenalan-html', 1, '<h3>Definisi HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika ingin belajar cara membuat website, HTML adalah langkah pertama sekaligus dasar dari seluruh halaman web di internet.</p>\r\n\r\n<p style="text-align: center;"><img alt="html" src="http://localhost/helloworld/assets/img/what-is-html.jpg" style="width: 300px; height: 300px;" /></p>\r\n\r\n<p>HTML sendiri merupakan kepanjangan dari &quot;HyperText Markup Language&quot;, yang berperan sebagai bahasa untuk struktur halaman web. Setiap halaman web pasti dimulai dengan HTML.</p>\r\n\r\n<p>Disebut hypertext karena di dalam HTML sebuah text biasa dapat berfungsi lain, kita dapat membuatnya menjadi link yang dapat berpindah dari satu halaman ke halaman lainnya hanya dengan meng-klik text tersebut. Kemampuan text inilah yang dinamakan hypertext, walaupun pada implementasinya nanti tidak hanya text saja yang dapat dijadikan link.</p>\r\n\r\n<p>Disebut Markup Language karena bahasa HTML menggunakan tanda (mark), untuk menandai bagian-bagian dari text. Misalnya, text yang berada di antara tanda tertentu akan menjadi tebal, dan jika berada di antara tanda lainnya akan tampak besar. Tanda ini di kenal sebagai HTML tag.</p>\r\n</div>\r\n\r\n<h3>Karakter HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>HTML merupakan pondasi untuk dua lapisan lain yaitu, desain tampilan dan interaktivitas. HTML adalah bahasa dasar pembuatan web. Disebut dasar karena dalam membuat web, semua komponen yang ditampilkan harus berada dalam aturan penulisan HTML sebelum bisa dimodifikasi oleh CSS ataupun JavaScript.</p>\r\n\r\n<p>Terdapat banyak bahasa pemrograman web yang ditujukan untuk memanipulasi kode HTML, seperti JavaScript dan PHP. Akan tetapi sebelum kita belajar JavaScript maupun PHP, memahami HTML setidaknya untuk level yang paling dasar merupakan hal yang paling awal wajib untuk dipahami terlebih dahulu.</p>\r\n\r\n<p style="text-align: center;"><img alt="char-html" src="http://localhost/helloworld/assets/img/char-html.jpg" style="width: 300px; height: 225px;" /></p>\r\n\r\n<p>HTML <strong>bukanlah</strong> bahasa pemrograman (programming language), melainkan bahasa markup (markup language). Hal ini terdengar sedikit aneh, tapi jika kita telah mengenal bahasa pemrograman lain, di dalam HTML tidak akan ditemukan struktur yang biasa di temukan dalam bahasa pemrograman seperti <code>if else</code>, <code>return</code> <code>foreach</code>, maupun variabel. HTML hanya sebuah bahasa struktur yang fungsinya untuk menandai bagian-bagian dari sebuah halaman.</p>\r\n\r\n<p>Selain HTML, dikenal juga xHTML yang merupakan singkatan dari &quot;eXtensible Hypertext Markup Language&quot;. xHTML merupakan versi lama dari HTML (sebelum era HTML5). xHTML menggunakan aturan penulisan yang lebih ketat.</p>\r\n\r\n<p>Saat ini versi terbaru dari HTML adalah HTML5. HTML5 berisi beberapa fitur baru, tapi tetap membawa mayoritas fitur dari versi HTML sebelumnya, yakni HTML 4 dan xHTML.</p>\r\n</div>\r\n\r\n<h3>Menulis Kode HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Memilih sebuah aplikasi editor HTML tidaklah terlalu sulit. Aplikasi editor HTML digunakan untuk mempermudah kita membuat kode HTML. HTML sendiri pada dasarnya hanya text biasa yang ditulis dalam kode-kode khusus. Web Browser-lah yang akan menerjemahkan kode HTML ini menjadi sebuah tampilan halaman web.</p>\r\n\r\n<p style="text-align: center;"><img alt="text-editor" src="http://localhost/helloworld/assets/img/text-editor.png" style="width: 300px; height: 188px;" /></p>\r\n\r\n<p>Untuk membuat kode HTML maupun halaman web sederhana, aplikasi Notepad bawaan OS Windows sebenarnya sudah cukup untuk membuat kode HTML. Namun akan sangat memiliki keterbatasan dalam pengeditan kode saat kode yang telah ditulis mencapai ratusan baris. Kami menyarankan agar menggunakan aplikasi khusus untuk editor ini. Berikut ini rekomendasi aplikasi teks editor yang bisa dipakai untuk memulai belajar HTML. Silahkan klik salah satu link di bawah ini untuk mendownload text editor di situs resminya masing-masing.</p>\r\n\r\n<ul>\r\n	<li><a href="http://notepad-plus-plus.org/download/" target="_blank">Notepad++</a></li>\r\n	<li><a href="https://atom.io/" target="_blank">Atom</a></li>\r\n	<li><a href="https://www.sublimetext.com/" target="_blank">Sublime Text</a></li>\r\n	<li><a href="https://code.visualstudio.com/download" target="_blank">VS Code</a></li>\r\n</ul>\r\n</div>\r\n\r\n<h3>Menjalankan Kode HTML</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk menjalankan kode HTML, kita membutuhkan Web Browser. Web Browser adalah sebuah software aplikasi untuk menerima, menampilkan, dan menerjemahkan informasi dari world wide web. Dan salah satu informasi itu dibuat dalam format HTML.</p>\r\n\r\n<p style="text-align: center;"><img alt="browser" src="http://localhost/helloworld/assets/img/browser.jpg" style="width: 300px; height: 225px;" /></p>\r\n\r\n<p>Kode HTML yang kita buat akan diterjemahkan oleh web browser agar tampil seperti yang dirancang. Pada dasarnya seluruh web browser dapat menampilkan kode HTML sama baiknya, namun jika sudah berbicara mengenai desain halaman, tiap-tiap browser memiliki beberapa perbedaan.</p>\r\n\r\n<p>HTML dirancang dan diatur oleh sebuah badan standarisasi dunia yang khusus menangani web, yaitu W3C (World Wide Web Consortium). Hal ini dikarenakan tiap-tiap program web browser menerjemahkan kode-kode HTML secara berbeda-beda, sehingga di perlukan sebuah standar yang sama untuk seluruh browser.</p>\r\n\r\n<p>Yang menjadi ulasan menarik adalah tren penggunaan browser saat ini. Web Browser Google Chrome digunakan oleh sekitar 56% pengguna internet, yang kemudian diikuti oleh web browser Safari dan Firefox masing-masing 14% dan 9%. Artinya, Google Chrome sangat dominan dipakai sebagai web browser andalan. Untuk detail tren perbandingan antar browser ini, kita bisa kunjungi situs <a href="https://www.w3counter.com/globalstats.php" target="_blank">www.w3counter.com</a>.</p>\r\n\r\n<p>Selalu biasakan untuk mengupdate browser saat ada pembaruan dari pengembangnya, karena dengan memakai browser yang terupdate, jika ada beberapa bug/celah kekurangan dari beberapa tampilan kode bisa diminimalkan.</p>\r\n</div>\r\n\r\n<ul>\r\n</ul>\r\n', '632', 0, 1566884299, 1573706915),
(64, 'j2t5j4w', '3', 'j1', 17, 'JS Data Type - Object', 'Tipe Data Object pada JavaScript', 'tipe-data-object-pada-javascript', 0, '<p>Di dalam bahasa program JavaScript, hampir semuanya yang ada adalah object termasuk di dalamnya juga ada array yang tipe datanya juga object.</p>\r\n\r\n<p>Jika kita paham betul tentang definisi object, kita akan lebih mudah memahami bahasa program JavaScript.</p>\r\n\r\n<h3>Definisi Object</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Mengulang pada materi sebelumnya tentang definisi dari array, array adalah sebuah variable yang bisa menampung banyak nilai / element sekaligus dan masing-masing nilainya akan selalu memiliki nomor index yang dimulai dari angka 0.</p>\r\n\r\n<p>Sedangkan definisi dari object pun hampir sama dengan array, tetapi khusus untuk object, masing-masing nilainya tidak memiliki angka index melainkan memiliki nama. Sehingga akan mendapatkan definisi bahwa object pada JavaScript adalah sekumpulan nilai yang ada di dalam variable yang memiliki pasangan <strong>name</strong> dan <strong>value</strong>.</p>\r\n\r\n<p>Dalam kehidupan sehari-hari, setiap benda juga disebut sebagai object dan object tersebut bisa saja memiliki perilaku yang berbeda antara satu dengan yang lainnya.</p>\r\n\r\n<p>Sekarang, kita ambil contoh ilustrasi sebuah object dari dunia nyata berupa <strong>mobil</strong></p>\r\n\r\n<div class="table-responsive">\r\n<table class="table table-bordered" style="width: 100%;">\r\n	<thead>\r\n		<tr>\r\n			<th scope="col" style="text-align: center;">Object</th>\r\n			<th scope="col" style="text-align: center;">Property</th>\r\n			<th scope="col" style="text-align: center;">Method</th>\r\n		</tr>\r\n	</thead>\r\n	<tbody>\r\n		<tr>\r\n			<td colspan="1" rowspan="4" style="text-align: center;"><img alt="mobil" src="http://localhost/helloworld/assets/img/object.png" style="width: 300px; height: 188px;" /></td>\r\n			<td><code style="color: #c7254e">mobil.nama = Fiat </code></td>\r\n			<td><code style="color: #c7254e">mobil.gas() </code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><code style="color: #c7254e">mobil.model = 500 </code></td>\r\n			<td><code style="color: #c7254e">mobil.belok() </code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><code style="color: #c7254e">mobil.berat = 850kg </code></td>\r\n			<td><code style="color: #c7254e">mobil.rem() </code></td>\r\n		</tr>\r\n		<tr>\r\n			<td><code style="color: #c7254e">mobil.warna = putih </code></td>\r\n			<td><code style="color: #c7254e">mobil.berhenti() </code></td>\r\n		</tr>\r\n	</tbody>\r\n</table>\r\n</div>\r\n\r\n<p>Semua mobil hampir pasti memiliki <strong>property</strong> atau identitas yang melekat pada mobil itu. Dalam hal ini, property dari mobil itu adalah <code style="color: #c7254e">nama</code>, <code style="color: #c7254e">model</code>, <code style="color: #c7254e">berat</code>, dan <code style="color: #c7254e">warna</code>. Atau juga dapat diartikan bahwa property adalah variable beserta nilainya yang ada di dalam sebuah object.</p>\r\n\r\n<p>Semua mobil juga pasti memiliki <strong>method</strong> atau perilaku yang melekat pada mobil itu saat dikendarai. Dalam hal ini, method dari mobil itu adalah <code style="color: #c7254e">gas()</code>, <code style="color: #c7254e">belok()</code>, <code style="color: #c7254e">rem()</code> dan <code style="color: #c7254e">berhenti()</code>. Atau juga dapat diartikan bahwa method adalah function yang ada di dalam object.</p>\r\n\r\n<p>Dari contoh di atas, kita tahu bahwa object mobil akan sangat banyak sekali di dunia ini jika property dan methodnya disimpan ke dalam variable biasa. Maka dari itu kita bisa menggunakan object JavaScript untuk menampung semua semua perilaku dari object yang akan kita tulis di dalam kode.</p>\r\n</div>\r\n\r\n<h3>Membuat Object</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Untuk membuat object, JavaScript menyediakan 3 cara penulisan yaitu dengan metode <strong>object literal</strong>, metode <strong>keyword new</strong> dan metode <strong>object constructor</strong>.</p>\r\n\r\n<h4>Object Literal</h4>\r\n\r\n<p>Object harus dituliskan ke dalam tanda kurung kurawal <code style="color: #c7254e">{ }</code>, yang isinya berupa pasangan antara <strong>name</strong> dan <strong>value</strong> yang antar pasangannya dipisahkan dengan tanda titik dua <code style="color: #c7254e">(:)</code></p>\r\n\r\n<p>Tanda spasi dan baris baru akan diabaikan. Jika isinya lebih dari satu pasangan, maka harus dipisahkan dengan tanda koma.</p>\r\n\r\n<p>Penulisan object dengan metode ini adalah yang paling umum digunakan, dan juga lebih mudah dipahami bagi pemula</p>\r\n\r\n<pre>\r\n<code>var hewan = {\r\n  spesies : ''kucing'',    // property spesies\r\n  kelas : ''mamalia'',     // property kelas\r\n  pemakan : ''karnivora'', // property pemakan\r\n  bunyi : function(){    // method bunyi\r\n    return ''meong'';\r\n  }\r\n}</code></pre>\r\n\r\n<h4>Keyword new</h4>\r\n\r\n<p>Dengan menggunakan keyword <code style="color: #c7254e">new</code> saat pembentukan object.</p>\r\n\r\n<pre>\r\n<code>var hewan = new Object();\r\n\r\nhewan.spesies : ''kucing'',\r\nhewan.kelas : ''mamalia'',\r\nhewan.pemakan : ''karnivora'',\r\nhewan.bunyi : function(){ return ''meong'' }</code></pre>\r\n\r\n<h4>Object Constructor</h4>\r\n\r\n<p>Kedua cara di atas masih terbatas pada pembuatan single object saja. Lalu bagaimana jika kita ditugaskan untuk membuat beberapa object yang menampung lebih banyak nama-nama hewan beserta perilakunya masing-masing ? Jika menggunakan kedua metode di atas, maka kita akan menulis kode yang serupa berkali-kali.</p>\r\n\r\n<p>Untuk kebutuhan pembuatan beberapa object yang lebih dari satu kita bisa menggunakan metode object constructor ini.</p>\r\n\r\n<p>Kelebihannya yaitu kode cukup ditulis sekali dan bisa dipakai untuk membuat object lainnya tanpa menuliskan lagi nama-nama property dan methodnya yang sebetulnya sama saja.</p>\r\n\r\n<pre>\r\n<code>function hewan(a,b,c) {\r\n  this.spesies = a;\r\n  this.kelas = b;\r\n  this.pemakan = c;\r\n}\r\n\r\nvar pertama = hewan(''kucing'',''mamalia'',''karnivora'');\r\nvar kedua = hewan(''kelinci'',''mamalia'',''herbivora'');</code></pre>\r\n\r\n<p>Perhatikan bahwa ada keyword <code style="color: #c7254e">this</code>. Keyword tersebut akan mengacu pada nama functionnya dalam hal ini adalah hewan.</p>\r\n\r\n<p>Penjelasan tentang keyword <code style="color: #c7254e">this</code> dan metode constructor ini akan kita bahas lebih detail pada materi lainnya.</p>\r\n</div>\r\n\r\n<h3>Mengakses Object</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Jika di dalam data array, kita bisa mengakses element-element yang ada di dalamnya dengan bantuan angka index, lain halnya dengan type data object. Di dalam type data object kita bisa menggunakan nama property ataupun nama method untuk mengakses nilai yang ada di dalamnya.</p>\r\n\r\n<h4>Mengakses property</h4>\r\n\r\n<p>Untuk mengakses sebuah property di dalam object, kita cukup menuliskan variablenya dan nama propertynya yang dipisahkan dengan tanda titik. Atau bisa juga menggunakan nama propertynya sebagai index jika memakai penulisan seperti array.</p>\r\n\r\n<pre>\r\n<code>var hewan = {\r\n  spesies : ''kucing'',\r\n  kelas : ''mamalia'',\r\n  pemakan : ''karnivora'',\r\n  bunyi : function(){\r\n    return ''meong'';\r\n  }\r\n}\r\n\r\nhewan.spesies // akan menghasilkan nilai ''kucing''\r\nhewan[''kelas''] // akan menghasilkan nilai ''mamalia''</code></pre>\r\n\r\n<h4>Mengakses method</h4>\r\n\r\n<p>Sedangkan jika ingin mengakses method di dalam function maka kita perlu menuliskan tanda kurung <code style="color: #c7254e">()</code> setelah nama variablenya.</p>\r\n\r\n<pre>\r\n<code>var hewan = {\r\n  spesies : ''kucing'',\r\n  kelas : ''mamalia'',\r\n  pemakan : ''karnivora'',\r\n  bunyi : function(){\r\n    return ''meong'';\r\n  }\r\n}\r\n\r\nhewan.bunyi() // akan menghasilkan nilai ''meong''</code></pre>\r\n\r\n<p>Perhatikan implementasinya pada contoh di bawah ini. </p>\r\n\r\n<pre>\r\n<code class="language-html">&lt;body&gt;\r\n  &lt;h3&gt;Mengakses nilai object&lt;/h3&gt;\r\n  &lt;button onclick="cek()"&gt;&lt;h3&gt;variable hewan&lt;/h3&gt;&lt;/button&gt;\r\n\r\n&lt;script&gt;\r\n  var hewan = {\r\n    spesies : ''kucing'',\r\n    kelas : ''mamalia'',\r\n    pemakan : ''karnivora'',\r\n    bunyi : function(){\r\n      return ''meong'';\r\n    }\r\n  }\r\n  function cek(){\r\n    alert(''nama '' + hewan.spesies);\r\n    alert(''jenis '' + hewan.kelas);\r\n    alert(''kelompok hewan '' + hewan[''pemakan'']);\r\n    alert(''bunyinya '' + hewan.bunyi());\r\n  }\r\n&lt;/script&gt;\r\n&lt;/body&gt;</code></pre>\r\n</div>\r\n\r\n<p></p>\r\n\r\n<p></p>\r\n', '769', 0, 1570480062, 1573913673),
(65, 'jx0utdb', '3', 'j1', 18, 'JS Data Type - Boolean', 'Tipe Data Boolean pada JavaScript', 'tipe-data-boolean-pada-javascript', 0, '', '', 0, 1570680451, 1570687492),
(66, 'h0v6b5z', '1', 'h1', 1, 'Programming', 'Belajar Programming Website', 'belajar-programming-website', 1, '<h3>Apa itu Program</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Secara umum, istilah program adalah sekumpulan instruksi terstruktur yang digunakan untuk membentuk suatu objek berperilaku sesuai dengan ketentuan yang telah diinstruksikan.</p>\r\n\r\n<p>Sedangkan untuk program komputer, adalah sekumpulan urutan instruksi dari kita sebagai manusia kepada sebuah mesin di dalam komputer yang bernama CPU (Central Processing Unit). CPU saat ini tidak hanya terbatas pada komputer saja, smartphone dan beberapa konsol game pun juga terdapat CPU.</p>\r\n\r\n<p>Seperti beberapa aplikasi di dalam komputer semisal aplikasi program desktop Microsoft Word untuk pengolahan teks, Adobe Photoshop untuk editing foto atau web browser utuk berselacar di internet. Semua itu adalah program komputer yag telah dirancang untuk melakukan tugas yang telah diberikan oleh para pembuatnya pada masing-masing program.</p>\r\n\r\n<p style="text-align: center;"><img alt="program" src="http://localhost/helloworld/assets/img/program.jpg" style="width: 300px; height: 171px;" title="program komputer" /></p>\r\n\r\n<p>Program-program di atas merupakan program yang sangat kompleks dan memiliki ribuan baris instruksi di dalamnya. Ribuan instruksi itu ditulis dalam sebuah bahasa program agar bisa dimengerti oleh CPU untuk kemudian menjalankan apa yang telah diinstruksikan dan aplikasi siap untuk dipakai sebagaimana fitur yang telah disediakan.</p>\r\n</div>\r\n\r\n<h3>Bahasa Mesin</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Komputer atau lebih spesifik lagi yaitu CPU hanya mengerti <strong>bahasa mesin</strong> yang berupa <a href="https://id.wikipedia.org/wiki/Sistem_bilangan_biner" target="_blank">bilangan biner</a> <code>0</code> dan <code>1</code> seperti <code>0001 0011</code> untuk merepresentasikan angka desimal dari 19. Angka 0 dan 1 inilah yang bekerja langsung pada perangkat keras dari komputer untuk representasi aliran listrik di dalam sebuah komponen CPU.</p>\r\n\r\n<p style="text-align: center;"><img alt="biner" src="http://localhost/helloworld/assets/img/data-biner.jpg" style="width: 300px; height: 185px;" title="data biner" /></p>\r\n\r\n<p>Untuk bisa memberikan instruksi pada komputer agar berperilaku sesuai dengan alur berpikir yang kita inginkan, kita memerlukan <a href="https://id.wikipedia.org/wiki/Bahasa_pemrograman" target="_blank">bahasa program</a> sebagai bahasa perantara yang nantinya akan bisa dimengerti oleh kita sebagai manusia dan juga bisa dimengerti oleh komputer setelah melalui proses compile.</p>\r\n\r\n<p>Proses compile ini akan menerjemahkan instruksi dalam bahasa program tertentu untuk dijadikan angka 0 dan 1 sehingga pesan instruksi dari kita sebagai manusia akan diterima oleh CPU.</p>\r\n</div>\r\n\r\n<h3>Bahasa Program</h3>\r\n\r\n<div class="wrapper-content">\r\n<p style="text-align: center;"><img alt="language" src="http://localhost/helloworld/assets/img/language.jpg" style="width: 300px; height: 192px;" title="Bahasa Program" /></p>\r\n\r\n<p>Ada begitu banyak sekali <a href="https://id.wikipedia.org/wiki/Daftar_bahasa_pemrograman" target="_blank">macam bahasa program</a> yang telah diciptakan dan semuanya diperuntukkan untuk kita agar bisa berinteraksi dengan komputer. Mulai dari memberikan perintah sederhana seperti menyapa dengan kalimat <code>Hello World</code> sampai dengan memberikan perintah kepada komputer untuk membantu manusia menerbangkan pesawat ke luar angkasa.</p>\r\n\r\n<p>Dari sekian banyak bahasa program yang ada, terdapat pula di antaranya yang populer dan kurang populer. Kepopuleran tersebut berasal dari kemampuan bahasa program dalam membantu manusia untuk menerjemahkan instruksi kita ke dalam CPU komputer, sehingga semakin baik fungsionalitas bahasa program maka akan semakin banyak pula yang menggunakannya.</p>\r\n\r\n<p>Setiap bahasa program, memiliki keunggulan dan kekurangan masing-masing. Ada yang lebih unggul dalam pemrograman website, ada juga yang lebih unggul dalam pengembangan aplikasi desktop, atau bahkan untuk membuat sistem robotika. Khusus untuk pemrograman website, bahasa program yag paling disaranka untuk dipakai adalah JavaScript dan PHP karena keduanya dirancang untuk membantu fungsionalitas dari sebuah website.</p>\r\n</div>\r\n\r\n<h3>Program Website</h3>\r\n\r\n<div class="wrapper-content">\r\n<p style="text-align: center;"><img alt="gapps" src="http://localhost/helloworld/assets/img/gapp.png" style="width: 300px; height: 228px;" title="aplikasi google" /></p>\r\n\r\n<p>Seringnya saat membuka web browser dan ingin berselancar di internet, website <a href="https://www.google.com" target="_blank">google</a> adalah website pertama yang dikunjungi untuk mencari artikel apapun yang sedang dibutuhkan. Sekarang coba perhatikan beberapa teknologi yang dimiliki oleh website tersebut seperti <a href="https://mail.google.com" target="_blank">google mail</a> atau <a href="https://maps.google.co.id" target="_blank">google map</a>.</p>\r\n\r\n<p>Terdapat banyak hal di website tersebut, seperti teks, gambar, atau bahkan video, musik, dan animasi 3D. Ada begitu banyak sekali interaktivitas di mana-mana, seperti tombol, kotak pencarian, ikon, dll. Dan semua itu sudah didesain sedemikian rupa oleh <b>developer</b> dari website tersebut untuk memberikan fungsionalitas yang dapat membantu memenuhi apa yang kita butuhkan.</p>\r\n\r\n<p>Semua website tersebut dibangun dengan bahasa program, dari mulai bahasa markup HTML, bahasa desain CSS, interaktifitas dari JavaScript dan beberapa bahasa program server yang semua materinya akan kita pelajari di website ini.</p>\r\n</div>\r\n\r\n<h3>Belajar Website</h3>\r\n\r\n<div class="wrapper-content">\r\n<p>Banyak forum-forum tanya jawab aktif seputar dunia programing seperti pada situs <a href="https://stackoverflow.com" target="_blank">stackoverflow</a>, yang bisa membantu kita dalam proses belajar jika menemukan suatu masalah terhadap kode program yang kita tulis dan tentunya semua kontennya dalam bahasa inggris. Sebagian besar orang terutama yang masih awam dengan dunia programing, biasanya merasa kesulitan dalam proses belajar memahami kode program yang notabene semuanya juga memakai bahasa inggris.</p>\r\n\r\n<p>Untuk itulah kehadiran website ini dapat sedikit membantu para programer pemula yang ingin serius untuk bisa programing dengan memberikan materi pembelajaran yang ringkas dan mudah dipahami dan tentunya dalam bahasa Indonesia.</p>\r\n\r\n<p>Agar bisa membuat program website yang terdiri dari tampilan berbagai macam komponen, ada beberapa hal dasar yang perlu kita ketahui, di antaranya adalah :</p>\r\n\r\n<ul>\r\n	<li>Apa saja elemen yang ada di halaman tersebut</li>\r\n	<li>Bagaimana tampilan elemennya</li>\r\n	<li>Apa fungsi dari tiap elemen dan bagaimana bisa</li>\r\n</ul>\r\n\r\n<p>Secara sederhana, sebuah halaman website atau program website tersebut terdiri dari struktur, ditambah dengan desain tampilan, kemudian ditambah dengan interaktivitas. Ketiga hal ini bisa kita buat dengan komponen dasar yaitu dengan bahasa HTML, CSS dan JavaScript. Semua hal yang berkaitan dengan tampilan terluar ini juga disebut dengan istilah <b>Front End</b> atau kategori program yang fokus pada desain tampilan.</p>\r\n\r\n<p>Sedangkan, jika fungsionalitas program nantinya akan diberikan fitur untuk menampung dan mengolah berbagai data dari para pengunjungnya, maka perlu ditambahkan komponen bahasa program yang lain, yaitu bahasa program yang bisa berhubungan dengan database dan akan dijalankan di sisi komputer server atau bisa disebut <b>Back End</b>.</p>\r\n\r\n<p>Langkah pertama untuk belajar pemrograman website adalah mengenal tentang HTML sebagai pondasi utama dari segala yang ditampilkan dari sebuah halaman website. Pembahasan tentang HTML ini akan kita bahas pada materi berikutnya.</p>\r\n</div>\r\n', '797', 0, 1570690809, 1573706857);

-- --------------------------------------------------------

--
-- Table structure for table `tutor_cat`
--

CREATE TABLE IF NOT EXISTS `tutor_cat` (
  `id` int(11) NOT NULL,
  `_id` int(11) NOT NULL,
  `_name` varchar(128) NOT NULL,
  `_code` text NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tutor_cat`
--

INSERT INTO `tutor_cat` (`id`, `_id`, `_name`, `_code`) VALUES
(1, 1, 'html', '<div><img src="http://localhost/assets/img/feed/hai.gif"></div>\n<h1>Hallo Semuanya...</h1>\n<h3>Apakah kamu ingin belajar programing website ?</h3>\n<h3>Jika iya...</h3>\n<p>Mari belajar bersama kami dengan memakai Live Code Editor ini.</p>\n<h1>Selamat Belajar</h1>\n\n<style>\nbody { background: #cecece; font-family: Sans-Serif; text-align: center; }\nh1 { font-family: Stencil, fantasy; letter-spacing: 2px; }\ndiv { \nbackground-color: #fff;\nwidth: 100px;\nborder: 2px solid;\npadding: 20px;\nmargin: 10px auto;\ntransition: 0.3s ease-out;\n}\ndiv:hover { border-radius: 50%; cursor: pointer; }\n</style>'),
(2, 2, 'css', '<div><img src="http://localhost/assets/img/feed/hai.gif"></div>\n<h1>Hallo Semuanya...</h1>\n<h3>Apakah kamu ingin belajar programing website ?</h3>\n<h3>Jika iya...</h3>\n<p>Mari belajar bersama kami dengan memakai Live Code Editor ini.</p>\n<h1>Selamat Belajar</h1>\n\n<style>\nbody { background: #cecece; font-family: Sans-Serif; text-align: center; }\nh1 { font-family: Stencil, fantasy; letter-spacing: 2px; }\ndiv { \nbackground-color: #fff;\nwidth: 100px;\nborder: 2px solid;\npadding: 20px;\nmargin: 10px auto;\ntransition: 0.3s ease-out;\n}\ndiv:hover { border-radius: 50%; cursor: pointer; }\n</style>'),
(3, 3, 'javascript', '<style>\n body { background: #cecece; font-family: Sans-Serif; text-align: center; }\n h1 { font-family: fantasy; letter-spacing: 2px; }\n #selector { cursor: pointer; background-color: white; width: 100px; height: 100px; padding: 20px; margin: 10px auto; transition: 0.3 ease; }\n #selector:hover { border-radius: 50%; }\n #target { display: none; } \n</style>\n<body>\n <h1>Hallo Semuanya...</h1>\n <div id="selector">\n  <img src="http://localhost/assets/img/feed/hai.gif">\n </div>\n <h3>Apakah kamu ingin belajar programing website ?</h3>\n <h3>Jika iya, coba klik gambar di atas</h3>\n <div id="target">\n  <p>Di sini kamu bisa belajar tentang cara membuat interaktifitas di dalam sebuah halaman website.</p>\n  <p>Kami pastikan kamu tidak akan kesulitan mengikuti pelajaran kami dengan memakai Live Code Editor ini.</p>\n  <h1>Selamat Belajar</h1>\n </div>\n</body>\n<script>\n var x = document.getElementById(''selector'');\n var y = document.getElementById(''target'');\n x.addEventListener(''click'', function(){\n y.style.display = "block";\n }); \n</script>');

-- --------------------------------------------------------

--
-- Table structure for table `tutor_lev`
--

CREATE TABLE IF NOT EXISTS `tutor_lev` (
  `id` int(11) NOT NULL,
  `_id` varchar(11) NOT NULL,
  `_cat` int(11) NOT NULL,
  `_name` varchar(128) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `tutor_lev`
--

INSERT INTO `tutor_lev` (`id`, `_id`, `_cat`, `_name`) VALUES
(1, 'h1', 1, 'HTML Dasar'),
(2, 'c1', 2, 'CSS Dasar'),
(3, 'j1', 3, 'JS Dasar'),
(4, 'h2', 1, 'HTML5'),
(5, 'c2', 2, 'CSS3'),
(6, 'j2', 3, 'JS DOM'),
(7, 'h3', 1, 'HTML Lanjutan'),
(8, 'c3', 2, 'CSS Lanjutan'),
(9, 'j3', 3, 'JS Lanjutan');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL,
  `u_id` varchar(11) NOT NULL,
  `u_provider` enum('local','facebook') NOT NULL DEFAULT 'local',
  `u_role` int(1) NOT NULL,
  `u_username` varchar(128) NOT NULL,
  `u_email` varchar(128) NOT NULL,
  `u_password` varchar(255) NOT NULL,
  `u_active` int(1) NOT NULL,
  `u_register` int(11) NOT NULL,
  `u_modified` int(11) NOT NULL,
  `u_image` varchar(256) NOT NULL,
  `u_name` varchar(256) NOT NULL,
  `u_gender` enum('Laki-laki','Perempuan') NOT NULL,
  `u_bio` text NOT NULL,
  `u_web` varchar(256) NOT NULL,
  `u_isNew` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `u_id`, `u_provider`, `u_role`, `u_username`, `u_email`, `u_password`, `u_active`, `u_register`, `u_modified`, `u_image`, `u_name`, `u_gender`, `u_bio`, `u_web`, `u_isNew`) VALUES
(1, '322184916', 'local', 2, 'ngadiono', 'ngadiono@gmail.com', '$2y$10$WzgezMuEvZdBmefxKfMznOs1lEiHATxW79Ch1W5C.My63ZW6lZngq', 1, 1553255356, 1567259063, 'hello.gif', 'raden ngadionox', 'Laki-laki', '', 'http://helloworlds.epizy.com', 1),
(2, '406080404', 'local', 1, 'superadmin', 'naflafam@gmail.com', '$2y$10$y8AEjroE5z3xyn68b.nkteUrONKp5Rav57AS/y5tLWUc3QuPd4GoO', 1, 1554512644, 1570634257, 'hello1.gif', 'super', 'Laki-laki', 'pemalas', 'https://google.com', 1),
(25, '925031242', 'facebook', 3, 'maftukhim alfan', 'rootalphand@gmail.com', '', 1, 1569355962, 1569355962, 'https://platform-lookaside.fbsbx.com/platform/profilepic/?asid=2274272785965571&height=50&width=50&ext=1571947963&hash=AeQI1xom4MKl2usZ', 'Maftukhim Alfan', 'Laki-laki', '', '', 1),
(29, '1002212046', 'local', 3, 'michael badros', 'nmrtelu@gmail.com', '$2y$10$/yOHcVUN.H5Z/vqgimlwd.cn4zOU/Dn0mbtPKuyhnj2q0OM/po4BS', 1, 1570026046, 1571511179, 'semangka.gif', 'michael badros', 'Laki-laki', '', '', 1);

-- --------------------------------------------------------

--
-- Table structure for table `user_comment`
--

CREATE TABLE IF NOT EXISTS `user_comment` (
  `id` int(11) NOT NULL,
  `id_user` varchar(128) NOT NULL,
  `id_target` varchar(10) NOT NULL,
  `message` text NOT NULL,
  `created` varchar(128) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=77 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_comment`
--

INSERT INTO `user_comment` (`id`, `id_user`, `id_target`, `message`, `created`, `status`) VALUES
(1, '322184916', 'ywz2ru', 'komentar ngadiono ke 1 untuk alfan', '1571067787', 1),
(2, '406080404', 'ywz2ru', 'ok terima kasih atas komentarnya', '1571118846', 1),
(3, '322184916', 'ywz2ru', 'komentar ngadiono ke 2 untuk alfan', '1571077787', 1),
(4, '406080404', 'ywz2ru', 'saya koment lagi', '1571202124', 1),
(5, '1002212046', 'ywz2ru', 'saya ikut komentar', '1571226475', 1),
(6, '406080404', 'ywz2ru', 'komentar lagi boleh ngga? <h1>hello</h1>', '1571298577', 1),
(7, '406080404', 'ywz2ru', '&lt;h1&gt;hello&lt;/h1&gt;', '1571300725', 1),
(8, '322184916', 'ywz2ru', 'saya komentar lagi', '1571383677', 1),
(9, '322184916', 'ywz2ru', 'komentar sekali lagi', '1571383823', 1),
(10, '322184916', 'ywz2ru', 'sekali lagi komentar', '1571385258', 1),
(11, '322184916', 'ywz2ru', 'komentar maneh', '1571385354', 1),
(12, '322184916', 'ywz2ru', 'komentar lebih banyak', '1571385678', 1),
(13, '322184916', 'ywz2ru', 'komentar entah yang keberapa', '1571385856', 1),
(14, '322184916', 'ywz2ru', 'jangkrek kok gak ndang melbu komentarku', '1571385906', 1),
(15, '322184916', 'ywz2ru', 'percobaan sekali lagi', '1571386050', 1),
(16, '322184916', 'ywz2ru', 'lagi dan lagi', '1571386182', 1),
(17, '322184916', 'ywz2ru', 'akhirnya berhasil juga', '1571386370', 1),
(18, '322184916', 'ywz2ru', 'akhirnya berhasil juga hahaha', '1571386413', 1),
(43, '406080404', 'xfgmb9', 'komeng kkome', '1573046448', 1),
(63, '406080404', 'xfgmb9', 'domcmeocmemo', '1573057658', 1),
(67, '406080404', 'xfgmb9', 'komentar menuju scroll', '1573246750', 1),
(68, '406080404', 'xfgmb9', 'coba lagi', '1573246925', 1),
(26, '406080404', 'u4hqtp', 'komentar lagi donk', '1571409700', 1),
(27, '406080404', 'u4hqtp', 'komentar lagi ah', '1571415852', 1),
(40, '406080404', 'ywz2ru', '&lt;script&gt;hai&lt;/script&gt;', '1571703804', 1),
(41, '406080404', 'ywz2ru', '&lt;body&gt;\n  &lt;h1&gt;hello wooorld&lt;/h1&gt;\n&lt;/body&gt;', '1571703846', 1),
(32, '406080404', 'u4hqtp', 'test komentar setelah diberi limit', '1571467495', 1),
(42, '406080404', 'ywz2ru', 'saya komentar', '1572615577', 1),
(35, '406080404', 'u4hqtp', 'komentar saya', '1571559133', 1),
(36, '406080404', 'u4hqtp', 'saya komentarlagi', '1571559206', 1),
(62, '406080404', 'xfgmb9', 'ssssssssssssss', '1573057585', 1),
(61, '406080404', 'xfgmb9', 'huhuhuhu', '1573057548', 1),
(60, '406080404', 'xfgmb9', 'hehehe', '1573057018', 1),
(59, '406080404', 'xfgmb9', 'wkwkwkwk', '1573056928', 1),
(55, '406080404', 'ywz2ru', 'komentar', '1573055189', 1),
(56, '406080404', 'xfgmb9', 'komentar', '1573056529', 1),
(57, '406080404', 'xfgmb9', 'hahahahah', '1573056838', 1),
(58, '406080404', 'xfgmb9', 'hihihihi', '1573056848', 1),
(64, '406080404', 'xfgmb9', 'sxdxdd', '1573057695', 1),
(66, '406080404', 'xfgmb9', 'saya komentar', '1573245328', 1),
(69, '406080404', 'xfgmb9', 'lagi ah', '1573247013', 1),
(70, '406080404', 'xfgmb9', 'lagi x', '1573247114', 1),
(71, '406080404', 'xfgmb9', 'pecobaan', '1573247152', 1),
(72, '406080404', 'xfgmb9', 'cccccccccccccc', '1573247417', 1),
(73, '406080404', 'xfgmb9', 'zzzzzzzzzzzzz', '1573247688', 1),
(74, '406080404', 'xfgmb9', 'zzzzm mzmz', '1573247771', 1),
(75, '406080404', 'xfgmb9', 'saya komentar lagi', '1573276353', 1),
(76, '406080404', 'xfgmb9', 'coba lagi', '1573481890', 1);

-- --------------------------------------------------------

--
-- Table structure for table `user_cookie`
--

CREATE TABLE IF NOT EXISTS `user_cookie` (
  `id` int(11) NOT NULL,
  `created` varchar(11) DEFAULT '0',
  `expired` varchar(11) DEFAULT '0',
  `token` varchar(128) DEFAULT NULL,
  `email` varchar(128) DEFAULT NULL,
  `ip` varchar(20) DEFAULT NULL,
  `agent` varchar(150) DEFAULT NULL
) ENGINE=MyISAM AUTO_INCREMENT=251 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_cookie`
--

INSERT INTO `user_cookie` (`id`, `created`, `expired`, `token`, `email`, `ip`, `agent`) VALUES
(249, '1573110586', '1604646586', 'e93deb592f2d72d90c2df15ffef2c91478085926', 'naflafam@gmail.com', '::1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36');

-- --------------------------------------------------------

--
-- Table structure for table `user_liked`
--

CREATE TABLE IF NOT EXISTS `user_liked` (
  `id` bigint(20) NOT NULL,
  `id_user` varchar(100) NOT NULL,
  `id_target` varchar(20) NOT NULL,
  `created` varchar(100) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_liked`
--

INSERT INTO `user_liked` (`id`, `id_user`, `id_target`, `created`, `status`) VALUES
(1, '322184916', 'ywz2ru', '1571209832', 1),
(3, '406080404', 'me3yx6', '1573112767', 1),
(4, '406080404', 'u4hqtp', '1573113655', 1),
(5, '406080404', 'xfgmb9', '1573244809', 1),
(6, '406080404', 'ywz2ru', '1573875672', 1);

-- --------------------------------------------------------

--
-- Table structure for table `user_progress`
--

CREATE TABLE IF NOT EXISTS `user_progress` (
  `id` int(11) NOT NULL,
  `id_snip` int(11) NOT NULL,
  `id_user` int(11) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=21 DEFAULT CHARSET=utf32;

-- --------------------------------------------------------

--
-- Table structure for table `user_secure`
--

CREATE TABLE IF NOT EXISTS `user_secure` (
  `id` int(11) NOT NULL,
  `user` varchar(128) NOT NULL,
  `ip` varchar(128) NOT NULL,
  `agent` varchar(256) NOT NULL,
  `created` varchar(128) NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_secure`
--

INSERT INTO `user_secure` (`id`, `user`, `ip`, `agent`, `created`, `status`) VALUES
(1, 'naflafam@gmail.com', '::1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36', '1571156488', 1),
(2, 'naflafam@gmail.com', '::1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36', '1573017645', 1),
(3, 'naflafam@gmail.com', '::1', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36', '1573017705', 1);

-- --------------------------------------------------------

--
-- Table structure for table `validate`
--

CREATE TABLE IF NOT EXISTS `validate` (
  `id` int(11) NOT NULL,
  `email` varchar(128) CHARACTER SET utf32 NOT NULL,
  `token` varchar(128) CHARACTER SET utf32 NOT NULL,
  `created` int(11) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=43 DEFAULT CHARSET=utf8;

--
-- Indexes for dumped tables
--

--
-- Indexes for table `bug`
--
ALTER TABLE `bug`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `login`
--
ALTER TABLE `login`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `notification`
--
ALTER TABLE `notification`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `snip`
--
ALTER TABLE `snip`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `snip_cat`
--
ALTER TABLE `snip_cat`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `snip_cdn`
--
ALTER TABLE `snip_cdn`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `timeline`
--
ALTER TABLE `timeline`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `relation` (`relation`);

--
-- Indexes for table `tutors`
--
ALTER TABLE `tutors`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tutor_cat`
--
ALTER TABLE `tutor_cat`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tutor_lev`
--
ALTER TABLE `tutor_lev`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_comment`
--
ALTER TABLE `user_comment`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_cookie`
--
ALTER TABLE `user_cookie`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_liked`
--
ALTER TABLE `user_liked`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id_suka` (`id`);

--
-- Indexes for table `user_progress`
--
ALTER TABLE `user_progress`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_secure`
--
ALTER TABLE `user_secure`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `validate`
--
ALTER TABLE `validate`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `bug`
--
ALTER TABLE `bug`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT for table `login`
--
ALTER TABLE `login`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=29;
--
-- AUTO_INCREMENT for table `notification`
--
ALTER TABLE `notification`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=3;
--
-- AUTO_INCREMENT for table `snip`
--
ALTER TABLE `snip`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=45;
--
-- AUTO_INCREMENT for table `snip_cat`
--
ALTER TABLE `snip_cat`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=6;
--
-- AUTO_INCREMENT for table `snip_cdn`
--
ALTER TABLE `snip_cdn`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=14;
--
-- AUTO_INCREMENT for table `timeline`
--
ALTER TABLE `timeline`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=14;
--
-- AUTO_INCREMENT for table `tutors`
--
ALTER TABLE `tutors`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=67;
--
-- AUTO_INCREMENT for table `tutor_cat`
--
ALTER TABLE `tutor_cat`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `tutor_lev`
--
ALTER TABLE `tutor_lev`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=10;
--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=33;
--
-- AUTO_INCREMENT for table `user_comment`
--
ALTER TABLE `user_comment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=77;
--
-- AUTO_INCREMENT for table `user_cookie`
--
ALTER TABLE `user_cookie`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=251;
--
-- AUTO_INCREMENT for table `user_liked`
--
ALTER TABLE `user_liked`
  MODIFY `id` bigint(20) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `user_progress`
--
ALTER TABLE `user_progress`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=21;
--
-- AUTO_INCREMENT for table `user_secure`
--
ALTER TABLE `user_secure`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `validate`
--
ALTER TABLE `validate`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=43;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
