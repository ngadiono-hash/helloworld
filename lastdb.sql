-- phpMyAdmin SQL Dump
-- version 4.4.15.9
-- https://www.phpmyadmin.net
--
-- Host: localhost
-- Generation Time: Jul 23, 2020 at 03:15 PM
-- Server version: 5.6.37
-- PHP Version: 5.6.31

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `database`
--

-- --------------------------------------------------------

--
-- Table structure for table `access`
--

CREATE TABLE IF NOT EXISTS `access` (
  `id` int(11) NOT NULL,
  `keyword` varchar(258) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `access`
--

INSERT INTO `access` (`id`, `keyword`) VALUES
(1, '$2y$10$SOBCuiURezE1FaUoPCvMDOn1kNaXnjF391Ug0bf3fvmxTONuagEYu');

-- --------------------------------------------------------

--
-- Table structure for table `boards`
--

CREATE TABLE IF NOT EXISTS `boards` (
  `id` int(11) NOT NULL,
  `user` varchar(25) NOT NULL,
  `level` varchar(256) NOT NULL,
  `score` float NOT NULL,
  `spent` int(11) NOT NULL,
  `date` varchar(256) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `boards`
--

INSERT INTO `boards` (`id`, `user`, `level`, `score`, `spent`, `date`) VALUES
(2, 'tobirama', 'beginner', 89, 3223, '1594988374436'),
(3, 'sarutobi', 'medium', 100, 8059, '1594989662759'),
(4, 'sasuke', 'beginner', 76, 3234, '1594985970226'),
(8, 'orochimaru', 'beginner', 98, 2347, '1594985561863'),
(5, 'kakashi', 'medium', 100, 4232, '1594999856018'),
(6, 'obito', 'beginner', 81, 2221, '1594988317700'),
(7, 'naruto', 'beginner', 89, 1111, '1594989025066'),
(9, 'neji', 'beginner', 79, 3224, '1594986078878'),
(10, 'kabuto', 'medium', 43, 3324, '1594999966696'),
(11, 'itachi', 'beginner', 80, 4324, '1594988265447'),
(12, 'azuma', 'medium', 82, 4314, '1594999973547'),
(13, 'tobi', 'beginner', 82, 3112, '1594988357804'),
(14, 'guy', 'beginner', 56, 8314, '1594989107587'),
(15, 'tsunade', 'medium', 88, 7314, '1594999959765'),
(16, 'jiraya', 'medium', 89, 7712, '1594999982903'),
(17, 'minato', 'medium', 73, 4712, '1594999952942'),
(18, 'shikamaru', 'medium', 66.67, 14558, '1595260455870'),
(19, 'karin', 'medium', 74, 4212, '1594999943084'),
(20, 'hinata', 'medium', 74, 7212, '1594999963475'),
(22, 'deidara', 'beginner', 70, 1112, '1594988331395');

-- --------------------------------------------------------

--
-- Table structure for table `level`
--

CREATE TABLE IF NOT EXISTS `level` (
  `id` int(11) NOT NULL,
  `name` varchar(128) NOT NULL,
  `description` text NOT NULL,
  `content` text NOT NULL,
  `image` varchar(128) NOT NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `level`
--

INSERT INTO `level` (`id`, `name`, `description`, `content`, `image`) VALUES
(1, 'beginner', 'JavaScript Dasar', 'Belajar tentang karakter bahasa program JavaScript dengan mengenal syntax penulisannya dari yang paling dasar. Mengetahui segala macam istilah di dalam JavaScript beserta fungsinya yang telah disediakan. Materi yang sangat sesuai untuk para pemula yang sebelumnya belum pernah mengenal apa itu pemrograman', 'jsbasic.png'),
(2, 'medium', 'JavaScript Medium', 'Belajar tentang apa itu yang disebut sebagai DOM. Memanipulasi halaman web menjadi lebih interaktif dengan event di JavaScript. Mengenal function  JavaScript yang lebih powerfull. Materi belajar JavaScript untuk praktek membuat desain halaman website menjadi lebih elegan', 'jsmedium.png'),
(3, 'advance', 'JavaScript Lanjutan', 'Belajar memahami bahasa program JavaScript dalam tingkat lanjutan. Fitur dan syntax yang lebih baru dari JavaScript versi modern. Mengenal apa itu prototype dan konsep class di JavaScript. Akan lebih bermanfaat saat kamu ingin menggunakan framework atau library JavaScript yang sedang poluler saat ini.', 'jsadvance.png');

-- --------------------------------------------------------

--
-- Table structure for table `materi`
--

CREATE TABLE IF NOT EXISTS `materi` (
  `id` int(10) unsigned NOT NULL,
  `les_id` varchar(128) NOT NULL,
  `les_level` varchar(64) NOT NULL,
  `les_order` int(11) NOT NULL,
  `les_title` varchar(128) NOT NULL,
  `les_slug` varchar(256) NOT NULL,
  `les_key` text,
  `les_publish` int(1) NOT NULL DEFAULT '0',
  `les_content` longtext NOT NULL,
  `les_length` int(11) NOT NULL DEFAULT '0',
  `les_upload` int(128) NOT NULL,
  `les_update` int(128) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=40 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `materi`
--

INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(1, 'BDMJggi', 'beginner', 5, 'JS Script', 'Script pada Dokumen HTML', 'javascript inline,javascript internal,javascript external', 1, '<p>Untuk membuat program JavaScript, selain memahami syntax aturan penulisan, kita juga diharuskan untuk mengetahui pula tata cara penempatan script di dalam dokumen HTML.</p>\n\n<p>Penulisan kode JavaScript bisa dilakukan dengan beberapa metode. Dari beberapa metode ini, ada 3 tata cara penempatan script yang paling umum digunakan oleh web developer, yaitu metode inline, internal, dan external.</p>\n\n<p>Sama halnya jika sebelumnya kita sudah familiar dengan cara penggunaan CSS sebagai pengatur desain pada dokumen HTML, JavaScript pun memiliki pola penempatan yang sama di dalam sebuah dokumen HTML.</p>\n\n<p>Berikut ini adalah penjelasan masing-masing metodenya.</p>\n\n<h3>JavaScript Inline</h3>\n\n<div class="wrapper-content">\n<p>Metode inline bisa kita gunakan jika kode JavaScript hanya sedikit seperti halnya jika hanya ingin menampilkan alert pada saat mengklik sebuah tombol. Atau bisa juga digunakan sebagai pemicu untuk menjalankan function dari kode JavaScript. Cara penulisannya yaitu kode JavaScript dimasukkan sebagai nilai attribute di dalam elemen HTML yang nama attributenya mengacu pada event yang dikehendaki.</p>\n\n<pre class="line-numbers">\n<code>&lt;tag attributeEvent="kodeJavaScript"&gt; konten &lt;/tag&gt;</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Penulisan Script&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Inline&lt;/h1&gt;\n\n  &lt;h3&gt;Klik tombol untuk menampikan waktu saat ini&lt;/h3&gt;\n  &lt;button onclick="alert(Date())"&gt;klik saya&lt;/button&gt;\n  &lt;h3&gt;Arahkan pointer ke element span untuk mengubah kontennya&lt;/h3&gt;\n  &lt;span onmouseenter="this.innerHTML=''belajar JavaScript''"&gt;belajar HTML&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Selain event klik (<code>onclick</code>) dan event mouse (<code>onmouseenter</code>) pada contoh di atas, masih ada lebih banyak lagi event lainnya yang bisa dimanfaatkan sesuai keperluan. Akan tetapi penggunaan metode ini disarankan agar ditinggalkan karena penggunaanya terkesan tidak rapi.</p>\n</div>\n\n<h3>JavaScript Internal</h3>\n\n<div class="wrapper-content">\n<p>Penempatan script dengan metode internal merupakan metode yang paling umum digunakan para developer, yaitu dengan menulis kodenya di dalam tag HTML berupa tag <code class="language-html">&lt;script&gt;</code>. Tag ini bisa ditempatkan di dalam tag head ataupun di dalam tag body pada struktur dokumen HTML.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Penulisan Script&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Internal JavaScript&lt;/h1&gt;\n  \n  &lt;h3&gt;Apa yang kalian tahu tentang JavaScript?&lt;/h3&gt;\n  &lt;button id="btn"&gt;JAWAB&lt;/button&gt;\n    \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert("JavaScript adalah bahasa program untuk front-end website");\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Perlu diketahui juga bahwa jika kode JavaScript sudah berhubungan dengan beberapa element di dalam sebuah dokumen HTML seperti pada contoh di atas, penempatan tag script ini perlu diperhatikan.</p>\n\n<p>Dalam kondisi normal, saat browser menjalankan dan menerjemahkannya menjadi tampilan website, source code yang telah kita tulis akan dimuat secara berurutan dari kiri ke kanan dan berlanjut ke baris bawahnya sampai mencapai akhir baris.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Penulisan Script&lt;/title&gt;\n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert("JavaScript adalah bahasa program untuk front-end website");\n  };\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Internal JavaScript&lt;/h1&gt;\n  \n  &lt;h3&gt;Apa yang kalian tahu tentang JavaScript?&lt;/h3&gt;\n  &lt;button id="btn"&gt;JAWAB&lt;/button&gt;\n\n  &lt;p class="explain"&gt;\n    Penempatan tag script di atas akan menghasilkan error. Meski halaman HTML berhasil dimuat, tetapi fungsionalitasnya tidak berjalan sebagaimana mestinya.\n    Hal itu dikarenakan pada baris ke-6, yang dilakukan oleh JavaScript adalah mengambil element HTML yang memiliki id "btn", sedangkan element tersebut baru terdeteksi pada baris ke-16, sehingga nilai dari variable tombol menjadi null dan terjadi error.\n  &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold">Selalu tempatkan script di akhir dokumen sebelum tag penutup body untuk menghindari kemungkinan error yang tidak diinginkan.</p>\n</div>\n\n<h3>JavaScript External</h3>\n\n<div class="wrapper-content">\n<p>Metode terakhir yaitu metode penulisan JavaScript secara external. Hal ini sama persis seperti metode external CSS. Kita bisa menempatkan kode JavaScript secara terpisah di file berbeda tanpa menuliskan kode di dalam tag script seperti pada metode internal.</p>\n\n<p>File JavaScript terpisah tersebut kemudian disimpan dengan nama file yang harus berekstensi <code>.js</code>. Untuk menghubungkannya dengan file HTML, diharuskan untuk memanggilnya dengan tag <code class="language-html">&lt;script&gt;</code> kosong dan ditambahkan attribute <code>src</code> dengan nilai berupa URL tempat file JavaScript itu berada, baik menggunakan URL relative ataupun absolute.</p>\n\n<p>Di dalam contoh berikut ini, konsepnya sama persis seperti contoh JavaScript Internal yaitu disediakan sebuah tombol untuk menjalankan program. Yang perlu dilakukan adalah menuliskan kode JavaScript di file <code>.js</code> kemudian memanggilnya ke dalam dokumen HTML.</p>\n\n<p>Berikut ini adalah baris kode dari file JavaScript yang bernama <strong>js-external.js</strong> yang kita tempatkan di dalam folder <strong>assets/</strong> dan kita akan menghubungkan file ini dengan menggunakan URL absolute.</p>\n\n<pre>\n<code class="language-javascript">var tombol = document.getElementById(''btn'');\ntombol.addEventListener(''click'',function(){\n  document.write(''&lt;h1&gt;Selamat Belajar JavaScript&lt;/h1&gt;'');\n});</code></pre>\n\n<p></p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Penulisan Script&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;External JavaScript&lt;/h1&gt;\n  \n  &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n  consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n  cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n  proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;\n  \n  &lt;h3&gt;Lihat, apa yang bisa dilakukan tombol ini&lt;/h3&gt;\n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n  &lt;script src="http://localhost/helloworld/assets/js-external.js"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Pengguanaan metode ini adalah cara yang paling dianjurkan untuk diterapkan pada saat kita sudah memiliki website yang terdiri dari banyak halaman. Selain membuat tampilan dokumen HTML lebih rapi, metode external ini juga memungkinkan untuk kode JavaScript agar bisa dipakai di setiap halaman yang membutuhkan kode JavaScript dari file tersebut.</p>\n</div>\n\n<p class="note" style="font-weight:bold">Pada materi pembelajaran JavaScript ini, kami akan mendemonstrasikan kode-kode JavaScript hanya menggunakan metode inline dan juga metode internal. Hal ini dilakukan agar lebih mudah dalam penulisan dan untuk kemudahan memahami logika program.</p>\n', 786, 1554171121, 1595482598),
(2, 'ByTc2dL', 'beginner', 6, 'JS Output', 'Mencetak Output JavaScript', 'pop up alert,pop up prompt,pop up confirm,innerhtml,console', 1, '<p>Pada materi sebelumnya, kita telah mempraktekkan sedikit tentang bagaimana JavaScript agar bisa memunculkan hasil programnya ke layar. Pada materi ini, kita akan membahas lebih lanjut tentang cara apa saja yang bisa dilakukan untuk memunculkan hasil olahan kode JavaScript.</p>\n\n<p>Banyak cara yang bisa digunakan untuk mengeluarkan output JavaScript. Cara yang paling sering dan paling mudah untuk dilakukan adalah dengan memberikan instruksi agar JavaScript mengeluarkan output berupa kotak box pada browser atau yang disebut sebagai pop up box. Pada masing-masing browser baik itu di chrome atau firefox dan browser lainnya, tampilan dari pop up box ini bisa berbeda-beda namun tetap memiliki kegunaan yang sama.</p>\n\n<p>Adapun pop up box ini bisa terbagi menjadi 3 macam function, yaitu pop up<strong> </strong>alert, prompt, dan<strong> </strong>confirm. Istilah kata function di dalam JavaScript adalah untuk menunjukkan sebuah keyword itu digunakan oleh JavaScript untuk menjalankan suatu perintah tertentu yang akan ditandai dengan diakhirinya setiap kata menggunakan tanda kurung seperti function <code>alert()</code>, <code>prompt()</code> dan <code>confirm()</code>.</p>\n\n<h3>Pop up Alert</h3>\n\n<div class="wrapper-content">\n<p>Pop up <code>alert()</code> akan menampilkan pesan pada jendela browser. Untuk menggunakannya, function ini harus diisikan nilai yang ditempatkan di dalam tanda kurungnya, bisa berupa angka, karakter huruf atau bahkan function dari JavaScript lainnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Function Alert&lt;/h1&gt;\n  \n  &lt;button onclick="alert(3 + 4)"&gt;angka&lt;/button&gt;\n  &lt;button onclick="alert(''output javascript berupa text'')"&gt;text&lt;/button&gt;\n  &lt;button onclick="alert(Date())"&gt;function&lt;/button&gt;\n\n&lt;p class="explain"&gt;\n  Pada masing-masing tombol telah disisipkan alert JavaScript yang akan mengeluarkan output berbeda, yaitu angka, text atau string dan juga function JavaScript lainnya\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Pop up Prompt</h3>\n\n<div class="wrapper-content">\n<p>Pop up berupa <code>prompt()</code> bisa menampilkan box yang berisikan kolom input. Function ini akan mengembalikan nilai apapun yang diisikan ke dalam inputnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Function Prompt&lt;/h1&gt;\n  \n  &lt;button id="btn"&gt;prompt&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var kotak = prompt(''ketik apapun di sini:'');\n    alert(''kamu mengetikkan : '' + kotak);\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Ketika tombol diklik, pop up prompt akan menampilkan sebuah input.\n  Text yang ditulis di dalam tanda kurung akan ditampilkan sebagai label dari prompt.\n  Sedangkan nilai dari prompt akan diperoleh dari apapun yang akan diinputkan ke dalam prompt.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Pop up Confirm</h3>\n\n<div class="wrapper-content">\n<p>Pop up box yang terakhir yaitu <strong>confirm</strong> yang biasa digunakan untuk membuat kotak dialog berisi pesan konfirmasi sebuah tindakan antara &quot;<strong>Ya</strong>&quot; dan &quot;<strong>Tidak</strong>&quot; yang masing-masing diwakili oleh tombol <strong>OK</strong> dan <strong>Cancel</strong>. Function ini akan mengembalikan nilai berupa data <strong>BOOLEAN</strong> yaitu antara <strong>true</strong> atau <strong>false</strong>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Function Confirm&lt;/h1&gt;\n\n  &lt;button id="btn"&gt;confirm&lt;/button&gt;\n\n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var tes = confirm(''Benar atau Salah?'');\n    alert(tes);\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Munculkan dialog confirm pada tombol di atas.\n  Ketika tombol Ok ditekan, maka nilai yang dikembalikan di dalam alert adalah true,\n  sedangkan jika diklik tombol cancel maka nilai false yang akan dikembalikan.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Kita bisa memanfaatkan perilaku dari function ini untuk membuat sebuah program yang membutuhkan konfirmasi lebih lanjut terhadap tindakan selanjutnya. Biasanya hal ini digunakan saat kita ingin menghapus sebuah data di dalam komputer.</p>\n\n<p>Untuk membuat contoh confirm yang lebih nyata, diperlukan pemahaman tentang konsep pengkondisian di dalam bahasa program. Pengkondisian ini dimaksudkan agar program dapat berperilaku sesuai dengan kondisi yang berbeda.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Confirm dan Pengkodisian&lt;/h1&gt;\n\n  &lt;button id="btn"&gt;confirm&lt;/button&gt;\n\n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var tes = confirm(''apakah yang akan kamu pilih?'');\n    if (tes == true) {\n      alert(''kamu memilih OK'');\n    } else {\n      alert(''kamu memilih CANCEL'');\n    }\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>InnerHTML</h3>\n\n<div class="wrapper-content">\n<p>Setelah metode pop up window di atas, selanjutnya kita akan lanjut ke dalam metode untuk mencetak output secara langsung di dalam dokumen menggunakan perintah dengan keyword <code>innerHTML</code> dan juga <code>innerText</code>.</p>\n\n<p>Dari beberapa contoh demo di atas, kita sebenarnya sudah sedikit menyinggung tentang apa itu yang disebut sebagai konsep DOM. Sederhananya, DOM (<strong>Document Object Model</strong>) adalah kumpulan aturan untuk memanipulasi apapun yang tampil dalam halaman web. Element HTML yang tampil sebagai halaman web diatur sepenuhnya di dalam DOM. JavaScript menggunakan DOM untuk bisa berinteraksi dengan seluruh element HTML. Salah satu konsep DOM sederhana adalah dengan menyeleksi element HTML berdasarkan id nya yang umumnya dilakukan dengan perintah <code>getElementById()</code> kemudian memanipulasi element tersebut dengan memberikan perintah innerHTML.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;style&gt;\n  div { border: 1px solid red; padding: 5px; height: 100px; }\n&lt;/style&gt;  \n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;innerHTML dan innerText&lt;/h1&gt; \n  \n  &lt;div id="text"&gt;&lt;/div&gt;\n  \n  &lt;button id="btn1"&gt;innerHTML&lt;/button&gt;\n  &lt;button id="btn2"&gt;innerText&lt;/button&gt;\n\n&lt;script&gt;\n  var tombol1 = document.getElementById(''btn1'');\n  var tombol2 = document.getElementById(''btn2'');\n  \n  tombol1.onclick = function(){\n    var div = document.getElementById(''text'');\n    div.innerHTML = ''&lt;h3&gt;Selamat belajar JavaScript di My Note&lt;/h3&gt;'';\n  };\n  \n  tombol2.onclick = function(){\n    var div = document.getElementById(''text'');\n    div.innerText = ''&lt;h3&gt;Selamat belajar JavaScript di My Note&lt;/h3&gt;'';\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Perintah menggunakan keyword <code>innerHTML</code> digunakan untuk menuliskan element baru ke dalam dokumen. Sedangkan, perintah <code>innerText</code> digunakan untuk menuliskan text biasa ke dalam dokumen.</p>\n</div>\n\n<h3>Console</h3>\n\n<div class="wrapper-content">\n<p>Salah satu yang menarik dalam belajar JavaScript adalah dengan adanya mesin console yang sudah secara default tertanam di dalam web browser. Console ini adalah <em>&quot;teman sejati&quot;</em> kita dalam belajar JavaScript. Dengan console ini kita bisa menuliskan kode JavaScript secara langsung di dalam tab console tanpa perlu text editor sebagai media. Kita juga bisa menuliskan kode di dalam text editor untuk ditampilkan outputnya pada tab console.</p>\n\n<p>Keyword yang digunakan untuk melakukan perintah ini adalah <code>console.log()</code>. Saat program dijalankan, tab console akan menampilkan apa saja yang dituliskan ada di dalam tanda kurung.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Console&lt;/h1&gt;\n\n  &lt;button id="btn"&gt;console.log()&lt;/button&gt;\n\n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var angka = 10 + 13;\n    console.log(''hasil penjumlahannya adalah '' + angka);\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Buka developer tools console kemudian klik tombol di atas.\n  Console akan menampilkan output operasi penjumlahan dari 10 + 13.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Selain bisa mengeluarkan output dari JavaScript sesuai perintah, console ini juga akan bertindak sebagai petunjuk apabila kita melakukan kesalahan dalam menulis kode JavaScript. Istlah ini biasa disebut sebgai <strong>debugging</strong> Kesalahan yang kita lakukan bisa bermacam-macam seperti kesalahan alur logika, pemuatan media dengan alamat URL yang salah, bahkan kesalahan syntax penulisan JavaScript juga akan ditampilkan di sini, lengkap dengan petunjuk di baris mana terjadinya kesalahan tersebut.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Output&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Console Debug&lt;/h1&gt;\n\n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var angka = 10 + 13;\n    console.log(''hasil penjumlahannya adalah '' + bangka);\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Buka developer tools tab console kemudian klik tombol di atas.\n  Perhatikan penulisan variable angka pada console.log(),\n  yang dengan sengaja, penulisan variablenya tidak sesuai.\n  Program akan berhenti berjalan dengan menampilkan notifikasi pada console pada statement yang mengalami error.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Jangan khawatir selama proses belajar jika mendapati kode JavaScript tidak berjalan, selalu ada console yang akan memberi tahu kita tentang penyebab kesalahan itu terjadi.</p>\n</div>\n\n<p class="note" style="font-weight:bold;">Metode output <code>alert()</code> dan <code>console.log()</code> akan sering kita gunakan untuk keperluan demonstrasi contoh kode yang akan dijalankan pada setiap materi JavaScript ini.</p>\n', 1095, 1554171121, 1593370914),
(3, 'Bq0ug2s', 'beginner', 4, 'JS Syntax', 'Aturan Penulisan JavaScript', 'statement,variable,operator,reserved keyword,comment,case sensitif,karakter spasi,karakter semicolon dan enter,aturan nama variable', 1, '<p>Setiap bahasa program pasti akan memiliki aturan penulisan syntax kodenya, tidak terkecuali dengan JavaScript. Ada bahasa program yang mengharuskan semua karakter hurufnya ditulis dalam huruf besar, ada juga yang mengharuskan menggunakan tanda semicolon di akhir barisnya. Begitu pula dengan istilah nama-nama yang dipakai dalam penyebutan setiap bagian dari kode. Karena yang kita pelajari adalah bahasa program, maka setiap karakter yang ditulis harus benar-benar kita pahami maksud dan kegunaannya. Pada materi ini, kita belajar mengenal beberapa istilah yang ada di dalam JavaScript berikut dengan aturan cara penulisannya yang benar.</p>\n\n<h3>Statement</h3>\n\n<div class="wrapper-content">\n<p>Statement adalah barisan instruksi atau sebuah perintah yang kita tulis dan yang akan dijalankan oleh mesin browser. Setiap baris ini akan dijalankan berurutan satu per satu dari kiri ke kanan kemudian berlanjut ke baris selanjutnya sampai dengan baris terbawah. Dalam sebuah program, biasanya akan terdapat banyak statement tergantung dari kompleksitas program yang dibuat.</p>\n\n<p>Penghitungan jumlah statement ini berdasarkan jumlah perintah atau instruksi yang akan dijalankan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Syntax&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Statement JavaScript&lt;/h1&gt;\n\n&lt;script&gt;\n  // statement pertama : membuatkan/ menyediakan nama variable\n  var str;\n  // statement kedua : mengisi variable dengan nilai berupa string\n  str = ''saya sedang belajar'';\n  // statement ketiga : menampilkan isi variable ke dalam console\n  console.log(str);\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Program ini terdiri dari 3 statement yang setiap statement diakhiri dengan tanda semicolon,\n  dan juga ditulis pada baris baru.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<ul>\n</ul>\n\n<h4>Case Sensitif</h4>\n\n<p>Setiap statement pada JavaScript umumnya bersifat case sensitif, yang artinya JavaScript sangat mempedulikan penulisan karakter huruf besar dan huruf kecil. Seperti pada nama variable, menulis kata <b>TEXT</b> tidak akan sama dengan <b>Text</b> dan juga tidak akan sama dengan <b>text</b>.</p>\n\n<h4>Karakter Spasi</h4>\n\n<p>Karakter yang ditulis dengan menekan tombol spasi atau tombol tab pada keyboard itu termasuk dalam hitungan satu karakter di dalam string yang akan diolah JavaScript. Akan tetapi karakter spasi dan tab yang tidak kelihatan ini akan diabaikan saat kita penulisan kode antar operator yang satu dengan operator yang lain.</p>\n\n<pre>\n<code class="language-javascript">// penulisan dengan spasi dan tab\n  var angka      =       11  +  22;\n\n// akan dianggap sama dengan\nvar angka=11+12;</code></pre>\n\n<h4>Karakter Semicolon dan Enter</h4>\n\n<p>Berbeda dari kebanyakan bahasa program lainnya, JavaScript tidak mengharuskan tanda semicolon ( <code>;</code> ) sebagai aturan penulisan untuk mengakhiri setiap baris statement nya. Di bahasa program PHP misalnya, jika lupa menuliskan tanda semicolon ini, maka akan terjadi error sedangkan di JavaScript hal itu akan diabaikan. Namun untuk kemudahan kita dalam membaca kode program yang telah kita tulis sendiri, penulisan tanda semicolon ini sebaiknya ditulis pada setiap akhir statement untuk menandai bahwa kita telah menulis satu dari beberapa instruksi lainnya yang akan ditulis.</p>\n\n<p>Hal yang sama berlaku pula pada karakter baris baru yang dimunculkan dengan menekan tombol enter pada keyboard. Sifatnya pun sebenarnya hanya optional, akan tetapi jika kita menulis kode tanpa karakter ini, maka kode yang akan kita tulis bisa sangat panjang dan susah dalam pembacaannya meski kode itu kita yang menulisnya sendiri.</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">// penulisan dengan baris baru tanpa tanda semicolon\nvar a\na\n=\n15\nconsole.log(a)\n\n// akan diartikan oleh JavaScript sebagai \nvar a; a = 15; console.log(a);</code></pre>\n\n<p>JavaScript mendeteksi baris baru sebagai penanda akhir dari statement baris program namun JavaScript juga akan mengenali maksud dari kode yang ditulis berdasarkan apa yang ditulis di baris selanjutnya.</p>\n</div>\n\n<h3>Variable</h3>\n\n<div class="wrapper-content">\n<p>Variable adalah tempat atau wadah yang memiliki nama untuk menyimpan sebuah nilai dalam lingkup yang spesifik. Nilai yang dimasukkan bisa berbeda-beda, bisa itu angka, bisa itu text atau lainnya. Variable ini akan selalu ada di setiap bahasa program.</p>\n\n<p>Di JavaScript, saat membuat variable, kita harus mengetahui tiga aspek penting yaitu <strong>declaration</strong>, <strong>initialize</strong>, dan <strong>assignment</strong>.</p>\n\n<ol>\n	<li>Declaration dilakukan untuk mendaftarkan nama variable ke dalam lingkup yang ditentukan.</li>\n	<li>Initialize dilakukan untuk menyediakan memori di dalam komputer untuk variable yang telah dibuat. Hal ini secara otomatis dilakukan setelah deklarasi variable.</li>\n	<li>Assignment dilakukan untuk menetapkan nilai secara spesifik ke dalam variable.</li>\n</ol>\n\n<p>Atau kita juga bisa melakukan semua prosesnya di dalam satu statement sekaligus.</p>\n\n<pre>\n<code class="language-javascript">var x;  // proses deklarasi sekaligus inisialisasi\nx = 20; // proses assignment\n  \n// atau semua proses dilakukan dalam satu statement sekaligus.\nvar x = 20; // deklarasi &amp; inisialisasi &amp; assignment</code></pre>\n\n<p>Keyword yang digunakan untuk membuat nama variable ini selain <code>var</code>, ada juga <code>let</code> dan <code>const</code>. Tetapi untuk pembelajaran JavaScript Dasar ini kita akan cenderung lebih banyak untuk menggunakan keyword <code>var</code>, karena <code>let</code> dan <code>const</code> akan kita bahas pada materi tentang konsep <strong>JavaScript Hoisting</strong>.</p>\n\n<h4>Aturan Nama Variable</h4>\n\n<p>Selain aturan utama dengan menuliskan keyword <code>var</code> sebelum nama variable, berikut ini adalah beberapa aturan dasar yang digunakan JavaScript untuk sebuah nama variable.</p>\n\n<ul>\n	<li>\n	<h5>Tidak menggunakan Reserved Word</h5>\n	</li>\n</ul>\n\n<p>Nama variable ini boleh dipilih bebas asal tidak memakai nama keyword yang sudah dipakai JavaScript sebagai syntax bahasanya seperti <code>if</code>, <code>while</code>, atau <code>function</code>. Lebih disarankan agar memilih nama yang relevan dengan nilainya.</p>\n\n<ul>\n	<li>\n	<h5>Tidak ada Spasi</h5>\n	</li>\n</ul>\n\n<p>Jika nama variable yang ingin dibuat terpaksa harus lebih dari satu kata, maka penulisannya tidak boleh menggunakan tanda spasi antar kata. Kita bisa mengganti tanda spasi ini dengan tanda underscore ( <code>_</code> ). Lebih disarankan menggunakan aturan <strong>camelCase</strong> yaitu menulis kata pertama dengan huruf kecil semua, kata kedua ditulis dengan diawali huruf kapital, begitu juga dengan kata ketiga dan seterusnya.</p>\n\n<ul>\n	<li>\n	<h5>Tidak diawali dengan Angka</h5>\n	</li>\n</ul>\n\n<p>Pemilihan nama variable tidak bisa diawali dengan karakter angka atau karakter-karakter khusus lainnya seperti ~!@#%^&amp;. JavaScript hanya membolehkan tanda dolar ( <code>$</code> ) dan tanda underscore ( <code>_</code> ) untuk mengawali nama variable. Sedangkan untuk karakter angka bisa digunakan sebagai nama variable jika berada di tengah kata ataupun di akhir kata.</p>\n\n<pre>\n<code class="language-javascript">// penulisan nama variable yang diperbolehkan\nvar boleh;\nvar _boleh;\nvar $boleh;\nvar boleh123;\nvar sangatBolehBanget;</code></pre>\n\n<ul>\n	<li>\n	<h5>Shorthand Variable</h5>\n	</li>\n</ul>\n\n<p>Jika kita memiliki sebuah kasus dimana kita melakukan deklarasi dan assignment terhadap nama-nama variable yang jumlahnya banyak, maka diperbolehkan menulisnya dengan penulisan shorthand atau penyingkatan.</p>\n\n<pre>\n<code class="language-javascript">// variable dalam penulisan shorthand\nvar boleh = "satu",\n    _boleh = "dua",\n    $boleh = "tiga",\n    boleh123 = "empat",\n    sangatBolehBanget = "lima";</code></pre>\n</div>\n\n<h3>Operator</h3>\n\n<div class="wrapper-content">\n<p>Hal yang sama pada matematika dasar, operator juga dipakai untuk mengolah data pada JavaScript, seperti perkalian, pembagian, penjumlahan, dan pengurangan. Namun untuk bahasa pemrograman, karakter yang digunakan sebagai operator ada lebih banyak lagi yang nantinya akan digolongkan menjadi beberapa kelompok seperti pada ilustrasi di bawah ini.</p>\n\n<pre>\n<code class="language-javascript">// operator di JavaScript\nx * y   // operator aritmatika/matematika (perkalian)\nz = 10  // operator penugasan/assignment\nx == y  // operator perbandingan\nx &amp;&amp; y  // operator logika\n"Belajar " + "JavaScript"; // operator string</code></pre>\n</div>\n\n<h3>Reserved Keyword</h3>\n\n<div class="wrapper-content">\n<p>Reserved keyword merupakan kata yang sudah dipakai oleh JavaScript sendiri sebagai bahasanya untuk mendefinisikan fungsi tertentu seperti keyword <code>var</code> yang berfungsi mendeklarasikan sebuah variable atau keyword <code>if else</code> yang digunakan untuk menguji sebuah kondisi. Kita tidak diperbolehkan memakai kata-kata ini untuk keperluan membuat nama variable atau nama function.</p>\n\n<div class="table-responsive">\n<table class="table table-striped" style="width: 100%;">\n	<tbody>\n		<tr>\n			<td>abstract</td>\n			<td>arguments</td>\n			<td>boolean</td>\n			<td>break</td>\n			<td>byte</td>\n		</tr>\n		<tr>\n			<td>case</td>\n			<td>catch</td>\n			<td>char</td>\n			<td>class</td>\n			<td>const</td>\n		</tr>\n		<tr>\n			<td>continue</td>\n			<td>debugger</td>\n			<td>default</td>\n			<td>delete</td>\n			<td>do</td>\n		</tr>\n		<tr>\n			<td>double</td>\n			<td>else</td>\n			<td>enum</td>\n			<td>eval</td>\n			<td>export</td>\n		</tr>\n		<tr>\n			<td>extends</td>\n			<td>false</td>\n			<td>final</td>\n			<td>finally</td>\n			<td>float</td>\n		</tr>\n		<tr>\n			<td>for</td>\n			<td>function</td>\n			<td>goto</td>\n			<td>if</td>\n			<td>implements</td>\n		</tr>\n		<tr>\n			<td>import</td>\n			<td>in</td>\n			<td>instanceof</td>\n			<td>int</td>\n			<td>interface</td>\n		</tr>\n		<tr>\n			<td>let</td>\n			<td>long</td>\n			<td>native</td>\n			<td>new</td>\n			<td>null</td>\n		</tr>\n		<tr>\n			<td>package</td>\n			<td>private</td>\n			<td>protected</td>\n			<td>public</td>\n			<td>return</td>\n		</tr>\n		<tr>\n			<td>short</td>\n			<td>static</td>\n			<td>super</td>\n			<td>switch</td>\n			<td>synchronized</td>\n		</tr>\n		<tr>\n			<td>this</td>\n			<td>throw</td>\n			<td>throws</td>\n			<td>transient</td>\n			<td>true</td>\n		</tr>\n		<tr>\n			<td>try</td>\n			<td>typeof</td>\n			<td>var</td>\n			<td>void</td>\n			<td>volatile</td>\n		</tr>\n		<tr>\n			<td>while</td>\n			<td>with</td>\n			<td>yield</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<h3>Comment</h3>\n\n<div class="wrapper-content">\n<p>Comment yang dimaksud disini adalah sebuah tanda yang digunakan untuk menandai bagian dari keseluruhan kode agar tidak dieksekusi oleh browser untuk ditampilkan ke layar. Tanda yang umum digunakan adalah tanda 2 slash atau garis miring ( <code>//</code> ).</p>\n\n<p>Hal ini bisa dimanfaatkan untuk menuliskan dokumentasi atau petunjuk bagi kita sendiri saat membaca kode. Atau juga untuk melarang browser agar tidak menjalankan bagian kode yang tidak ingin dijalankan, entah karena masih dalam tahap pembuatan atau ada kode yang sudah berfungsi di bagian lain.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Syntax&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;JavaScript Comment&lt;/h1&gt;\n  \n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  var tombol;\n  tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    // alert(''saya tidak akan tampil sebelum tanda komentar dihapus'');\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Agar tombol di atas dapat berfungsi, silahkan hapus tanda komentar pada baris ke 15\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 1188, 1554171121, 1593520288),
(4, 'BbrH283', 'beginner', 1, 'JS Program', 'Apa itu Pemrograman', 'definisi program,bahasa pemrograman,menjalankan program,memilih bahasa program,compiler,interpreter,compiler vs interpreter', 1, '<p>Bagi kalian yang masih sangat awam tentang dunia pemrograman komputer, artikel ini kami sediakan untuk membantu memahami tentang apa itu sebenarnya pemrograman. Untuk memahami pemrograman, kita harus paham terlebih dahulu tentang apa yang dimaksud dengan istilah <strong>program</strong>.</p>\n\n<h3>Definisi Program</h3>\n\n<div class="wrapper-content">\n<p>Program atau lebih khusus lagi yaitu program komputer adalah urutan instruksi terstruktur yang diberikan kepada komputer agar komputer tersebut dapat berperilaku sesuai dengan ketentuan dengan tujuan untuk menyelesaikan sebuah pekerjaan.</p>\n\n<p>Contoh program ini mungkin sebagian besar sudah pernah kita gunakan untuk membantu kita menyelesaikan tugas seperti mengetikkan dokumen di program Microsoft Word, atau mencari artikel di dalam website seperti Google dengan aplikasi browser atau aplikasi chatting seperti Whatsapp yang ada di dalam smartphone kita. Semua itu adalah program yang dibuat untuk komputer atau komponen komputer yang disebut sebagai CPU (Central Processing Unit) agar komputer dapat melakukan tugas tertentu dengan tepat.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/program.jpg" title="program komputer" /></p>\n\n<p>Sehingga dapat disimpulkan bahwa semua aplikasi yang ada di atas merupakan program komputer yang di dalamnya terdapat instruksi tertentu sesuai dengan maksud dibuatnya program tersebut. Instruksi yang diberikan bisa sangat kompleks yang terdiri dari ribuan baris bahkan jutaan instruksi. Atau sebuah program bisa juga dibuat hanya dengan satu instruksi sederhana, seperti :</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">alert(''Hello World'');</code></pre>\n\n<p>Instruksi di atas adalah untuk memerintahkan web browser menampilkan sebuah kotak dialog yang bertuliskan &quot;Hello World&quot; ke dalam layar browser. Meski hanya satu baris instruksi, hal itu tetaplah disebut sebagai program.</p>\n\n<p>Jika inti dari sebuah program itu adalah berupa instruksi atau perintah kepada komputer, maka syarat instruksi itu agar dapat diterima oleh komputer di sini adalah sebagai berikut :</p>\n\n<ol>\n	<li>instruksi harus ditulis di dalam aturan bahasa pemrograman tertentu</li>\n	<li>instruksi harus terstruktur dan tidak boleh tertukar urutannya</li>\n	<li>instruksi harus sederhana dan mudah dimengerti baik oleh kita maupun oleh komputer</li>\n	<li>instruksi harus benar secara logika</li>\n</ol>\n\n<p>Persyaratan itu mutlak dipenuhi agar program bisa berhasil dibuat dan dapat dijalankan. Jika salah satu persyaratan itu tidak dipenuhi, kemungkinan yang akan terjadi bisa jadi fatal. Misalkan saja saat kita memberikan instruksi kepada komputer untuk melakukan suatu hal yang berulang terus menerus tanpa berhenti. Tentu saja hal itu akan bisa berakibat pada kerusakan hardware pada komputer.</p>\n\n<p>Komputer pada umumnya sebenarnya tidaklah terlalu pintar karena hanya sedikit yang bisa dilakukannya. Tetapi komputer adalah penurut dan tidak kenal lelah sehingga walaupun instruksi yang diberikan itu salah, komputer tetap akan mengerjakannya. Jadi yang sebenarnya pintar itu bukan komputernya, tetapi program yang dibuat di dalamnya lah yang pintar, karena program tersebut harus diperintahkan untuk mengantisipasi dengan cara yang benar tentang kemungkinan adanya kesalahan pada instruksi selanjutnya.</p>\n</div>\n\n<h3>Bahasa Pemrograman</h3>\n\n<div class="wrapper-content">\n<p>Instruksi kita terhadap komputer tidak serta merta dapat dimengerti oleh komputer tanpa menggunakan bahasa yang sama. Karena komputer berinteraksi dengan bahasa mesin sedangkan kita manusia menggunakan bahasa manusia, maka harus ada penerjemah bahasa yang mampu berkomunikasi dengan keduanya sekaligus. Untuk itu lah bahasa program diciptakan sebagai jembatan perantara antara kita sebagai manusia dengan komputer.</p>\n\n<p>Bahasa program pertama kali muncul sejak awal komputer diciptakan. dan berkembang hingga sekarang bahasa program ada banyak sekali jumlahnya. Kita bisa cek bermacam-macam nama bahasa program di situs <a href="https://id.wikipedia.org/wiki/Daftar_bahasa_pemrograman" target="_blank">wikipedia</a>. Sekarang pertanyaannya, kenapa bahasa program bisa sangat begitu banyaknya yang diciptakan, bukankan tujuan utamanya hanya untuk berinteraksi dalam memberi perintah pada komputer ?</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/language.jpg" title="bahasa program" /></p>\n\n<p>Selayaknya perkembangan bahasa manusia, bahasa program komputer pun berkembang menjadi banyak karena ada maksud dan tujuan tertentu tentang spesifikasi program komputer yang akan dibuat. Dari sekian banyak bahasa program yang ada, sebagian ada yang sangat populer dan sebagian lainnya kurang begitu populer untuk digunakan dalam membuat program. Setiap bahasa program biasanya memiliki keunggulan yang spesifik terhadap pembuatan program, ada bahasa yang khusus digunakan untuk membuat program atau aplikasi berbasis desktop, ada juga yang spesifik hanya untuk membuat aplikasi mobile. Tetapi ada juga yang bisa untuk keduanya.</p>\n\n<p>Sebenarnya komputer pun tidak akan mengerti tentang macam-macam bahasa ini, karena komputer hanya akan menerima input instruksi dalam bentuk kode biner atau bahasa mesin. Maka setiap bahasa program harus menerjemahkan kode yang ditulis dengan bahasa tertentu untuk diubah menjadi bahasa mesin. Proses ini bisa disebut sebagai proses <strong>compile</strong> dan proses <strong>interpreter</strong>. Masing masing bahasa program ini juga memiliki tingkatan dari yang paling rendah (Low Level) sampai ke tingkat yang paling tinggi (High Level). Tingkatan ini didasarkan pada syntax istilah atau kosa kata yang digunakan. Jika semakin mendekati bahasa manusia (bahasa Inggris) maka tingkatannya semakin tinggi.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/computer-languages.png" title="tingkat bahasa program" /></p>\n\n<p>Setiap kode program (<strong>source code</strong>) atau barisan instruksi ini ditulis dalam bentuk <strong>plain text</strong> atau teks biasa yang bisa ditulis di dalam aplikasi text editor bawaan Operating System atau bisa juga menggunakan aplikasi khusus yang didesain untuk menulis source code. plain text tu sangat berbeda dengan Richtext seperti apa yang kita ketahui di dalam aplikasi MS Word. plain text hanya akan berupa text biasa dengan beberapa karakter dan symbol tertentu yang sama sekali tidak membutuhkan formating visual seperti text tebal, text miring atau warna text. plain text hanya akan dikenali lewat jenis ekstensi file sesuai bahasa program yang digunakan dengan beberapa syntax aturan yang ada di dalamnya.</p>\n\n<pre class="line-numbers">\n<code class="language-php">Bahasa JavaScript dengan ektensi file .js =&gt; alert(''Hello World'')\nBahasa Python dengan ektensi file .py =&gt; print ''Hello World''\nBahasa Ruby dengan ektensi file .ruby =&gt; puts ''Hello World''\nBahasa Pearl dengan ektensi file .pl =&gt; say ''Hello World''\nBahasa PHP dengan ektensi file .php =&gt; echo ''Hello World'';</code></pre>\n\n<p>Dari contoh syntax penulisan beberapa bahasa di atas, masing masing bahasa program memiliki aturan yang berbeda hanya untuk sekedar menampilkan text &#39;Hello World&#39; ke dalam layar komputer.</p>\n</div>\n\n<h3>Menjalankan Program</h3>\n\n<div class="wrapper-content">\n<p>Seperti yang sudah kita ketahui bahwa bahasa program harus diterjemahkan ke dalam bahasa mesin komputer agar bisa dimengerti oleh komputer. Pada bahasa program, proses ini dilakukan secara otomatis saat program dijalankan. Proses ini terbagi menjadi 2 macam yaitu compiler dan interpreter.</p>\n\n<h4>Compiler</h4>\n\n<p>Compiler adalah suatu program yang menerjemahkan bahasa program ( source code) ke dalam bentuk object. Compiler menggabungkan keseluruhan bahasa program, mengumpulkannya dan kemudian menyusunnya kembali. Compiler memerlukan waktu untuk membuat suatu program dapat di eksekusi oleh komputer. Program yang menggunakan compiler biasanya dapat berjalan lebih cepat dibanding program yang menggunakan interpreter, disamping itu juga bahasa program yang menggunakan compiler bersifat independen karena source code tidak akan pernah terlihat oleh siapapun kecuali oleh si pembuat program. Contoh bahasa program yang menggunakan compiler adalah bahasa C, C++, dan Objective-C.</p>\n\n<p>Tahap compile ini adalah sebagai berikut :</p>\n\n<ol>\n	<li>Source code (program yang ditulis) dibaca di memori komputer.</li>\n	<li>Source code tersebut diubah menjadi object code (bahasa Assembly).</li>\n	<li>Object code di hubungkan dengan library yang dibutuhkan untuk membentuk file yang bisa dieksekusi.</li>\n</ol>\n\n<h4>Interpreter</h4>\n\n<p data-selectable-paragraph="" id="eeb9">Dalam ilmu komputer, penerjemah atau lebih dikenal dengan <strong>interpreter</strong> merupakan perangkat lunak yang berfungsi melakukan eksekusi sejumlah instruksi yang ditulis dalam suatu bahasa pemrograman tanpa terlebih dahulu menyusunnya menjadi program bahasa mesin.</p>\n\n<p data-selectable-paragraph="">Interpreter umumnya menggunakan salah satu strategi berikut untuk menjalankan program:</p>\n\n<ol>\n	<li data-selectable-paragraph="" id="03c7">Mengeksekusi source code secara langsung, atau</li>\n	<li data-selectable-paragraph="" id="3727">Menerjemahkannya ke dalam serangkaian p-code kemudian mengeksekusinya, atau</li>\n	<li data-selectable-paragraph="" id="0820">Mengeksekusi kode yang telah dikompilasi sebelumnya oleh compiler yang merupakan bagian dari sistem penerjemahan.</li>\n</ol>\n\n<p data-selectable-paragraph="" id="7272">Proses ini sangat berbeda dengan compiler, dimana pada compiler, hasilnya sudah langsung berupa satu kesatuan perintah dalam bentuk bahasa mesin, dimana proses penerjemahan dilaksanakan sebelum program tersebut dieksekusi. Di dalam interpreter source code dapat terlihat oleh siapapun terutama untuk bahasa client side karena source code merupakan bagian utama dari program yang akan dijalankan. JavaScript dan PHP adalah beberapa diantara bahasa program yang menggunakan teknik interpreter. Interpreter yang dimaksud di sini adalah berupa aplikasi browser yang menerjemahkan source code menjadi program halaman web yang siap untuk digunakan.</p>\n\n<h4 data-selectable-paragraph="">Compiler vs Interpreter</h4>\n\n<p data-selectable-paragraph="">Masing masing proses eksekusi source code dari bahasa program ini sama sama memiliki kelebihan dan kekurangan. Oleh sebab itu ada bahasa program yang dengan sengaja menggabungkan kedua kelebihan dari compiler dan interpreter menjadi satu agar bisa menutupi kekurangannya atau yang bisa disebut sebagai teknik <strong>Hybrid</strong>. Contoh bahasa program yang menggunakan teknik ini adalah Python dan JAVA.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered" style="width: 100%;">\n	<thead>\n		<tr>\n			<th colspan="2" rowspan="1" scope="col">Compiler</th>\n			<th colspan="2" rowspan="1" scope="col">Interpreter</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align: center;"><span style="color:#2ecc71;">siap untuk dijalankan</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">tidak lintas platform</span></td>\n			<td style="text-align: center;"><span style="color:#2ecc71;">lintas platform</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">butuh interpreter</span></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><span style="color:#2ecc71;">lebih cepat</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">tidak fleksibel</span></td>\n			<td style="text-align: center;"><span style="color:#2ecc71;">fleksibel</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">lebih lambat</span></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><span style="color:#2ecc71;">source code tidak terlihat</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">perlu langkah tambahan</span></td>\n			<td style="text-align: center;"><span style="color:#2ecc71;">mudah diuji</span></td>\n			<td style="text-align: center;"><span style="color:#ff3300;">source code mudah diakses</span></td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<h3>Memilih Bahasa Program</h3>\n\n<div class="wrapper-content">\n<p>Dengan begitu banyaknya bahasa program yang ada, untuk membuat program, tidak lantas membuat kita harus menguasai seluruh bahasa program. Semuanya akan kembali lagi kepada kebutuhan kita tentang program seperti apa yang akan kita buat.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/spec-language.png" title="memilih bahasa" /></p>\n\n<p>Untuk kesempatan kali ini, di situs My Note ini hanya akan tersedia materi belajar untuk bahasa pemrograman yang membahas khusus tentang bahasa program JavaScript yang digunakan untuk membuat aplikasi berbasis web.</p>\n</div>\n', 1313, 1554171121, 1593519392);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(5, 'BykFmUK', 'beginner', 7, 'JS Operator', 'Operator pada JavaScript', 'jenis operator,operator aritmatika,operator penugasan,operator perbandingan,operator logika,operator string,operator kondisi,operator typeof,operator binary,operator ternary,operator unary,operator and,operator or,operator negasi', 1, '<p>Operator dalam JavaScript adalah sebuah simbol yang digunakan untuk melakukan sebuah operasi. Mirip yang sudah kita pelajari di pelajaran sekolah yaitu tentang operasi penjumlahan, perkalian, pembagian atau pengurangan, di JavaScript pun terdapat hal serupa. Namun akan lebih spesifik lagi penggunaannya dengan beberapa tambahan simbol yang digunakan untuk membuat sebuah program.</p>\n\n<h3>Jenis Operator</h3>\n\n<div class="wrapper-content">\n<p>Di dalam JavaScript, operator-operator ini dapat digolongkan menjadi 3 bagian yang didasarkan pada jumlah operand yang digunakan. <strong>Operand</strong> adalah objek yang akan dilakukan proses operasi.</p>\n\n<p>Pembagian golongan operator ini adalah operator <strong>binary</strong>, operator <strong>ternary</strong> dan operator <strong>unary</strong>.</p>\n\n<h4>Operator Binary</h4>\n\n<p>Operator binary adalah operator yang membutuhkan dua operand dalam penggunaannya.</p>\n\n<p style="text-align: center;"><strong><span style="color:#3498db;">OPERAND1</span> <span style="color:#9b59b6;">OPERATOR</span> <span style="color:#3498db;">OPERAND2</span></strong></p>\n\n<p>Yang termasuk di dalam operator binary ada beberapa yang mungkin kita sudah familiar yaitu operator <strong>Aritmatika</strong>, operator <b>Penugasan</b>, operator <strong>Perbandingan</strong>, operator <strong>Logika</strong>, dan operator <strong>String</strong>.</p>\n\n<h4>Operator Ternary</h4>\n\n<p>Operator Ternary adalah operator yang membutuhkan tiga buah operand. Yang termasuk dalam kategori operator ini adalah operator <strong>Kondisional</strong>.</p>\n\n<p style="text-align: center;"><strong><span style="color:#3498db;">OPERAND1</span> <span style="color:#9b59b6;">OPERATOR</span> <span style="color:#3498db;">OPERAND2</span> <span style="color:#9b59b6;">OPERATOR</span></strong> <span style="color:#3498db;"><strong><span style="color:#3498db;">OPERAND3</span></strong></span></p>\n\n<h4>Operator Unary</h4>\n\n<p>Sedangkan operator Unary adalah operator yang hanya membutuhkan satu operand saja seperti pada operator <strong>Typeof</strong>.</p>\n\n<p style="text-align: center;"><strong><span style="color:#9b59b6;">OPERATAOR </span><span style="color:#3498db;">OPERAND </span></strong>atau <strong><span style="color:#3498db;">OPERAND </span><span style="color:#9b59b6;">OPERATOR</span></strong></p>\n</div>\n\n<h3>Operator Aritmatika</h3>\n\n<div class="wrapper-content">\n<p>Operator aritmatika terdiri dari beberapa simbol operator, yaitu:</p>\n\n<ol>\n	<li>( <code>+</code> ) penjumlahan</li>\n	<li>( <code>-</code> ) pengurangan</li>\n	<li>( <code>*</code> ) perkalian (menggunakan tanda bintang bukan tanda silang)</li>\n	<li>( <code>/</code> ) pembagian</li>\n	<li>( <code>%</code> ) modulus atau sisa bagi</li>\n	<li>( <code>++</code> ) increment</li>\n	<li>( <code>--</code> ) decrement</li>\n</ol>\n\n<p>Untuk operator <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> kemungkinan besar kita sudah mengerti cara penggunaannya, namun yang tetap harus diperhatikan penggunaannya adalah saat terjadi operasi secara bersamaan dalam satu ekspresi.</p>\n\n<p>Misalnya saja pada ekspresi :</p>\n\n<p style="text-align: center;"><strong>1 + 2 * 3 - 4</strong></p>\n\n<p>Jika kita menjawabnya dengan nilai <strong>5 </strong>maka kita harus kembali lagi membuka buku pelajaran sekolah dasar.</p>\n\n<p>Secara teori matematika, kita harus mengetahui urutan prioritas operasi apa yang harus dilakukan terlebih dahulu. Rumusnya adalah seperti urutan yang ada di bawah ini, urutan yang lebih prioritas untuk dikerjakan adalah :<span><strong></strong></span></p>\n\n<ol>\n	<li>operasi yang ada di dalam tanda kurung</li>\n	<li>perkalian</li>\n	<li>pembagian</li>\n	<li>penjumlahan</li>\n	<li>pengurangan</li>\n</ol>\n\n<p>Maka, dari contoh kasus ekspresi <strong>1 + 2 * 3 - 4</strong>, nilai yang akan dihasilkan adalah angka <strong>3</strong>.</p>\n\n<p>Jika kita ingin ekspresi tersebut menghasilkan angka <strong>5</strong>, maka kita harus tambahkan tanda kurung menjadi</p>\n\n<p style="text-align: center;"><strong>( 1 + 2 ) * 3 - 4 = 5</strong></p>\n\n<p>Sedangkan untuk <strong>modulus </strong>yang ditulis dengan simbol persen adalah sisa bagi antara operand1 dan operand2. Jika kita menuliskan 10 % 5 maka nilai yang dihasilkan adalah <strong>0</strong>, atau jika kita menuliskan 10 % 3 maka hasilnya adalah <strong>1</strong>.</p>\n\n<p>Untuk pengertian incerement dan decrement ini juga cukup penting untuk dipahami. <strong>Increment </strong>merupakan istilah peringkasan dari ( <strong>+1</strong> )<code> </code>seperti <code>x++</code><strong> </strong>yang artinya <strong>x + 1</strong>. Sedangkan <strong>decrement </strong>merupakan istilah peringkasan dari ( <strong>-1</strong> ) seperti <code>x--</code><strong> </strong>yang berarti <strong>x - 1</strong>.</p>\n</div>\n\n<h3>Operator Penugasan</h3>\n\n<div class="wrapper-content">\n<p>Selanjutnya ada yang disebut sebagai operator assign atau yang berarti operator yang ditujukan untuk penugasan. Dalam hal ini, simbol yang digunakan adalah simbol sama dengan ( <code>=</code> ). Arti dari tanda ini berbeda dengan istilah pelajaran matematika pada umumnya yaitu <strong>1 + 2 = 3</strong>.</p>\n\n<p>Tanda sama dengan dalam bahasa program biasanya akan sering digunakan jika kita bekerja dengan variable. Tanda ini digunakan untuk memberikan perintah terhadap suatu nilai ( operand sebelah kanan ) agar masuk ke dalam sebuah variable ( operand sebelah kiri ).</p>\n\n<p>Seperti <code>x = 10</code>, yang artinya memberikan perintah agar nilai <strong>10</strong> berada atau masuk ke dalam variable <strong>x</strong>.</p>\n\n<p>Selain tanda sama dengan, masih ada beberapa operator assign lainnya. Cara penulisan ini merupakan peringkasan dalam menulis sebuah ekspresi.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed table-hover" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">operator</th>\n			<th scope="col">kasus</th>\n			<th scope="col">arti</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code>+=</code></td>\n			<td style="text-align:center">x += y</td>\n			<td style="text-align:center">x = x + y</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>-=</code></td>\n			<td style="text-align:center">x -= y</td>\n			<td style="text-align:center">x = x - y</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>*=</code></td>\n			<td style="text-align:center">x *= y</td>\n			<td style="text-align:center">x = x * y</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>/=</code></td>\n			<td style="text-align:center">x /= y</td>\n			<td style="text-align:center">x = x / y</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Jika diterapkan pada sebuah kode maka akan jadi seperti contoh di bawah ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Assign&lt;/h1&gt;\n  \n  &lt;h3&gt;Diketahui x = 10, maka x += 5 adalah ... &lt;/h3&gt;\n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    // deklarasi variable\n    var x;\n    // angka 10 ditugaskan untuk masuk ke dalam variable x\n    x = 10;\n    // variable x ditimpa nilai sebelumnya dengan angka x itu sendiri yaitu 10\n    // kemudian dijumlahkan dengan angka 5\n    x += 5;\n    // jadi nilai x sekarang bukan lagi 10 melainkan 10 + 5\n    alert(x);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Operator Perbandingan</h3>\n\n<div class="wrapper-content">\n<p>Operator perbandingan ini digunakan untuk membandingkan dua buah operand dan yang akan dihasilkan oleh operator ini adalah nilai BOOLEAN yaitu <strong>true </strong>atau <strong>false</strong>.</p>\n\n<p>Berikut ini adalah daftar operator yang termasuk di dalam operator perbandingan.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed table-hover" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">operator</th>\n			<th scope="col">deskripsi</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code>==</code></td>\n			<td>sama dengan</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>===</code></td>\n			<td>sama nilai dan sama tipe</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>!=</code></td>\n			<td>tidak sama dengan</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>!==</code></td>\n			<td>tidak sama nilai dan tidak sama tipe</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>&gt;</code></td>\n			<td>lebih besar dari</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>&lt;</code></td>\n			<td>lebih kecil dari</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>&gt;=</code></td>\n			<td>lebih besar atau sama dengan</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>&lt;=</code></td>\n			<td>lebih kecil atau sama dengan</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Perbandingan&lt;/h1&gt;\n  \n  &lt;h3&gt;Ketiga karakter ini (9, 10, dan "10") akan dibandingkan&lt;/h3&gt;\n  \n  &lt;button id="btn1"&gt;apakah 9 == 10&lt;/button&gt;\n  &lt;button id="btn2"&gt;apakah 9 != 10&lt;/button&gt;\n  &lt;button id="btn3"&gt;apakah 9 &gt; 10&lt;/button&gt;\n  &lt;button id="btn4"&gt;apakah 10 === "10"&lt;/button&gt;\n  \n&lt;script&gt;\n  document.getElementById(''btn1'').onclick = function(){\n    alert(9 == 10); // apakah 9 sama dengan 10\n  };\n  document.getElementById(''btn2'').onclick = function(){\n    alert(9 != 10); // apakah 9 tidak sama dengan 10\n  };\n  document.getElementById(''btn3'').onclick = function(){\n    alert(9 &gt; 10); // apakah 9 lebih besar dari 10\n  };\n  document.getElementById(''btn4'').onclick = function(){\n    alert(10 === "10"); // apakah 10 sama nilai dan sama tipe dengan "10"\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Operator Logika</h3>\n\n<div class="wrapper-content">\n<p>Operator logika digunakan untuk menentukan logika dari beberapa ekspresi yang digabungkan menjadi sebuah ekspresi utuh yang digunakan sebagai kondisi pengujian. Nilai yang dihasilkan dari operator ini adalah BOOLEAN antara <strong>true</strong> dan <strong>false</strong>. Untuk memahami penggunaan operator ini, kita harus teliti saat menuliskan sebuah ekspresi, karena logika kita harus benar-benar digunakan agar bisa menghasilkan program yang sesuai. Operator yang termasuk ke dalam operator logika ini adalah AND, OR, dan Negasi.</p>\n\n<h4>Operator AND</h4>\n\n<p>Operator <b>AND </b>yang ditulis dengan tanda ( <code>&amp;&amp;</code> ) hanya akan menghasilkan nilai <strong>true</strong><strong> </strong>jika kedua ekspresi yang dibandingkan juga bernilai <b>true</b>, dan akan menghasilkan nilai <strong>false </strong>jika salah satu atau kedua ekspresi yang dibandingkan adalah <strong>false</strong>.</p>\n\n<p>Jika dijabarkan menjadi sebuah rumus, maka yang akan terlihat adalah seperti di bawah ini.</p>\n\n<ul>\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">AND </span><span style="color:#2ecc71">TRUE </span></strong>hasilnya <span style="color:#2ecc71"><strong>TRUE</strong></span></li>\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">AND </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\n	<li><strong><span style="color:#9b59b6"><strong><span style="color:#e74c3c">FALSE </span></strong>AND </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\n</ul>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Logika AND (&amp;&amp;)&lt;/h1&gt;\n  \n  &lt;h3&gt;Kita akan menguji angka itu termasuk ganjil atau genap&lt;/h3&gt;\n  &lt;h3&gt;DAN&lt;/h3&gt;\n  &lt;h3&gt;Kita akan memastikan angka itu lebih kecil dari 10&lt;/h3&gt;\n  &lt;button id="btn"&gt;klik untuk mulai&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var angka = prompt(''masukkan angka untuk diuji'');\n    // setiap angka jika dibagi dengan 2 pasti angka itu adalah genap\n    // maka kita bisa menggunakan operator modulus untuk mengeceknya\n    // sekaligus membandingkannya dengan 0\n    var expresi1 = angka % 2 == 0;\n    var expresi2 = angka &lt; 10;\n    alert(expresi1 &amp;&amp; expresi2); // menggunakan operator AND\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Jika ingin menghasilkan nilai true dari logika program di atas,\n  maka input yang harus dimasukkan adalah angka genap yang berada pada rentang antara 0 sampai 10,\n  yaitu 0, 2, 4, 6, dan 8 saja.\n  Selain dari angka tersebut akan menghasilkan nilai false.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Operator OR</h4>\n\n<p>Operator <b>OR </b>yang ditulis dengan tanda dua pipe ( <code>||</code> )<code> </code>akan menghasilkan nilai <b>true </b>jika salah satu atau kedua ekspresi yang dibandingkan adalah <strong>true</strong>. Dengan menggunakan operator OR, maka cukup hanya memenuhi satu di antara beberapa kondisi ekspresi yang harus dipenuhi sebagai <strong>true</strong>.</p>\n\n<p>Jika dijabarkan menjadi sebuah rumus, maka yang akan terlihat adalah seperti di bawah ini.</p>\n\n<ul>\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">OR </span><span style="color:#2ecc71">TRUE </span></strong>hasilnya <span style="color:#2ecc71"><strong>TRUE</strong></span></li>\n	<li><strong><span style="color:#2ecc71">TRUE </span><span style="color:#9b59b6">OR </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <strong><span style="color:#2ecc71">TRUE</span></strong></li>\n	<li><strong><span style="color:#e74c3c;">FALSE </span><span style="color:#9b59b6">OR </span><span style="color:#e74c3c">FALSE </span></strong>hasilnya <span style="color:#e74c3c"><strong>FALSE</strong></span></li>\n</ul>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Logika OR ( || )&lt;/h1&gt;\n  \n  &lt;h3&gt;Kita akan menguji apakah angka itu termasuk ganjil atau genap&lt;/h3&gt;\n  &lt;h3&gt;ATAU&lt;/h3&gt;\n  &lt;h3&gt;Kita menguji apakah angka itu lebih kecil dari 10&lt;/h3&gt;\n  &lt;button id="btn"&gt;klik untuk mulai pengujian&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var angka = prompt(''masukkan angka untuk diuji'');\n    var expresi1 = angka % 2 == 0;\n    var expresi2 = angka &lt; 10;\n    alert(expresi1 || expresi2); // menggunakan operator OR\n  };\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Agar menghasilkan nilai true,\n  selama angka itu genap tidak peduli angka itu lebih kecil atau lebih besar dari 10\n  dan juga selama angka itu lebih kecil dari 10 tidak peduli angka itu ganjil atau genap  \n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Operator Negasi</h4>\n\n<p>Operator negasi atau bisa juga disebut <strong>NOT</strong>, ditandai dengan simbol tanda seru ( <code>!</code><code></code> )<code> </code>yang ditulis di depan sebuah ekspresi atau bisa juga ditempatkan di depan variable yang menampung nilai boolean. Operator ini digunakan untuk membalikkan nilai logika. Sebuah ekspresi atau variable yang bernilai <strong>true</strong> jika ditambahkan tanda ini di depannya, maka ekspresi tersebut nilainya akan dibalik menjadi <strong>false </strong>dan begitupun sebaliknya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Negasi NOT ( ! )&lt;/h1&gt;\n  \n  &lt;h3&gt;Kita pastinya sudah tahu bahwa 1 &gt; 2 bernilai false&lt;/h3&gt;\n  &lt;h3&gt;Jika dibalik dengan operator NOT maka hasilnya...&lt;/h3&gt;\n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var expresi = 1 &gt; 2;\n    alert(!expresi);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Operator String</h3>\n\n<div class="wrapper-content">\n<p>Penggabungan string bisa dilakukan dengan menggunakan operator plus ( <code>+</code> ). Tanda yang sama seperti pada operator aritmatika penjumlahan, namun dalam kasus lain saat salah satu operand yang dioperasikan bertipe data string, maka tanda plus ini tidak berfungsi sebagai penjumlahan lagi melainkan sebagai penggabungan. Yang perlu diperhatikan di sini adalah tentang penggunaan tanda ini sebagai operator aritmatika atau sebagai operator string, tergantung cara kita menempatkan urutan operand dari kiri ke kanan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator String&lt;/h1&gt;\n  \n  &lt;button id="btn1"&gt;"belajar" + " " + "javascript"&lt;/button&gt;\n  &lt;button id="btn2"&gt;10 + "10"&lt;/button&gt;\n  \n&lt;script&gt;\n  document.getElementById(''btn1'').onclick = function(){\n    // operasi string + spasi + string\n    alert(''belajar'' + '' '' + ''javascript'');    \n  };\n  document.getElementById(''btn2'').onclick = function(){\n    // operasi angka + string\n    alert(10 + ''10'');    \n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Operator Kondisi</h3>\n\n<div class="wrapper-content">\n<p>Dari sekian banyak operator yang sudah dijelaskan di atas, semuanya merupakan operator yang jenisnya binary atau operator yang membuatuhkan dua buah operand atau lebih. Selanjutnya yaitu tentang operator ternary berupa operator <strong>kondisional</strong>. Dengan operator ini, kita bisa meringkas struktur pengkondisian dari <code>if else</code> menjadi dalam satu baris statement saja. Struktur penulisan dari operator kondisional ini adalah sebagai berikut.</p>\n\n<p style="text-align: center;"><strong><span style="color:#3498db;">(expression) </span><span style="color:#9b59b6;">? </span><span style="color:#2ecc71;">true</span> <span style="color:#9b59b6;">: </span><span style="color:#e74c3c;">false</span></strong></p>\n\n<p>Operator ini tidak akan mengembalikan nilai boolean true dan false, tetapi akan melanjutkan eksekusi kode berdasarkan kondisi dari sebuah ekspresi yang sedang diuji. Jika kondisi ekspresi bernilai <strong>true</strong> maka statement yang akan dijalankan adalah apapun yang berada setelah tanda tanya ( <code>?</code> ). Sedangkan, jika kondisi ekspresi bernilai <strong>false</strong> maka statement yang akan dijalankan adalah apapun yang berada setelah tanda titik dua ( <code>:</code> ).</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Ternary&lt;/h1&gt;\n  \n  &lt;h3&gt;Masukkan angka untuk diketahui apakah genap atau ganjil&lt;/h3&gt;\n  &lt;button id="btn"&gt;klik untuk mulai&lt;/button&gt;\n  \n&lt;script&gt;\n  document.getElementById(''btn'').onclick = function(){\n    var angka = prompt(''masukkan angka untuk diuji'');\n    var ternary = (angka % 2 == 0) ? angka + " adalah genap": angka + " adalah ganjil";\n    alert(ternary);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Operator Typeof</h3>\n\n<div class="wrapper-content">\n<p>Yang terakhir yaitu operator <strong>typeof</strong> yang merupakan jenis operator unary. Operator ini digunakan untuk mengetahui tipe data dari sebuah operand.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Operator JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operator Typeof&lt;/h1&gt;\n  \n  &lt;h3&gt;Klik tombol untuk mengetahui masing-masing tipe datannya&lt;/h3&gt;\n  \n  &lt;button id="btn1"&gt;tipe data 10&lt;/button&gt;\n  &lt;button id="btn2"&gt;tipe data "10"&lt;/button&gt;\n  \n&lt;script&gt;\n  document.getElementById(''btn1'').onclick = function(){\n    alert(typeof 10);\n  };\n  document.getElementById(''btn2'').onclick = function(){\n    alert(typeof "10");\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Cara penulisan operator ini juga bisa menggunakan keyword function <code>typeof() </code>dengan menuliskan operand di dalam tanda kurung.</p>\n</div>\n\n<p>Akhirnya selesai sudah pembahasan panjang tentang masing-masing operator yang bisa digunakan di dalam bahasa program JavaScript. Pemahaman tentang perilaku operator ini akan sangat berguna karena akan sangat sering dipakai di dalam membuat program.</p>\n', 1809, 1554171121, 1593521114),
(6, 'BpMkfuO', 'beginner', 9, 'JS Function', 'Function pada JavaScript', 'definisi function,manfaat function,kategori function,struktur function,function declaration,function expression,anonymous function,don''t repeat yourself,abstraksi,modularitas,built in function,user defined function,keyword function,identifier,tanda kurung,parameter,body function,keyword return', 1, '<p>Pada masing-masing materi sebelumnya, kita mungkin telah familiar terhadap kode dengan keyword <strong>function</strong> ini. Namun, untuk yang belum tahu apa sebenarnya maksud dari keyword tersebut, pada materi ini kita akan membahasnya lebih detail tentang apa saja macamnya, bagaimana membuatnya, bagaimana cara menggunakannya, dan bagaimana mengetahui perilakunya.</p>\n\n<h3>Definisi Function</h3>\n\n<div class="wrapper-content">\n<p>Penjelasan tentang function ini mungkin akan cukup rumit untuk dipahami bagi pemula yang baru belajar pemrograman, akan tetapi jika kita sudah mengerti konsep dasarnya, maka kode JavaScript yang kita buat akan jauh lebih baik jika dibandingkan dengan menulis kode tanpa menggunakan function.</p>\n\n<p>Definisi dari function ini bisa kita bagi menjadi beberapa, yang di antaranya adalah :</p>\n\n<ol>\n	<li>sebuah sub-program (program yang ada di dalam program) yang dapat dipanggil (<em>invoke</em>) atau digunakan pada bagian lain dari program.</li>\n	<li>merupakan kumpulan statement untuk melakukan tugas tertentu yang spesifik</li>\n	<li>harus dibuat dulu baru dapat dipanggil atau digunakan</li>\n	<li>merupakan struktur dasar pembentuk bahasa program JavaScript</li>\n</ol>\n</div>\n\n<h3>Manfaat Function</h3>\n\n<div class="wrapper-content">\n<p>Dengan menggunakan function, kita akan terbantu di dalam banyak hal sehingga akan memudahkan kita untuk menulis dan memahami atau bahkan me-<em>maintenace</em> kode program kita. Berikut ini adalah beberapa poin kelebihan menggunakan function.</p>\n\n<h4>Don&#39;t Repeat Yourself</h4>\n\n<p>Maksud dari don&#39;t repeat yourself adalah kita disarankan agar dalam menulis kode program, tidak melakukan penulisan yang sebenarnya sudah pernah ditulis sebelumnya berulang kali untuk menghasilkan nilai dari sebuah konsep yang sama. Hal itu berguna untuk menyederhanakan kode program agar lebih efektif dan bisa menghemat penggunaan memori dan kecepatan browser dalam memuat source code menjadi halaman website.</p>\n\n<h4>Abstraksi</h4>\n\n<p>Dengan menggunakan function, kita bisa membuat kode program yang awal mulanya sangat rumit untuk dipahami, bahkan untuk kita sendiri yang menulisnya menjadi sebuah kode program yang lebih kelihatan mudah dipahami. Hal ini yang dimaksud dengan abstraksi, atau membuat sesuatu yang tadinya sulit menjadi &quot;seolah-olah&quot; lebih mudah.</p>\n\n<h4>Modularitas</h4>\n\n<p>Penggunaan function adalah untuk modularitas, atau membagi bagian-bagian kode untuk dikelompokkan berdasarkan fungsi tertentu atau berdasarkan tingkat kegunaan kode program tersebut menjadi bagian-bagian yang lebih kecil. Hal ini juga akan berguna saat kita mengalami kejadian error pada baris program, maka kita akan bisa langsung melakukan perbaikan terhadap bagian-bagian kode yang sudah dibagi tadi tanpa harus memeriksa satu per satu baris program.</p>\n</div>\n\n<h3>Kategori Function</h3>\n\n<div class="wrapper-content">\n<p>Di dalam konsep function, terdapat dua pembagian kategori berdasarkan pembuatannya yaitu <strong>built in</strong> function dan <strong>user defined</strong> function.</p>\n\n<h4>Built In Function</h4>\n\n<p>Built in function atau bisa diartikan sebagai function yang sudah disediakan atau dibuatkan oleh JavaScript untuk tinggal kita gunakan. Contoh beberapa function ini beberapa di antaranya ada yang sudah kita praktekkan pada materi-materi sebelumnya seperti <code>alert()</code>, <code>prompt()</code>, atau <code>Date()</code>. Function tersebut sudah tersedia atau sudah dibuatkan mekanismenya oleh JavaScript sehingga kita hanya perlu memanggil nama functionnya saja. Seperti saat menggunakan function <code>alert()</code> maka akan tampil pop-up notifikasi pada web browser.</p>\n\n<p>Selain built in function yang bisa digunakan bebas seperti di atas, ada juga built in function yang hanya dapat digunakan pada tipe data tertentu saja. Misalkan untuk <code>pop()</code> hanya khusus untuk data array, atau <code>toFixed()</code> untuk tipe data number dan untuk tipe data string seperti <code>chartAt()</code>, <code>slice()</code>, <code>split()</code>, <code>toLowerCase()</code>. Function ini bisa disebut sebagai <strong>method</strong> yang melekat pada tipe data tertentu.</p>\n\n<h4>User Defined Function</h4>\n\n<p>User defined function adalah function yang kita buat sendiri untuk dapat digunakan sesuai dengan kebutuhan program yang ingin dibuat. User defined function terbagi menjadi 2 jenis yaitu function <strong>Declaration</strong> dan function <strong>Expression</strong>. Kategori user defined function inilah yang akan menjadi pokok pembahasan tentang materi function kali ini.</p>\n\n<ul>\n</ul>\n</div>\n\n<h3>Struktur Function</h3>\n\n<div class="wrapper-content">\n<p>Untuk membuat user defined function, ada beberapa aturan yang harus ditulis dengan benar agar function dapat digunakan dan menghasilkan nilai yang diharapkan.</p>\n\n<pre>\n<code class="language-javascript">function identifier (a,b,c) \n{ // awal dari kode blok function\n\n  // kode blok program dari function yang akan dieksekusi\n    \n  // mengakhiri function dengan keyword return\n  return;\n\n} // akhir dari kode blok function</code></pre>\n\n<h4>Keyword Function</h4>\n\n<p>Setiap function yang akan dibuat harus menggunakan keyword <code>function</code> saat melakukan proses deklarasi.</p>\n\n<h4>Identifier</h4>\n\n<p>Setiap function sebaiknya menggunakan nama atau identifier (untuk function declaration) yang relevan terhadap kode blok yang ada di dalamnya. Aturan pemberian nama identifier ini sama persis dengan aturan penulisan nama variable dan lebih disarankan menggunakan tata cara penulisan <strong>camelCase</strong>.</p>\n\n<h4>Tanda Kurung</h4>\n\n<p>Penulisan tanda kurung <code>( )</code> setelah identifier atau setelah keyword function harus dituliskan, meskipun di dalamnya tidak terdapat parameter.</p>\n\n<h4>Parameter</h4>\n\n<p>Function bisa diberikan beberapa parameter dan harus ditempatkan di dalam tanda kurung. Jika parameternya lebih dari satu, maka setiap parameter harus dipisahkan dengan tanda koma, contohnya <code>function nama(a,b,c)</code>.</p>\n\n<h4>Body Function</h4>\n\n<p>Sebuah function akan berisi blok kode yang akan dijalankan ketika function dipanggil. Blok kode ini yang disebut sebagai body function dan penulisannya harus diletakkan di dalam tanda kurung kurawal buka ( <code>{<code></code></code> ) dan diakhiri dengan kurung kurawal tutup ( <code>}</code> ).</p>\n\n<h4>Keyword Return</h4>\n\n<p>Setiap function biasanya akan mengembalikan nilai tertentu sesuai kebutuhan. Untuk itu, jika function telah mencapai batas akhir dari kode blok gunakan keyword <code>return</code> kemudian diikuti dengan nilai yang dikembalikan.</p>\n\n<p>Pada kasus function tertentu, keyword ini juga berfungsi untuk menghentikan eksekusi dari blok function, sehingga kode apapun yang berada di baris bawahnya tidak akan dieksekusi lagi.</p>\n</div>\n\n<h3>Function Declaration</h3>\n\n<div class="wrapper-content">\n<p>Yang dimaksud dengan function declaration adalah function yang harus didefinisikan atau dideklarasikan dengan nama function. Syntax penulisan function ini adalah sebagai berikut.</p>\n\n<pre>\n<code class="language-javascript">// parameter bersifat optional\nfunction identifier(parameter) {\n  \n  // blok kode yang ada di dalam body function\n  // berisi kode yang akan dieksekusi\n  \n  // nilai yang dikembalikan\n  return; // return bersifat optional\n}</code>\n</pre>\n\n<p>Cara menjalankan atau memanggil function declaration ini cukup dengan menuliskan nama function dan diakhiri dengan tanda kurung. Tanda kurung ini digunakan untuk menjalankan function tersebut dan jika tidak dituliskan tanda kurung maka JavaScript akan mengembalikan nilai berupa object berupa function itu sendiri. Jika terdapat parameter, maka pemanggilan function juga perlu diisikan <strong>argument</strong> yang akan diproses. Penjelasan tentang parameter dan argument ini akan dibahas lebih detail pada materi selanjutnya.</p>\n\n<p>Sekarang perhatikan dan pahami contoh kode di bawah ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Function JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Function Declaration&lt;/h1&gt;\n  \n  &lt;h3&gt;Klik untuk mengetahui hasil penjumlahannya&lt;/h3&gt;\n  &lt;button id="btn"&gt;hitung 10 + 13&lt;/button&gt;\n  &lt;!-- pemanggilan function lewat event handler --&gt;\n  &lt;button onclick="jumlah(101,234)"&gt;hitung 101 + 234&lt;/button&gt;\n  &lt;button onclick="jumlah(321,987)"&gt;hitung 321 + 987&lt;/button&gt;\n\n&lt;script&gt;\n  // deklarasi function\n  function jumlah(a,b){\n    alert(''hasilnya adalah '' + (a + b));\n  }\n  \n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    // pemanggilan function\n    jumlah(10,13);  \n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p><strong>Penjelasan contoh di atas</strong></p>\n\n<p>Sebuah function dibuat untuk ditugaskan menghitung angka diberikan nama <code>jumlah</code>. Function ini juga diberikan parameter yaitu <code>a</code> dan <code>b</code> sebagai bahan baku utama atau variable yang akan dijumlahkan. Saat function dipanggil, function ini membutuhkan 2 argument berupa angka yang nantinya akan masuk ke dalam function tersebut untuk mengisi tempat parameter sebagai a dan b.</p>\n\n<p>Pemanggilan function bisa dilakukan sebanyak apapun selama dibutuhkan untuk menjumlahkan 2 angka tanpa harus menuliskan perintah operasi penjumlahan ( <code>a + b</code> ) berulang kali. Cukup memanggil function dan mengganti angka yang akan dijumlahkan, maka hasil yang didapatkan pun telah sesuai dengan yang diharapkan.</p>\n\n<h5>Penggunaan yang Fleksibel</h5>\n\n<p>JavaScript pada umumnya mendeteksi dan menjalankan kode yang ditulis itu berurutan dari atas ke bawah, akan tetapi perilaku yang berbeda ditunjukkan pada function declaration ini. Kita bisa dengan bebas memanggil function pada baris sebelum atau sesudah function ini didefinisikan. Hal itu terjadi karena ada konsep yang dinamakan <strong>Hoisting</strong> di JavaScript yang membuat function declaration ini akan disimpan terlebih dahulu sebelum menjalankan baris kode yang lain.</p>\n\n<h5>Mudah dipahami oleh pemula</h5>\n\n<p>Konsep dari function declaration ini cenderung akan lebih mudah dipahami bagi yang masih baru belajar JavaScript karena cukup hanya mendeklarasikan dan penggunaanya bisa dilakukan lebih fleksibel. Akan tetapi, function ini, memiliki keterbatasan fungsional yang hanya bisa dilakukan oleh function expression.</p>\n</div>\n\n<p class="note" style="font-weight:bold;">Untuk pembahasan pada materi-materi selanjutnya, dalam demonstrasi contoh kode, kita akan menggunakan function declaration yang pemanggilannya akan disisipkan event onclick pada tombol.</p>\n\n<h3>Function Expression</h3>\n\n<div class="wrapper-content">\n<p>Penulisan function expression memiliki beberapa perbedaan dari function declaration meskipun nilai atau hasilnya tetap akan sama dengan function declaration.</p>\n\n<pre>\n<code class="language-javascript">// parameter bersifat optional\nidentifier = function(parameter) {\n  \n  // blok kode yang ada di dalam body function\n  // berisi kode yang akan dieksekusi\n  \n  // nilai yang dikembalikan\n  return; // return bersifat optional\n}\n</code></pre>\n\n<p>Disebut sebagai expression atau membentuk sebuah ekspresi karena identifier dialih fungsi menjadi nama variable sebagai tempat untuk menampung keseluruhan dari function.</p>\n\n<p>Untuk pembahasan tentang materi function di JavaScript Dasar ini, kita akan lebih banyak menggunakan function declaration. Namun untuk sekedar pengetahuan bentuk penulisan serta penggunaannya, kita akan coba mengubah contoh function declaration sebelumnya menjadi bentuk function expression.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Function JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Function Expression&lt;/h1&gt;\n  \n  &lt;h3&gt;Klik untuk mengetahui hasilnya&lt;/h3&gt;\n  &lt;button id="btn"&gt;hitung 10 + 13&lt;/button&gt;\n\n&lt;script&gt;\n  // deklarasi function\n  var jumlah = function(a,b){\n    alert(''hasilnya adalah '' + (a + b));\n  }\n  \n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    // pemanggilan function expression\n    jumlah(10,13);  \n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h5>Tidak Fleksibel</h5>\n\n<p>Function expression harus didefinisikan terlebih dahulu sebelum bisa dipakai pada kode yang ada di bawahnya. Memanggil function tanpa di dahului pendefinisian function akan menghasilkan eror.</p>\n\n<h5>Function Tingkat Lanjutan</h5>\n\n<p>Dengan function expression, pembuatan program yang rumit bisa dilakukan karena fungsionalitas yang disediakan oleh function expression lebih powerfull jika dibanding function declaration.</p>\n</div>\n\n<h3>Anonymous Function</h3>\n\n<div class="wrapper-content">\n<p>Untuk tambahan, sebenarnya ada lagi jenis function selain declaration dan expression yaitu Anonymous Function. Diberikan nama anonymous karena function ini tidak membutuhkan identifier, meski sebenarnya ini hanyalah bentuk lanjutan dari function expression. Function ini bisa digunakan untuk menjalankan dirinya sendiri tanpa perlu dipanggil (<strong>self invoke</strong>).</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Function JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Anonymous Function&lt;/h1&gt;\n  \n  &lt;h3&gt;Hasil penjumlahan 1 dan 2 adalah ...&lt;/h3&gt;\n  &lt;h3 id="str"&gt;&lt;/h3&gt;\n\n&lt;script&gt;\n  (function() {\n    \n    var angka = 1 + 2;\n    document.getElementById(''str'').innerHTML = angka;\n\n  })();\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Terlihat seperti tidak ada perbedaan dengan menulis kode tanpa function.\n  Function dalam bentuk ini belum akan digunakan di dalam materi JavaScript Dasar.\n  Untuk sekarang hanya perlu diperhatikan tata cara penulisannya\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 1524, 1554171121, 1593521435),
(7, 'B9PemM9', 'beginner', 10, 'JS Parameter', 'Parameter pada Function', 'definisi,parameter conflict,arguments,manfaat arguments', 1, '<p>Masih melanjutkan materi tentang function sebelumnya. Pada materi ini, kita akan membahas lebih detail tentang Parameter dan Argument sebagai bagian utama dari function. Keduanya merupakan bahan baku untuk diproses di dalam function dan akan selalu berhubungan satu sama lain. Juga ada yang disebut sebagai <strong>Arguments</strong>, yang merupakan bagian lain dari function.</p>\n\n<h3>Definisi</h3>\n\n<div class="wrapper-content">\n<p><strong>Parameter</strong> adalah variabel yang ditulis di dalam tanda kurung setelah nama function dideklarasikan. Parameter ini digunakan untuk menampung nilai yang nantinya akan dikirimkan saat function dipanggil.</p>\n\n<p>Sedangkan yang dimaksud dengan <strong>argument</strong> adalah nilai yang dikirimkan untuk masuk ke dalam variable parameter saat proses pemanggilan function.</p>\n\n<pre>\n<code class="language-javascript">// deklarasi function\nfunction jumlah(a,b) { // a dan b disebut dengan parameter\n  return a + b;\n}\n  \n// pemanggilan function\njumlah(4,5); // angka 4 dan 5 disebut dengan argument</code></pre>\n\n<p>Nilai yang dimasukkan sebagai argument bisa fleksibel sesuai dengan kebutuhan. Nilai dari argument bisa berupa nilai yang tetap ataupun nilai dari variable yang didapat input dari user, bahkan function lain pun bisa dimasukkan sebagai argument.</p>\n\n<p>Untuk memahami penggunaan parameter dan argument, perlu ketelitian dalam membedakannya ketika nama variable parameter sama dengan nama variable yang dimasukkan sebagai argument.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Parameter dan Argument&lt;/h1&gt;\n  \n  &lt;h3&gt;Gabung seriap kata ini menggunakan function.&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Belajar&lt;/li&gt;\n    &lt;li&gt;JavaScript&lt;/li&gt;\n    &lt;li&gt;tentang&lt;/li&gt;\n    &lt;li&gt;function&lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  // deklarasi function\n  function gabung(a,b) {\n    return a + " " + b;\n  }\n  function tampilkan(a) {\n    alert(a);\n  }\n  \n  function play(){\n    var a = "Belajar", b = "JavaScript", c = "tentang", d = "function";\n    \n    // pemanggilan function\n    var pertama = gabung(a,b); // Belajar JavaScript\n    var kedua = gabung(c,d); // tentang function\n    \n    // tampilkan ke layar\n    tampilkan(gabung(pertama,kedua));\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Dari contoh di atas, nama variable <code>a</code> dan <code>b</code> pada parameter dengan variable a dan b pada argument sepenuhnya berbeda meskipun menggunakan karakter yang sama. Variable pada argument akan mengacu pada nilai dari variable yang dideklarasikan, sedangkan variable pada parameter hanya sebagai tempat sementara untuk menampung apa yang dimasukkan sebagai argument.</p>\n\n<p>Pemberian nama variable yang sama seperti kasus di atas akan dijelaskan pada materi tentang <strong>Variable Scope</strong> yaitu tentang lingkup sebuah variable dapat digunakan.</p>\n</div>\n\n<h3>Parameter Conflict</h3>\n\n<div class="wrapper-content">\n<p>Dalam beberapa kasus tertentu penggunaan parameter beserta argumentnya bisa saja tidak sesuai jumlahnya. Jika sebuah function memiliki 2 parameter sedangkan pemanggilan function menggunakan 3 argument atau sebaliknya, parameter ada 3 sedangkan argumentnya hanya 2. JavaScript akan memberikan perilaku seperti di bawah ini.</p>\n\n<p><strong>Jika jumlah parameter lebih sedikit dari argument, maka argument yang berlebihan itu akan diabaikan</strong>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Parameter dan Argument&lt;/h1&gt;\n  \n  &lt;h3&gt;Parameter lebih sedikit dari Argument&lt;/h3&gt;\n  &lt;!-- pemanggilan function dengan argument nilai 1, 2, dan 3 --&gt;\n  &lt;button onclick="jumlah(1,2,3)"&gt;jumlah(1,2,3)&lt;/button&gt;\n  \n&lt;script&gt;\n  // deklarasi function dengan parameter a dan b\n  function jumlah(a,b) {\n    alert(a + b);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Angka 3 sebagai argument function akan diabaikan saat pemanggilan function\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Sedangkan <strong>jika jumlah parameternya lebih banyak dari argument, maka parameter yang berlebihan secara default akan diisi dengan nilai <code>undefined</code></strong>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Parameter dan Argument&lt;/h1&gt;\n  \n  &lt;h3&gt;Parameter lebih banyak dari Argument&lt;/h3&gt;\n  &lt;!-- pemanggilan function dengan argument nilai 1 dan 2 --&gt;\n  &lt;button onclick="jumlah(1,2)"&gt;jumlah(1,2)&lt;/button&gt;\n  \n&lt;script&gt;\n  // deklarasi function dengan parameter a, b, dan c\n  function jumlah(a,b,c) {\n    alert(a + b);\n    alert(c);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Nilai variable c akan otomatis terisi dengan nilai undefined\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold;">Perilaku parameter dan argument yang tidak sesuai dalam function JavaScript tetap akan bisa berjalan normal. Berbeda dengan bahasa program lain seperti PHP, yang mengharuskan parameter dan argumentnya memiliki jumlah yang sesuai</p>\n</div>\n\n<h3>Arguments</h3>\n\n<div class="wrapper-content">\n<p>Di JavaScript terdapat keyword yang hampir mirip dengan argument yaitu <code>arguments</code> atau yang berarti sekumpulan argument. Arguments ini dibuat secara otomatis oleh JavaScript sebagai variable untuk menampung semua argument yang dimasukkan ke dalam function dalam bentuk array.</p>\n\n<p>Pada saat pemanggilan sebuah function dengan beberapa argument di dalamnya, nilai-nilai dari argument itu selain dikirimkan ke parameter, argument itu juga secara otomatis akan dikirimkan juga ke dalam variable arguments ini. Variable ini juga disebut sebagai <em>pseudo variable</em> atau variable semu atau variable itu sepertinya tidak ada padahal sebenarnya ada dalam bentuk array.</p>\n\n<p>Untuk mengetahui bahwa variable ini ada, perhatikan contoh di bawah ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Variable Arguments&lt;/h1&gt;\n  \n  &lt;!-- pemanggilan function dengan beberapa argument --&gt;\n  &lt;button onclick="lihat(19,''hello world'',true)"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  // deklarasi function tanpa satu pun parameter\n  function lihat() {\n    console.log(arguments);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Buka DevTools tab console untuk melihat hasilnya\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Manfaat Arguments</h3>\n\n<div class="wrapper-content">\n<p>Hal yang merepotkan dalam membuat function bekerja tepat sesuai dengan keinginan adalah harus menentukan jumlah parameter agar sesuai dengan jumlah argument yang akan dioperasikan. Misalkan untuk membuat function dengan parameter hanya 3 saja, sedangkan pada kasusnya, ada 5 argument yang akan dimasukkan di dalamnya. Tentunya yang perlu dilakukan adalah mengubah atau menambahkan parameter pada function tersebut agar sesuai dengan banyaknya argument yang ingin dioperasikan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Function yang kurang fleksible&lt;/h1&gt;\n  \n  &lt;h3&gt;Lakukan operasi penjumlahan pada angka berikut dengan satu function !&lt;/h3&gt;\n  &lt;button onclick="jumlah(1,2,3)"&gt;jumlah(1,2,3)&lt;/button&gt;\n  &lt;button onclick="jumlah(1,2,3,4,5)"&gt;jumlah(1,2,3,4,5)&lt;/button&gt;\n\n&lt;script&gt;\n  function jumlah(a,b,c) {\n    alert(a + b + c);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Function jumlah() hanya mampu mengatasi pemanggilan yang menggunakan 3 argument saja.\n  Jika argument yang dikirimkan lebih dari 3, maka sisanya tidak akan dioperasikan.\n  Sehingga perlu function lagi yang menggunakan 5 parameter agar pengoperasian lainnya bisa diproses dengan benar\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Dalam kasus seperti itu, variable arguments bisa dimanfaatkan. Nilai arguments berupa data array, yang setiap masing-masing nilainya akan selalu memiliki nomor index berurutan dari 0 sesuai urutan argument yang dimasukkan dari kiri ke kanan. Nomor index dari data array inilah nantinya yang akan digunakan untuk menangani permasalahan dari contoh di atas dengan cara melakukan syntax pengulangan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Parameter Function&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Arguments Function&lt;/h1&gt;\n  \n  &lt;h3&gt;Lakukan operasi penjumlahan pada angka berikut dengan satu function !&lt;/h3&gt;\n  &lt;button onclick="jumlah(1,2,3)"&gt;jumlah(1,2,3)&lt;/button&gt;\n  &lt;button onclick="jumlah(1,2,3,4,5)"&gt;jumlah(1,2,3,4,5)&lt;/button&gt;\n\n&lt;script&gt;\n  function jumlah() {\n    var hasil = 0;\n    var arg = arguments;\n    // proses pengulangan\n    for( var i = 0; i &lt; arg.length; i++){\n      hasil += arg[i];\n    }\n    alert(hasil);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Dengan cara ini, memasukkan sebanyak apapun argument angka untuk dijumlahkan,\n  maka semua angkanya akan tetap dioperasikan dengan benar\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 985, 1554171121, 1593411435);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(8, 'Bsi6Z4d', 'beginner', 11, 'JS Scope Variable', 'Jangkauan Variable JavaScript', 'jenis scope,local variable,global variable,auto global,name conflict,lifetime variable,block scope,function scope,scope parameter', 1, '<p>Materi scope variable ini juga sangat penting untuk dipahami. Dengan memahami konsep ini, maka kita bisa membedakan dalam menulis sebuah variable serta menggunakannya di dalam struktur kode JavaScript meski tanpa sengaja menuliskan nama variable yang sama dengan nilai yang berbeda.</p>\n\n<h3>Jenis Scope</h3>\n\n<div class="wrapper-content">\n<p>Scope Variable adalah <strong>lingkup</strong> dimana sebuah variable dapat diakses di dalam sebuah program. Kita sebelumnya telah mengetahui bahwa untuk membuat variable adalah dengan cara mendeklarasikan nama variable dengan keyword var kemudian mengisikan nilainya dengan tipe data apapun. Tetapi dalam penggunaan variable ini, ada hal yang perlu diperhatikan yaitu pada bagian mana saja variable bisa diakses oleh statement lainnya di dalam program.</p>\n\n<p>Sebelum memahami konsep ini lebih lanjut, kita perlu mengetahui jenis scope variable yang umumnya ada pada semua bahasa program. Dalam aturan bahasa program terdapat dua jenis scope yaitu <strong>Block Scope</strong> dan <strong>Function Scope. </strong>Setiap<strong> </strong>bahasa umumnya akan menggunakan salah satu aturan yang ada dari keduanya.</p>\n\n<p>Sebuah scope atau lingkup ini umumnya akan ditandai dengan ditulisnya tanda kurung kurawal buka ( <code>{</code> ) dan diakhiri dengan kurung kurawal tutup ( <code>}</code> ). Kode yang berada di luar tanda ini, bisa saja memiliki lingkup yang berbeda.</p>\n\n<h4>Block Scope</h4>\n\n<p>Bahasa program yang menerapkan konsep block scope memiliki aturan bahwa setiap variable yang dideklarasikan di dalam blok hanya akan bisa diakses di dalam suatu blok kode itu sendiri.</p>\n\n<pre>\n<code class="language-javascript">variable_1 = 2;\nif (variable_1 &lt; 3) {\n\n  variable_2 = true;\n  // variable_2 bisa digunakan di blok ini saja\n\n}\n// variable_2 tidak bisa digunakan di sini</code></pre>\n\n<p>Blok kode ini bisanya terdapat pada pengkodisian dan pengulangan. Beberapa bahasa program yang menggunakan konsep block scope ini adalah bahasa C dan bahasa C++.</p>\n\n<h4>Function Scope</h4>\n\n<p>Sedangkan pada function scope, sebuah variable yang dideklarasikan di dalam function hanya akan bisa diakses di dalam blok function itu sendiri.</p>\n\n<pre>\n<code class="language-javascript">variable_1 = 2;\nfunction test() {\n\n  variable_2 = true;  \n  // variable_2 bisa digunakan di blok ini saja\n\n}\n// variable_2 tidak bisa digunakan di sini</code></pre>\n\n<p>JavaScript adalah bahasa program yang menggunakan aturan konsep function scope sehingga variable yang dideklarasikan di dalam blok yang ada di dalam pengkondisian masih bisa diakses diluar blok tersebut.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Blok if else JavaScript&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;genap atau ganjil ?&lt;/button&gt;\n&lt;script&gt;\n  function play(){\n    var variable_1 = 2;\n    \n    if (variable_1 % 2 == 0) {\n      var variable_2;\n      variable_2 = "angkanya genap";\n    } else {\n      variable_2 = "angkanya ganjil";\n    }\n    // variable_2 bisa digunakan di luar statement if atau else di atas\n    alert(variable_2);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Sedangkan jika kode tersebut diterapkan pada kode function JavaScript, maka variable yang ada di dalam function tidak akan dikenali jika diakses dari luar function dan akan terjadi eror.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Blok function JavaScript&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;genap atau ganjil ?&lt;/button&gt;\n&lt;script&gt;\n  function play(){\n    \n    var variable_1 = 2;\n    function test(){\n      if (variable_1 % 2 == 0) {\n        var variable_2;\n        variable_2 = "angkanya genap";\n      } else {\n        variable_2 = "angkanya ganjil";\n      }\n    }\n    test();\n    // variable_2 tidak bisa diakses di luar function\n    alert(variable_2);\n\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Dari kondisi tersebut, variable_2 bisa disebut sebagai <strong>Local Variable</strong>, sedangkan untuk variable_1 bisa disebut sebagai <strong>Global Variable</strong>. Perbedaan keduanya ini terletak pada dimana variable itu dideklarasikan.<strong> </strong></p>\n</div>\n\n<h3>Local Variable</h3>\n\n<div class="wrapper-content">\n<p>Sebuah variable bisa disebut sebagai local variable karena proses deklarasi dari variable tersebut ditulis di dalam sebuah function tertentu. Variable hanya akan bisa diakses di dalam blok function itu saja, selain dari itu, variable tidak akan dikenali dan bisa saja menghasilkan error.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Local Variable&lt;/h1&gt;\n\n  &lt;h3&gt;Isi dari var_1 adalah &lt;u id="hasil1"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;h3&gt;Type data dari var_1 adalah &lt;u id="hasil2"&gt;&lt;/u&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  function test() { \n    // deklarasi variable di dalam function\n    var var_1 = ''saya adalah variable lokal'';\n    // mencetak var_1 di dalam function\n    document.getElementById(''hasil1'').innerHTML = var_1;\n  }\n  test();\n  \n  // mengakses tipe data var_1 di sini akan menghasilkan undefined\n  document.getElementById(''hasil2'').innerHTML = typeof var_1;\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Global Variable</h3>\n\n<div class="wrapper-content">\n<p>Jika mendeklarasikan sebuah variable di luar function, variable tersebut akan disebut sebagai global variable. Global variable bisa diakses dimana pun baik itu di dalam maupun di luar function.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Global Variable&lt;/h1&gt;\n\n  &lt;h3&gt;Isi dari var_0 adalah &lt;u id="hasil1"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;h3&gt;Type data dari var_0 adalah &lt;u id="hasil2"&gt;&lt;/u&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  // deklarasi variable di luar function\n  var var_0 = ''variable global'';\n  \n  // var_0 bisa diakses di sini\n  var_0 += '' yang bisa diakses dimana pun'';\n  function test() { \n    // var_0 juga bisa diakses di sini\n    document.getElementById(''hasil1'').innerHTML = var_0;\n  }\n  test();\n  \n  // var_0 juga bisa diakses di sini\n  document.getElementById(''hasil2'').innerHTML = typeof var_0;\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Global variable ini akan berada di pada lingkup global atau scope window yang berarti bahwa sebuah variable itu ada di dalam object <code>window</code> secara langsung. Object window merupakan object terluar yang ada di dalam JavaScript.</p>\n</div>\n\n<h3>Auto Global</h3>\n\n<div class="wrapper-content">\n<p>Yang perlu diperhatikan lebih teliti adalah penulisan keyword <code>var</code> saat menuliskan nama variable. Dalam sebuah kasus tertentu dimana penulisan variable <strong>tanpa</strong> didahului oleh keyword <code>var</code>, baik itu di dalam ataupun di luar function, maka secara otomatis variable tersebut akan dianggap sebagai variable global.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Auto Global Variable&lt;/h1&gt;\n\n  &lt;h3&gt;Isi dari variable_1 adalah &lt;u id="hasil1"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;h3&gt;Type data dari variable_1 adalah &lt;u id="hasil2"&gt;&lt;/u&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  function test() { \n    // deklarasi variable tanpa var di dalam function\n    // variable_2 menjadi otomatis global\n    variable_2 = ''variable auto global'';\n    \n  }\n  test();\n  // variable_2 bisa diakses di sini\n  document.getElementById(''hasil1'').innerHTML = variable_2;\n  document.getElementById(''hasil2'').innerHTML = typeof variable_2;\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Hal itu terjadi karena JavaScript akan memberikan perilaku berdasarkan ada atau tidaknya deklarasi variable baru (yang menggunakan keyword <code>var</code>) di dalam function. Jika tidak ada deklarasi, maka JavaScript akan membuatkan sebuah proses deklarasi variable globalnya sebelum kita memasukkan nilai ke dalam variable tersebut. Sehingga pada scope global tiba-tiba memiliki variable_2 sebagai variable global meskipun kita melakukan proses assign di dalam function.</p>\n\n<pre>\n<code class="language-javascript">// proses deklarasi otomatis JavaScript dibalik layar\nvar variable_2;\n  \n// variable_2 bisa diakses di sini\n\nfunction test() { \n  // proses assign variable di dalam function\n  variable_2 = ''variable auto global'';    \n}\ntest();\n  \n// variable_2 bisa diakses di sini</code></pre>\n\n<p class="note" style="font-weight:bold">Jika tujuannya ingin membuat variable local di dalam function maka selalu disarankan untuk menggunakan keyword <code>var</code>.</p>\n</div>\n\n<h3>Name Conflict</h3>\n\n<div class="wrapper-content">\n<p>Pada kasus lainnya, ada kemungkinan penulisan variable dengan nama yang sama dengan nilai yang berbeda. Akan tetapi jika variable ini berbeda scope, maka JavaScript akan membedakan keduanya sehingga nilainya tidak akan menimpa satu sama lain.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Name Conflict Variable&lt;/h1&gt;\n\n  &lt;button onclick="pertama()"&gt;local&lt;/button&gt;\n  &lt;button onclick="kedua()"&gt;global&lt;/button&gt;\n  \n&lt;script&gt;\n  // deklarasi global\n  var variable_3 = ''variable global di luar function''; \n  \n  function pertama() { \n    // deklarasi local\n    var variable_3 = ''variable lokal di dalam function'';\n    \n    // variable_3 akan mengacu pada deklarasi local\n    alert(variable_3); \n  }\n  \n  function kedua(){\n    // variable_3 akan mengacu pada deklarasi global\n    alert(variable_3);    \n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Scope Parameter</h4>\n\n<p>Yang cukup membingungkan dalam penggunaan nama variable yang sama biasanya adalah pada penulisan variable di dalam function yang terdapat parameternya. Setiap function yang ada parameternya, maka parameter tersebut akan selalu menjadi variable lokal. Variable ini hanya akan mengacu pada argument yang dikirimkan sebagai argument saat pemanggilan function.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Scope&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Name Conflict Parameter&lt;/h1&gt;\n\n  &lt;!-- argument angka 123 --&gt;\n  &lt;button onclick="test(123)"&gt;Variable pada Parameter&lt;/button&gt;\n  &lt;button onclick="play()"&gt;Variable Global&lt;/button&gt;\n  \n&lt;script&gt;\n  // deklarasi variable global\n  var a = 1; \n  \n  // deklarasi function dengan parameter\n  function test(a) { // a akan mengacu pada argument\n    alert(a); // a akan mengacu pada parameter\n  }\n  function play(){\n    alert(a); // a akan mengacu pada variable global\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Lifetime Variable</h3>\n\n<div class="wrapper-content">\n<p>Variable yang dibuat akan selalu ada yang disebut sebagai lifetimenya atau masa berlaku dari sebuah variable dapat digunakan. Dalam mekanismenya, saat browser menjalankan kode program yang telah ditulis, nama-nama variable beserta nilai terakhirnya (jika ada) akan disimpan ke dalam memori komputer.</p>\n\n<p>Untuk Local Variable, masa berlakunya hanya akan tersedia saat function dijalankan saja. Setelah function selesai dijalankan, semua variable yang ada di dalamnya akan dihapus dari memori. Hal itulah yang menyebabkan akses variable di luar function terhadap variable lokal akan selalu mendapati error karena variable yang dimaksudkan sudah tidak tersedia lagi.</p>\n\n<pre>\n<code class="language-javascript">function test(){\n  var variable = ''variable lokal''; // deklarasi &amp; inisialisasi\n  // browser akan menyimpan informasi tentang variable \n}\n\n// jalankan function sekaligus hapus variable dari memori\ntest();\n\n// variable sudah tidak tersedia lagi di dalam memori\n</code></pre>\n\n<p>Sedangkan untuk masa berlaku Global variable adalah sejak mulai dibukanya window browser untuk memuat halaman sampai dimuat ulang atau ditutupnya halaman di window browser tersebut.</p>\n\n<pre>\n<code class="language-javascript">var variable = ''variable global''; // deklarasi &amp; inisialisasi\n// browser akan menyimpan variable beserta nilainya\n// selama window atau tab browser tidak ditutup\n// variable nama tetap bisa digunakan </code></pre>\n</div>\n\n', 1376, 1554171121, 1595480855),
(9, 'BSi5Anl', 'beginner', 8, 'JS Data Type', 'Tipe Data pada JavaScript', 'definisi tipe data,tipe data number,tipe data string,tipe data boolean,tipe data object,tipe data function,tipe data undefined,string kosong,nilai null', 1, '<p>Kenapa harus ada tipe data dan mengapa harus tipe data. Untuk memahami <strong>tipe data</strong> dalam bahasa program, pengetahuan tentang apa sebenarnya istilah &quot;<strong>data</strong>&quot; pada sebuah komputer cukup diperlukan. Baru setelah mengetahui apa itu data, selanjutnya akan mudah untuk mengenali jenis data atau tipe dari data tersebut.</p>\n\n<h3>Definisi Tipe Data</h3>\n\n<div class="wrapper-content">\n<p>Di dalam sebuah komputer, jika kita teliti lebih dalam, maka yang ada hanyalah apa yang disebut dengan &quot;<strong>DATA</strong>&quot;. Data ini tersimpan di dalam memory komputer yang dalam hal ini akan ada di dalam RAM dan CPU sebagai unit pemroses data. Data-data tersebut bisa dimodifikasi, ditambah atau dihapus.</p>\n\n<p>Semua data tadi tersimpan dalam rangkaian bit. <strong>Bit </strong>atau <strong>binary digit </strong>/ bilangan biner adalah satuan terkecil yang ada di dalam komputer. Nilai dari bit ini hanya ada <code>1 </code>dan <code>0</code>. Angka 1 merepresentasikan bahwa sebuah hardware itu dialiri dengan listrik sedangkan 0, tidak dialiri listrik. Hal ini mirip dengan instalasi lampu di rumah kita, 1 bisa kita anggap sebagai lampu menyala dan 0 sebagai lampu padam.</p>\n\n<p>Lalu bagaimana cara komputer mengolah sebuah data itu ?</p>\n\n<p>Jika kita mengenal angka bulat seperti angka 23, maka di dalam bilangan biner atau bahasa yang dipakai di dalam hardware komputer, angka tersebut akan menjadi 10111. Seperti teori matematika pada bilangan desimal yaitu adanya satuan, puluhan, ribuan dan seterusnya. Pada angka 23, angka 2 mewakili nilai puluhan sedangkan angka 3 mewakili satuan. 2 x 10 dan 3 x 1 sehingga didapat hasil 23.</p>\n\n<p style="text-align: center;"><img alt="desimal" class="img-responsive" src="http://localhost/helloworld/assets/img/desimal.png" style="width: 400px; height: 134px;" title="bilangan desimal" /></p>\n\n<p>Hal yang sama terjadi pada bilangan biner di komputer, namun yang membedakan adalah nilai acuan yang dipakai, bukan lagi menggunakan satuan, puluhan dan lainnya, tetapi menggunakan angka 1, 2, 4, 8, 16, 32, 64 dan seterusnya.</p>\n\n<p style="text-align: center;"><img alt="biner" class="img-responsive" src="http://localhost/helloworld/assets/img/biner.png" style="width: 437px; height: 131px;" title="bilangan biner" /></p>\n\n<p>Itu baru untuk angka 23 saja, sekarang bagaimana dengan representasi huruf, symbol, dan semua karakter yang bisa ditampilkan di dalam layar komputer. Komputer didesain agar bekerja dengan caranya sendiri dalam mengatasi semua kerumitan bit yang ada tanpa kebingungan. Komputer akan menggunakan bit-bit tersebut dan membaginya ke dalam potongan yang disebut dengan <strong>value</strong>. Meski potongan tersebut tersusun dari bit, tetapi bisa saja memiliki peran yang berbeda. Dan beberapa peran yang ada inilah yang nantinya kita sebut dengan <strong>TIPE DATA</strong>. Kita bisa coba bermain konversi bilangan atau text apa saja untuk diterjemahkan dalam bilangan biner di situs <a href="https://www.convertworld.com/" target="_blank">https://www.convertworld.com</a>.</p>\n\n<p>Seperti itulah penjelasan yang sangat sederhana tentang bagaimana data diproses didalam komputer. Tentu mekanismenya akan lebih kompleks lagi dari penjelasan di atas. Tetapi, kita tidak akan berfokus pada proses bagaimana data di dalam komputer, melainkan hanya bagaimana memberikan perintah ke komputer dengan memasukkan input berupa value yang telah diberikan label oleh JavaScript dengan berbagai tipe data yang disediakan.</p>\n\n<p>Setiap bahasa program selalu memiliki istilah tipe data yang berbeda, termasuk JavaScript yang memiliki 6 tipe data yang bisa digunakan untuk membuat program yang sesuai kebutuhan.</p>\n\n<ol>\n	<li>Number</li>\n	<li>String</li>\n	<li>Boolean</li>\n	<li>Object</li>\n	<li>Function</li>\n	<li>Undefined</li>\n</ol>\n\n<p>Untuk menggunakan setiap tipe data, cukup hanya menuliskan nilainya. Seperti halnya jika ingin membuat angka 10, maka cukup menuliskan angkanya saja dan secara otomatis komputer akan memberikan label bahwa yang dimasukkan ini adalah bertipe data number atau angka. Begitu juga apabila ingin memasukkan sebuah karakter kata, maka cukup menuliskannya di antara tanda kutip, dan komputer akan memberikan label data itu dengan tipe data string.</p>\n\n<p>Di bawah ini adalah penjelasan singkat dari masing-masing keenam tipe data di JavaScript. Ada beberapa yang mungkin kita sudah familiar karena penggunaannya cukup sering pada materi-materi sebelumnya seperti tipe data string, number dan boolean, tapi ada juga yang mungkin masih awam dengan dunia programming, yaitu object, array, function dan undefined.</p>\n</div>\n\n<h3>Tipe Data Number</h3>\n\n<div class="wrapper-content">\n<p>Tipe data number adalah tipe data yang berisi nilai angka baik itu angka bulat, angka pecahan maupun angka negatif.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data Number&lt;/h1&gt;\n\n  &lt;h3&gt;angka 23, angka 3.14 dan angka -13&lt;/h3&gt;\n  &lt;button id="btn"&gt;cek tipe data&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert(typeof 23);\n    alert(typeof 3.14);\n    alert(typeof -13);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Tipe Data String</h3>\n\n<div class="wrapper-content">\n<p>Tipe data string atau bisa disebut juga sebagai text yaitu tipe data yang nilainya berisi kumpulan karakter baik itu huruf, simbol atau angka. String ini harus selalu ditulis di dalam tanda kutip double ( <code>&quot; &quot;</code> ) atau bisa juga dengan tanda kutip singgle ( <code>&#39; &#39;</code> ).</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data String&lt;/h1&gt;\n\n  &lt;h3&gt;text "Hello World" dan angka "14"&lt;/h3&gt;  \n  &lt;button id="btn"&gt;cek tipe data&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert(typeof "Hello World");\n    alert(typeof "14");\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold;">Meski berbentuk angka, tetapi jika ada di dalam tanda kutip, maka angka itu tetap dianggap sebagai string.</p>\n</div>\n\n<h3>Tipe Data Boolean</h3>\n\n<div class="wrapper-content">\n<p>Tipe data boolean adalah tipe data yang isinya hanya berupa 2 kondisi yang diwakili dengan <b>true </b>untuk kondisi benar dan <strong>false </strong>untuk kondisi salah.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data Boolean&lt;/h1&gt;\n  \n  &lt;h3&gt;boolean true dan false&lt;/h3&gt;\n  &lt;button id="btn"&gt;cek tipe data&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert(typeof true);\n    alert(typeof false);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Tipe Data Object</h3>\n\n<div class="wrapper-content">\n<p>Di dalam JavaScript, terdapat data yang diberi nama object dan array. Keduanya berfungsi untuk menampung nilai, sama seperti variable pada umumnya, namun untuk object dan array ini bisa menampung beberapa nilai sekaligus yang ditandai dengan pasangan key dan value untuk setiap nilainya.</p>\n\n<p>Cara penulisan data object harus ditulis di dalam tanda kurung kurawal ( <code>{ } </code>) yang antar nilainya dipisahkan dengan tanda koma, sedangkan untuk array, penulisannya yaitu di dalam tanda kurung siku ( <code>[ ]</code> ).</p>\n\n<p>Tidak seperti bahasa program lainnya yang mengelompokkan array sebagai tipe data sendiri. Array di dalam JavaScript termasuk ke dalam tipe data object. Array di JavaScript memiliki method yang berbeda dari object.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data Object dan Array&lt;/h1&gt;\n  \n  &lt;h3&gt;Object { nama : ''John'', umur : 23 }&lt;/h3&gt;\n  &lt;button id="btn1"&gt;cek tipe data&lt;/button&gt;\n  \n  &lt;h3&gt;Array [''John'',23]&lt;/h3&gt;\n  &lt;button id="btn2"&gt;cek tipe data&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol1 = document.getElementById(''btn1'');\n  tombol1.onclick = function(){\n    // object\n    var obj = { nama : ''John'', umur : 23 };\n    alert(typeof obj);\n  };\n  var tombol2 = document.getElementById(''btn2'');\n  tombol2.onclick = function(){\n    // array\n    var arr = [''John'',23];\n    alert(typeof arr);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Tipe Data Function</h3>\n\n<div class="wrapper-content">\n<p>Function digunakan untuk mengelompokkan bagian-bagian kode sesuai kegunaan yang dikehendaki dan akan bisa digunakan jika function itu dipanggil.</p>\n\n<p>Contoh di bawah ini adalah salah satu bentuk function yang nantinya akan kita perdalam lagi penjelasannya di materi yang lain. Untuk saat ini, perhatikan saja strukturnya dan bagaimana penulisannya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data Function&lt;/h1&gt;\n  \n  &lt;pre&gt;\n  function test(){ \n    alert(''Hello World'');\n  }\n  &lt;/pre&gt;\n  &lt;button id="btn1"&gt;jalankan function&lt;/button&gt;\n  &lt;button id="btn2"&gt;cek tipe data&lt;/button&gt;\n  \n&lt;script&gt;\n  function test(){\n    alert(''Hello World'');\n  };\n  \n  var tombol1 = document.getElementById(''btn1'');\n  tombol1.onclick = function(){\n    test();\n  };\n  \n  var tombol2 = document.getElementById(''btn2'');\n  tombol2.onclick = function(){\n    alert(typeof test);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Tipe Data Undefined</h3>\n\n<div class="wrapper-content">\n<p>Tipe data undefined adalah sebuah tipe data dalam JavaScript yang nilainya secara default akan diberikan oleh JavaScript sendiri. Hal ini terjadi saat mendeklarasikan sebuah variable tanpa mengisikan nilainya, maka JavaScript akan secara otomatis memberikan nilai pada variable itu dengan nilai <code>undefined</code>, begitu pula dengan tipe datanya juga akan bertipe <code>undefined</code>. Kondisi ini bisa juga terjadi jika terdapat kesalahan program yang secara tidak sengaja dilakukan ketika objek yang akan diproses belum teridentifikasi.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Tipe Data Undefined&lt;/h1&gt;\n  \n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var kosong;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    alert(''nilai dari variable adalah '' + kosong);\n    alert(''tipe datanya adalah '' + typeof kosong);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>String Kosong</h4>\n\n<p>Hal berbeda jika kita mendeklarasikan variable kemudian mengisikan sebuah nilai meski nilainya berupa string kosong, variable yang tadinya bertipe undefined akan berubah menjadi string.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;String Kosong dan Undefined&lt;/h1&gt;\n  \n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var kosong; // undefined\n    alert(''sebelum diberi nilai : '' + typeof kosong);\n    kosong = ''''; // string\n    alert(''setelah diberikan nilai : '' + typeof kosong);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Nilai Null</h4>\n\n<p>Di dalam JavaScript nilai <code>null </code>berarti penetapan nilai yang &quot;<strong>tidak ada</strong>&quot;. Meski nilainya agak mirip dengan undefined yaitu sama-sama tidak ada atau belum terdefinisikan, namun keduanya merupakan dua tipe data yang berbeda karena null ini termasuk bertipe data object.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Null dan Undefined&lt;/h1&gt;\n  \n  &lt;button id="btn"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var tombol = document.getElementById(''btn'');\n  tombol.onclick = function(){\n    var x = undefined, y = null;\n    alert(''variable x tipenya adalah '' + typeof x);\n    alert(''variable y tipenya adalah '' + typeof y);\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 1346, 1554171121, 1593406530),
(10, 'BP9LPmJ', 'beginner', 12, 'JS String', 'Tipe Data String JavaScript', 'penulisan string,special character,konkatenasi string,string literal,property length', 1, '<p>Istilah string di dalam bahasa program adalah sebuah nilai yang berisi kumpulan karakter yang membentuk sebuah text. Tipe data string di JavaScript ini digunakan untuk merepresentasikan sebuah data yang bersifat teks biasa atau plain text.</p>\n\n<h3>Penulisan String</h3>\n\n<div class="wrapper-content">\n<p>Aturan utama penulisan string ini adalah harus selalu ditulis di dalam tanda kutip ganda ( <code>&quot; &quot;</code> ) atau di dalam tanda kutip tunggal ( <code>&#39; &#39;</code> ). Penggunaan tanda kutip ganda atau tanda kutip tunggal ini bebas, namun yang perlu diperhatikan adalah jika kita ingin menampilkan karakter tanda kutip itu sendiri di dalam string, maka harus diperhatikan penulisannya agar data bisa ditampilkan sesuai yang diharapkan.</p>\n\n<p>Jika di dalam string terdapat karakter tanda kutip tunggal maka sebaiknya string diapit dengan tanda kutip ganda. Begitupun jika di dalam string terdapat karakter tanda kutip ganda maka string sebaiknya diapit tanda kutip tunggal.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Tipe Data String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Penulisan Tanda Kutip String&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt; \n\n&lt;script&gt;\n  function play(){\n    var x = "Saya sedang belajar JavaScript";\n    alert(x);\n    \n    // string yang terdapat tanda kutip tunggal\n    var y = "Apakah sekarang adalah hari Jum''at ?";\n    alert(y);\n    \n    // string yang terdapat tanda kutip ganda\n    var z = ''Saya sedang belajar "JavaScript" di sebuah website'';\n    alert(z);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Special Character</h3>\n\n<div class="wrapper-content">\n<p>Karena di dalam bahasa program terdapat karakter-karakter yang digunakan sebagai syntax aturan penulisan kode, maka dalam penggunaannya harus benar-benar diperhatikan terhadap beberapa karakter khusus ini. Ada kalanya kita diharuskan untuk menuliskan kedua tanda kutip baik kutip ganda dan kutip tunggal dalam sebuah string secara bersamaan, sedangkan salah satu tanda kutipnya telah digunakan untuk membungkus string tersebut.</p>\n\n<pre>\n<code class="language-javascript">var kata = ''Pada hari Jum''at, saya belajar "JavaScript"'';</code></pre>\n\n<p>String dideteksi dari awal tanda kutip pembuka sampai tanda kutip penutupnya. Pada kasus variable <code>kata</code> di atas, string hanya terdeteksi sebagai &quot;<code>Pada hari Jum</code>&quot;, sedangkan karakter selanjutnya akan terdeteksi sebagai error identifier dan eksekusi JavaScript dihentikan.</p>\n\n<p>Untuk kasus seperti itu, hal yang bisa dilakukan untuk menghindari error adalah dengan <strong>escape character</strong>. Escape character<strong> </strong>adalah cara yang digunakan untuk menampilkan sebuah karakter yang akan diartikan berbeda pada bahasa program. Tanda kutip dalam JavaScript digunakan untuk menandai tipe data sebagai string. Sedangkan untuk menampilkan tanda kutip hanya sebagai string biasa, diperlukan escape karakter kutip dengan menambahkan tanda backslash ( <code>\\</code> ). Sehingga cara penulisan string yang tepat untuk menghindari error JavaScript adalah seperti di bawah ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Tipe Data String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Penulisan dengan Escape&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt; \n\n&lt;script&gt;\n  function play(){\n    var x = ''Pada hari Jum\\''at kemarin, saya belajar "JavaScript" di sebuah website'';\n    alert(x);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Beberapa karakter lainnya yang ingin ditampilkan sebagai string biasa dengan escape character adalah sebagai berikut. Silahkan dicoba sendiri cara penulisannya.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover table-condensed" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">Escape character</th>\n			<th scope="col">Output</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align: center;"><code>\\0</code></td>\n			<td>karakter <code>NULL</code></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\&quot;</code></td>\n			<td>karakter kutip ganda <code>&quot;</code></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\&#39;</code></td>\n			<td>karakter kutip tunggal <code>&#39;</code></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\\\</code></td>\n			<td>karakter backslash <code>\\</code></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\n</code></td>\n			<td>karakter baris baru</td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\t</code></td>\n			<td>karakter tab</td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\b</code></td>\n			<td>backspace</td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><code>\\uXXX</code></td>\n			<td>karakter <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters" target="_blank">unicode</a> (simbol unik)</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<h3>Konkatenasi String</h3>\n\n<div class="wrapper-content">\n<p>Konkatenasi atau penggabungan string bisa dilakukan dengan menggunakan operator plus ( <code>+</code> ). Operator ini memiliki tindakan yang berbeda terhadap tipe data string. Bukan untuk menjumlahkan string tetapi akan menggabungkan string meskipun di string itu berbentuk angka.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Tipe Data String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Penggabungan String&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt; \n\n&lt;script&gt;\n  function play(){\n    var x = ''Pada hari Jum\\''at kemarin, jam'';\n    var y = '' 12'';\n    var z = '' siang, saya belajar "JavaScript".'';\n    alert(x + y + z);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>String Literal</h3>\n\n<div class="wrapper-content">\n<p>Penulisan string menggunakan string literal mulai diperkenalkan oleh JavaScript pada versi ES6 tahun 2015. Penandaan string yang semula hanya bisa menggunakan tanda kutip tunggal ataupun tanda kutip ganda, sekarang bisa ditulis dengan menggunakan tanda backtick ( <code>` `</code> ) . Kelebihan menggunakan tanda backtick ini salah satunya adalah memperbolehkan penulisan string di dalam baris baru dan menampilkannya sesuai apa yang ditulis di dalam kode seperti karakter tab ataupun baris baru.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Tipe Data String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;String Literal&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt; \n\n&lt;script&gt;\n  function play(){\n    // menuliskan kedua tanda tunggal dan ganda bersamaan sebagai String\n    var x = `Pada hari Jum''at kemarin, saya belajar "JavaScript" di sebuah website`;\n    alert(x);\n    \n    // menuliskan karakter baris baru dan tab\n    var y = `Selamat datang\n    di website kami,\n      selamat belajar`;\n    alert(y);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Property Length</h3>\n\n<div class="wrapper-content">\n<p>Tipe data string memiliki property bawaan dari JavaScript berupa <code>length</code> yang digunakan untuk mengetahui panjang karakter dari sebuah string. Penghitungan panjang karakter ini juga memasukkan satu karakter spasi sebagai satu karakter.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n	&lt;title&gt;Tipe Data String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Property Length pada String&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;string.length&lt;/button&gt; \n\n&lt;script&gt;\n  function play(){\n    var x = "Java Script";\n    alert(x.length);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 724, 1554171121, 1593521551),
(11, 'BOddR86', 'beginner', 13, 'JS Method String', 'Method pada Tipe Data String', 'indexof,charat,match,replace,slice,substr,split,tostring,tolowercase,touppercase,trim', 1, '<p>Di dalam setiap tipe data di JavaScript terdapat method built in atau method yang sudah disediakan untuk keperluan pengolahan masing masing tipe data. Bagi yang belum tahu apa itu method, method ini juga termasuk sebuah function yang dibuat untuk sebuah tugas yang spesifik. Untuk lebih memahami istilah method, penjelasannya akan dibahas lebih detail pada materi tentang tipe data Object. Untuk kali ini, kita akan pahami dulu bagaimana menggunakan method-method ini.</p>\n\n<p>Method string ini cukup banyak jumlahnya, pada kesempatan ini, kita akan menjelaskan hanya beberapa method yang sering digunakan saja.</p>\n\n<h3>indexOf</h3>\n\n<div class="wrapper-content">\n<p>Method <code>indexOf()</code> biasa digunakan untuk mencari letak index karakter secara spesifik di dalam sebuah string dan akan mengembalikan nilai berupa angka index. Method akan mengembalikan nilai -1 apabila karakter yang dicari di dalam string tidak ditemukan.</p>\n\n<pre class="line-numbers">\n<code>string.indexOf(karakter)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method indexOf String&lt;/h1&gt;\n  \n  &lt;h3&gt;Index huruf ''e'' pada string "Hello World"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.indexOf()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hasil;\n    var text = "Hello World";\n    \n    // parameter diisikan huruf "e" sebagai karakter yang akan dicari\n    hasil = text.indexOf("e");\n    alert(hasil);\n  }  \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold;">Angka index selalu dihitung mulai dari angka 0 sebagai awalnya</p>\n</div>\n\n<h3>charAt</h3>\n\n<div class="wrapper-content">\n<p>Method <code>charAt()</code> merupakan kebalikan dari indexOf yaitu mencari karakter apa yang terletak pada index tertentu.</p>\n\n<pre class="line-numbers">\n<code>string.charAt(angkaIndex)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method charAt String&lt;/h1&gt;\n  \n  &lt;h3&gt;Karakter pada index ke 2 pada string "Hello World"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.charAt()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "Hello World";\n    var hasil;\n    // parameter posisi index ke 2\n    hasil = text.charAt(2);\n    alert(hasil);\n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>match</h3>\n\n<div class="wrapper-content">\n<p>Method <code>match()</code> digunakan untuk menemukan sebuah kecocokan frase karakter atau text di dalam string. Frase kata ataupun karakter ini bisa juga ditulis di dalam regular expression sebagai parameternya. <strong>Regular Expression</strong> atau biasa disingkat RegExp adalah sekumpulan urutan karakter yang membentuk frase dan terdiri yang terdiri dari beberapa karakter khusus sesuai pola frase yang dikehendaki. RegExp selalu diawali dan diakhiri dengan tanda garis miring.</p>\n\n<pre class="line-numbers">\n<code>string.match(RegExp)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Match String&lt;/h1&gt;\n  \n  &lt;p id="text"&gt;\n    JavaScript merupakan bahasa pemrograman murni, \n    tidak seperti HTML atau CSS. JavaScript memiliki tingkat kompleksitas \n    yang lebih tinggi dibandingkan dengan HTML atau CSS.\n  &lt;/p&gt;\n  &lt;button onclick="play()"&gt;string.match()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = document.getElementById(''text'').innerHTML;\n    var hasil;\n    // regular expression untuk mencari frase "html"\n    // flag i untuk mencari tanpa mempedulikan caseSensitif\n    // flag g untuk mencari semua kecocokan yang ditemukan\n    hasil = text.match(/html/ig);\n    alert(hasil);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>replace</h3>\n\n<div class="wrapper-content">\n<p>Method <code>replace()</code> digunakan untuk mengganti bagian string dengan string lainnya.</p>\n\n<pre class="line-numbers">\n<code>string.replace(stringLama,stringBaru)</code></pre>\n\n<p>Penggunaan method bisa juga memanfaatkan RegExp untuk menemukan semua string yang cocok dengan target pencarian yang akan diubah.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method replace String&lt;/h1&gt;\n  \n  &lt;p id="text"&gt;\n    HTML adalah bahasa pemrograman tingkat tinggi dan dinamis.\n    HTML populer di internet dan dapat bekerja di sebagian besar web browser \n    seperti Chrome, IE, Firefox, dan Opera.\n    Kode HTML dapat disisipkan dalam halaman web menggunakan tag script\n  &lt;/p&gt;\n  &lt;button onclick="play()"&gt;string.replace()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = document.getElementById(''text'').innerHTML;\n    var hasil;    \n    hasil = text.replace(/HTML/g, ''&lt;b&gt;&lt;u&gt;JavaScript&lt;/u&gt;&lt;/b&gt;'');\n    document.getElementById(''text'').innerHTML = hasil;\n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>slice</h3>\n\n<div class="wrapper-content">\n<p>Method <code>slice()</code> digunakan untuk memotong bagian string dan mengembalikannya dalam bentuk string baru.</p>\n\n<pre class="line-numbers">\n<code>string.slice(indexAwal,indexAkhir)</code></pre>\n\n<p>Apabila kita memasukkan hanya satu argument saja, maka yang dikembalikan adalah semua string dari awal pemotongan sampai akhir dari string.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method slice String&lt;/h1&gt;\n  \n  &lt;h3&gt;Ambil kata "World" dari string "Hello World Whoooa"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.slice()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "Hello World Whoooa";\n    var hasil;    \n    // kata "World" berada pada index 6 sampai 11\n    hasil = text.slice(6,11);\n    alert(hasil);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>substr</h3>\n\n<div class="wrapper-content">\n<p>Method <code>substr()</code> sama seperti slice, yaitu untuk memotong bagian string. Perbedaannya hanya pada argument kedua yang diisi dengan panjang karakter sejak dimulainya pemotongan.</p>\n\n<pre class="line-numbers">\n<code>string.substr(indexAwal,length)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method substr String&lt;/h1&gt;\n  \n  &lt;h3&gt;Ambil kata "World" dari string "Hello World Whoooa"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.substr()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "Hello World Whooa";\n    var hasil;    \n    // potong dari index ke-6 sampai 5 karakter\n    hasil = text.substr(6,5);\n    alert(hasil);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>split</h3>\n\n<div class="wrapper-content">\n<p>Method <code>split()</code> digunakan untuk memecah string berdasarkan pemisahnya menjadi potongan dalam bentuk array.</p>\n\n<pre class="line-numbers">\n<code>string.split(karakterPemisah)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method split String&lt;/h1&gt;\n  \n  &lt;h3&gt;\n    Bentuklah sebuah array dari string \n    "JavaScript adalah bahasa program yang dinamis"\n  &lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.split()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "JavaScript adalah bahasa program yang dinamis";\n    var hasil;    \n    // pisahkan string berdasarkan spasi menjadi potongan array\n    hasil = text.split('' '');\n    alert(hasil);\n    alert(hasil[2]);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>toString</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toString()</code> digunakan untuk mengkonversi nilai dari suatu variable menjadi berbentuk string dan juga membentuk tipe data string jika disimpan dalam variable baru.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method toString String&lt;/h1&gt;\n  \n  &lt;h3&gt;Konversi nilai dan tipe data menjadi string&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;number =&gt; toString()&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;boolean =&gt; toString()&lt;/button&gt;\n\n&lt;script&gt;\n  function play1(){\n    var angka = 10;\n    var angkaStr = angka.toString();\n    alert(angkaStr);\n    alert(typeof angkaStr);\n  }\n  function play2(){\n    var bool = true;\n    var boolStr = bool.toString();\n    alert(boolStr);\n    alert(typeof boolStr);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>toLowerCase</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toLowerCase()</code> berfungsi untuk mengkonversi string menjadi format huruf kecil.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method toLowerCase String&lt;/h1&gt;\n  \n  &lt;h3&gt;Konversi string "Hello World" menjadi huruf kecil&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.toLowerCase()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "Hello World";\n    var hasil;\n\n    hasil = text.toLowerCase();\n    alert(hasil);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>toUpperCase</h3>\n\n<div class="wrapper-content">\n<p>Kebalikan dari toLowerCase yaitu method <code>toUpperCase()</code> berfungsi untuk mengkonversi string menjadi format huruf besar.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method toUpperCase String&lt;/h1&gt;\n  \n  &lt;h3&gt;Konversi string "Hello World" menjadi huruf besar&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;string.toUpperCase()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = "Hello World";\n    var hasil;\n\n    hasil = text.toUpperCase();\n    alert(hasil);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>trim</h3>\n\n<div class="wrapper-content">\n<p>Method <code>trim()</code> digunakan untuk menghilangkan karakter spasi di awal dan di akhir string. Penggunaannya biasa dipakai untuk form input login yang sensitif dengan tanda spasi awal dan akhir.</p>\n\n<p>Contoh di bawah ini menggunakan tag pre untuk menampilkan konten element beserta karakter spasinya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method String&lt;/title&gt;\n&lt;style&gt;\n  #text { background: yellow; }\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method trim String&lt;/h1&gt;\n  \n  &lt;h3&gt;Hilangkan karakter spasi di awal dan akhir dari string.&lt;/h3&gt;\n  &lt;pre&gt;\n    &lt;span id="text"&gt;       JavaScript adalah bahasa program yang dinamis  &lt;/span&gt;\n  &lt;/pre&gt;\n  &lt;button onclick="play()"&gt;string.trim()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = document.getElementById(''text'').innerHTML;\n    var hasil;\n    hasil = text.trim();\n    document.getElementById(''text'').innerHTML = hasil;\n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li class="reff"><a href="https://www.w3schools.com/jsref/jsref_obj_string.asp" target="_blank">w3schools.com/jsref/jsref_obj_string.asp</a></li>\n</ul>\n', 984, 1554171121, 1593523494);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(12, 'B2cqdXh', 'beginner', 14, 'JS Number', 'Tipe Data Number JavaScript', 'angka bulat,angka pecahan,exponent notation,angka negatif,infinity,nan,function isnan', 1, '<p>Number atau angka adalah tipe data di JavaScript yang nilainya bisa berupa angka bulat (integer), angka pecahan (float), dan angka negatif. Tipe data ini digunakan untuk menampung data yang bersifat numerik. Ukuran angka yang bisa diproses oleh JavaScript bisa mencapai 64-bit atau 2<sup>64 </sup>atau 18 x 10<sup>18</sup>. Cukup besar memang, tetapi dalam 64-bit tidak semuanya akan bisa dipakai sebagai angka.</p>\n\n<h3>Angka Bulat</h3>\n\n<div class="wrapper-content">\n<p>Meski dikatakan angka bulat atau angka yang tidak mengandung tambahan pecahan desimal namun sebenarnya JavaScript memiliki karakter yang disebut sebagai <strong>64-bit Floating Point</strong>. Artinya adalah setiap angka bulat pada JavaScript menyimpan angka float atau pecahan setelah angka tersebut. Tidak seperti bahasa program lain pada umumnya yang memberikan penamaan berbeda antara angka bulat sebagai <strong>integer</strong> dan angka pecahan sebagai <strong>float</strong>, Number pada JavaScript menjadikan angka bulat dan pecahan menjadi satu nama yaitu Floating Point.</p>\n\n<p>Nilai angka bulat pada JavaScript terbatas akurasinya sampai 15 digit saja. Setelah lebih dari 15 digit, maka nilai float yang sebenarnya ada namun tidak ditampilkan tadi sudah cukup untuk membulatkan angka utamanya. Hal ini bisa dibuktikan jika menuliskan angka yang besarnya terdiri 16 digit atau lebih.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Angka bulat pada JavaScript&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;angka bulat 15 digit&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;angka bulat 16 digit&lt;/button&gt;\n\n&lt;script&gt;\n  function play1(){\n    alert(999999999999999); // 15 digit\n  }\n  function play2(){\n    alert(9999999999999999); // 16 digit\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Angka Pecahan</h3>\n\n<div class="wrapper-content">\n<p>Tipe data number juga bisa diisi angka pecahan atau angka yang memiliki nilai tambahan dibelakang koma. Penulisan tanda koma pada Number, harus menggunakan dengan tanda titik seperti <strong>3.14</strong>. Sedangkan nilai angka yang bisa berada di belakang koma ini hanya terbatas sampai 17 digit saja.</p>\n\n<p>Perlu diperhatikan juga apabila melakukan operasi matematika terhadap angka pecahan. Dalam mengolahnya, JavaScript terkadang menghasilkan akurasi yang tidak diharapkan. Hal itu terjadi karena float point yang ada pada JavaScript ikut berperan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Akurasi angka pecahan&lt;/h1&gt;\n\n  &lt;button onclick="play1()"&gt;0.3 + 0.7&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;0.1 + 0.2&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;0.1 + 0.2 == 0.3&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    alert(0.3 + 0.7); \n    // hasilnya angka bulat\n  }\n  function play2(){\n    alert(0.1 + 0.2);\n    // hasilnya bukan 0.3 seperti yang diharapkan\n  }\n  function play3(){\n    alert((0.2 * 10 + 0.1 * 10) / 10);\n    // trik agar hasilnya sesuai harapan\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Exponent Notation</h3>\n\n<div class="wrapper-content">\n<p>Exponent Notation adalah tata cara penulisan angka yang memiliki nilai yang sangat besar ataupun nilai yang sangat kecil. Seperti contoh penulisan angka <strong>0 </strong>pada dalam angka <strong>1000000 </strong>bisa disingkat dengan menulis <strong>1e6</strong>, yang artinya setelah angka 1 maka akan disisipkan angka 0 sebanyak 6 digit dan membentuk bilangan satu juta. Sedangkan untuk angka yang sangat kecil seperti <strong>0.000001 </strong>bisa disingkat menjadi <strong>1e-6</strong>, yang artinya angka tersebut memiliki nilai angka pecahan sebesar 6 digit di belakang tanda koma.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Exponent Notation&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;Exponent 1e6&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;Exponent 1e-6&lt;/button&gt;\n\n&lt;script&gt;\n  function play1(){\n    alert(1e6)\n  }\n  function play2(){\n    alert(1e-6)\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Angka Negatif</h3>\n\n<div class="wrapper-content">\n<p>Selain angka positif, kita juga bisa memasukkan angka negatif seperti <strong>-1 </strong>atau <strong>-234 </strong>ke dalam JavaScript. Nilai ukuran maksimal dari tipe data number yang jumlahnya mencapai 64-bit sebagian akan digunakan sebagai penanda di sini, untuk menandai sebuah angka itu positif atau negatif sebesar 1-bit. Sedangkan 11-bit lainnya digunakan untuk penanda exponent dan baru sisanya sebesar 52-bit ini lah yang bisa dipakai secara utuh sebagai angka.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Angka Negatif&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;- 3 + 7&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    alert(-3 + 7); \n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Selain angka-angka di atas, JavaScript juga memiliki nilai angka yang spesial. Angka spesial ini adalah <code>Infinity</code>, <code>-Infinity </code>dan <code>NaN</code>. Nilai Infinity dan -Infinity serta NaN ini termasuk reserved word JavaScript yang masuk ke dalam tipe data number.</p>\n\n<h3>Infinity</h3>\n\n<div class="wrapper-content">\n<p>Infinity atau yang berarti tidak terbatas terbentuk jika hasil dari operasi matematika yang nilainya di luar batas maksimal yang bisa diolah oleh JavaScript.</p>\n\n<p>Seperti pada sebuah operasi bilangan positif dibagi dengan angka 0 akan menghasilkan nilai <code>Infinity</code>. Sedangkan sebuah nilai bisa menjadi <code>-Infinty </code>jika sebuah angka negatif dibagi dengan angka 0.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Angka Infinity dan -Infinity&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;2 / 0&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;-2 / 0&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    alert(2 / 0);\n  }\n  function play2(){\n    alert(-2 / 0);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>NaN</h3>\n\n<div class="wrapper-content">\n<p><code>NaN</code> atau Not a Number digunakan oleh JavaScript untuk menandai bahwa sebuah variable itu bertipe Number atau bukan. Nilai NaN bisa dihasilkan jika angka <strong>0 </strong>dibagi dengan angka <strong>0</strong>, atau bisa juga dihasilkan dengan operasi antara tipe data String dan tipe data Number.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Operasi yang menghasilkan NaN&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;10 + "string" = ?&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;0 / 0 = ?&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    var xx = 10 / "text"; // number dibagi string\n    alert(''hasilnya adalah ''+ xx);\n    alert(''tipe datanya adalah '' + typeof xx);\n  }\n  function play2(){\n    var xx = 0 / 0; // angka 0 dibagi 0\n    alert(''hasilnya adalah '' + xx);\n    alert(''tipe datanya adalah '' + typeof xx);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Function isNaN</h4>\n\n<p>Kita bisa menggunakan function global JavaScript berupa <code>isNaN() </code>untuk mengecek suatu data itu berupa number atau bukan. Fungsi ini akan mengembalikan nilai boolean true atau false.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Function isNaN&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;100 / "string" === NaN&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    var str = 100 / "string";\n    alert(str);\n    alert(isNaN(str));\n    alert(typeof str);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 864, 1554171121, 1584725181),
(13, 'BKW2Ki0', 'beginner', 15, 'JS Method Number', 'Method pada Tipe Data Number', 'tofixed,toexponential,toprecision,global number,global parseint,global parsefloat,math.random,math.min,math.max,math.round,math.ceil,math.floor', 1, '<p>Untuk keperluan mengolah data angka di JavaScript, selain disediakan method built-in, juga ada Global Method dan Math Method. Ketiganya memiliki cara penggunaan yang berbeda.</p>\n\n<p>Berikut ini adalah beberapa method bawaan yang ada pada tipe data Number.</p>\n\n<h3>toFixed</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toFixed()</code> adalah method Number yang digunakan untuk membulatkan penulisan angka yang terdapat tambahan pecahan desimal di belakang tanda koma. Dengan method ini, sebuah angka utuh bisa ditentukan berapa digit angka yang berada di belakang tanda koma. Method toFixed akan membuat angka tersebut menjadi bertipe data string.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Number toFixed&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;number.toFixed()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angka = 12.344;\n    alert(angka.toFixed(0)); // tanpa koma\n    alert(angka.toFixed(1)); // satu angka di belakang koma\n    alert(angka.toFixed(2)); // dua angka di belakang koma\n    alert(angka.toFixed(3)); // tiga angka di belakang koma\n    alert(angka.toFixed(4)); // empat angka di belakang koma\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>toExponential</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toExponential()</code> adalah method Number yang digunakan untuk mengubah format penulisan angka biasa menjadi bentuk exponent. Nilainya akan dikembalikan lagi sebagai string.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Number toExponential&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;number.toExponential()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angka = 9.656;\n    alert(angka.toExponential(2));\n    alert(angka.toExponential(4));\n    alert(angka.toExponential(6));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>toPrecision</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toPrecision()</code> adalah method Number yang digunakan untuk menampilkan angka sebagai string dengan panjang digit yang bisa ditentukan. Argumentnya adalah angka 1 sampai dengan 100.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Number toPrecision&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;number.toPrecision()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angka = 12.344;\n    alert(angka.toPrecision(1));\n    alert(angka.toPrecision(2));\n    alert(angka.toPrecision(3));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Selanjutnya ada Global Method. Global method adalah method yang bisa digunakan untuk mengkonversi semua tipe data menjadi tipe data Number. Global method ini bukan merupakan method yang khusus untuk tipe data Number tetapi global untuk semua tipe data yang ada di JavaScript. Berikut ini beberapa Global method yang bisa digunakan.</p>\n\n<h3>Global Number</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Number()</code> digunakan untuk mengkonversi semua nilai menjadi bertipe data Number.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Global Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Global Number&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Number()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    alert(Number(true)); // boolean true\n    alert(Number(false)); // boolean false\n    alert(Number(new Date())); // waktu saat ini\n    alert(Number(''100'')); // string\n    alert(Number(''10 20'')); // NaN\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Global ParseInt</h3>\n\n<div class="wrapper-content">\n<p>Method <code>parseInt()</code> digunakan untuk mengambil angka bulat dari sebuah string. Method ini akan mendapatkan nilai pertama yang ditemukan sebelum karakter spasi.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Global Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Global parseInt&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;parseInt()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    alert(parseInt("10"));\n    alert(parseInt("12.33"));\n    alert(parseInt("13 23 33"));\n    alert(parseInt("11 years"));\n    alert(parseInt("years 12"));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Global ParseFloat</h3>\n\n<div class="wrapper-content">\n<p>Method <code>parseFloat()</code> digunakan untuk mengambil angka yang terdapat pada sebuah string. Berbeda dengan parseInt, method ini akan mengambil semua angka baik itu angka bulat ataupun angka dengan pecahan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Global Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Global parseFloat&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;parseFloat()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    alert(parseFloat("10"));\n    alert(parseFloat("12.33"));\n    alert(parseFloat("13 23 33"));\n    alert(parseFloat("11 years"));\n    alert(parseFloat("years 12"));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Pada tipe data Number, disediakan pula method dengan object utama <strong>Math</strong> untuk melakukan beberapa tugas yang berhubungan dengan angka matematika. Berikut ini adalah beberapa methodnya.</p>\n\n<h3>Math.random</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.random()</code> digunakan untuk mencetak angka secara acak. Nilai yang dihasilkan secara default berupa angka antara 0 sampai 1.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Random&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.random()&lt;/button&gt;\n  &lt;h3 id="angka"&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angkaRandom = Math.random();\n    document.getElementById(''angka'').innerHTML = angkaRandom;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Math.min</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.min()</code> digunakan untuk mengembalikan nilai angka terkecil yang ditulis di dalam daftar argumentnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Min&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.min()&lt;/button&gt;\n  &lt;h3 id="angka"&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angkaKecil = Math.min(0, 150, 30, 20, -8, -200);\n    document.getElementById(''angka'').innerHTML = angkaKecil;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Math.max</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.max()</code> digunakan untuk mengembalikan nilai angka terbesar yang ditulis di dalam daftar argumentnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Max&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.max()&lt;/button&gt;\n  &lt;h3 id="angka"&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angkaBesar = Math.max(0, 150, 30, 20, -8, -200);\n    document.getElementById(''angka'').innerHTML = angkaBesar;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Math.round</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.round()</code> digunakan untuk membulatkan angka yang mengandung pecahan menuju angka bulat terdekat.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Round&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.round()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    alert(Math.round(3.14));\n    alert(Math.round(3.789));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Math.ceil</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.ceil()</code> digunakan untuk membulatkan angka yang mengandung pecahan menuju angka bulat yang berada di atasnya dengan mengabaikan nilai besarnya angka pecahan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Ceil&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.ceil()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    alert(Math.ceil(3.14));\n    alert(Math.ceil(3.789));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Math.floor</h3>\n\n<div class="wrapper-content">\n<p>Method <code>Math.floor()</code> digunakan untuk membulatkan angka yang mengandung pecahan menuju angka bulat yang berada di bawahnya dengan mengabaikan nilai besarnya angka pecahan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Math Number&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Math Floor&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;Math.floor()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    alert(Math.floor(3.14));\n    alert(Math.floor(3.789));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://w3schools.com/jsref/jsref_obj_number.asp" target="_blank">w3schools.com/jsref/jsref_obj_number.asp</a></li>\n	<li><a href="https://www.w3schools.com/jsref/jsref_obj_math.asp" target="_blank">w3schools.com/jsref/jsref_obj_math.asp</a></li>\n</ul>\n', 739, 1554171121, 1593523377),
(14, 'BOG5lsN', 'beginner', 16, 'JS Array', 'Array pada JavaScript', 'definisi array,membuat array,mengakses array,karakteristik array,array literal,keyword array,property length,multiple data type,array of object,multidimensi array', 1, '<p>Di dalam setiap bahasa program, konsep array ini sering kali digunakan. Ada bahasa program yang menentukan bahwa array ini adalah sebuah tipe data dan ada juga yang menentukan bahwa array ini adalah berupa struktur data. Lalu apa sebenarnya definisi dari array itu sendiri? dan apakah array dalam JavaScript itu merupakan tipe data atau struktur data?</p>\n\n<h3>Definisi Array</h3>\n\n<div class="wrapper-content">\n<p>Jika definisi variable pada materi sebelumnya adalah tempat untuk menampung nilai. Sekarang perhatikan penulisan variable berikut dengan nilainya.</p>\n\n<pre>\n<code class="language-javascript">var hewan;\nhewan = "kelinci";\nhewan = "koala";\nhewan = "kucing";</code></pre>\n\n<p>Variable <strong>hewan</strong> pada script di atas tidak bisa menampung semua nilai yang ditugaskan untuk masuk ke dalamnya. Yang ada malah nilai terakhir yang ditugaskan untuk masuk ke dalam variable hewan yaitu kucing akan menimpa nilai variable sebelumnya. Untuk menampung semua nilai yang ada, maka nama variablenya tidak boleh sama agar bisa mengakses satu per satu nilainya.</p>\n\n<pre>\n<code class="language-javascript">var hewan1, hewan2, hewan3;\nhewan1 = "kelinci";\nhewan2 = "koala";\nhewan3 = "kucing";</code></pre>\n\n<p>Masalahnya akan terjadi ketika variable diharuskan untuk menyimpan nama-nama hewan yang berkaki 4 sejumlah 50 nama. Tentu akan diperlukan lebih banyak nama variable yang berbeda untuk menampung setiap nilai yang ada.</p>\n\n<p>Masalah seperti ini bisa diatasi dengan semua nilai dalam bentuk array. Array adalah sebuah tipe data yang digunakan untuk mendeskripsikan kumpulan element (nilai) yang setiap elementnya memiliki nomor <strong>index</strong>. Sederhananya, array sama seperti variable pada umumnya, tetapi variable array ini dapat menampung lebih dari satu nilai sekaligus.</p>\n</div>\n\n<h3>Membuat Array</h3>\n\n<div class="wrapper-content">\n<p>Untuk membuat array pada kasus di atas, JavaScript menyediakan dua metode penulisan array.</p>\n\n<h4>Array Literal</h4>\n\n<p>Penulisan array dimasukkan ke dalam tanda kurung kotak <code>[ ]</code> yang masing-masing nilainya selalu dipisahkan dengan tanda koma. Tanda spasi dan baris baru atau enter tidak dipedulikan dalan penulisan array. Tata cara penulisan dengan metode seperti inilah yang paling umum digunakan.</p>\n\n<pre>\n<code class="language-javascript">var hewan = ["kelinci","koala","kucing"];\n\n// atau seperti ini\n\nvar hewan = [\n  "kelinci",\n  "koala",\n  "kucing"\n];</code></pre>\n\n<h4>Keyword Array</h4>\n\n<p>Penulisan array dengan metode keyword <code>Array()</code> adalah seperti di bawah ini.</p>\n\n<pre>\n<code class="language-javascript">var hewan = Array("kelinci","koala","kucing");</code></pre>\n\n<p>Kedua tata cara penulisan ini sama saja, namun untuk kemudahan dalam pembacaan kode, lebih disarankan untuk menggunakan metode array literal.</p>\n</div>\n\n<h3>Mengakses Array</h3>\n\n<div class="wrapper-content">\n<p>Setelah berhasil meringkas penulisan nilai variable menjadi bentuk array, sekarang bagaimana cara mengakses satu per satu nilainya?</p>\n\n<p>Untuk mengakses setiap nilai di dalam aray, kita bisa memanfaatkan sifat dasar dari array, yaitu nomor index. Array sendiri merupakan variable yang berisi kumpulan pasangan antara <strong>key</strong> dan <strong>value</strong>. Key berupa nomor index yang berupa angka dan akan selalu dimulai dari angka 0. sedangkan value berupa nilai-nilai yang dimasukkan ke dalam variable. Sehingga secara otomatis Javascript akan mengenali isi dari array dengan format seperti di bawah ini.</p>\n\n<pre>\n<code class="language-javascript">var hewan = ["kelinci","koala","kucing"];\n// variable hewan dengan index ke-0 = "kelinci"\n// variable hewan dengan index ke-1 = "koala"\n// variable hewan dengan index ke-2 = "kucing"</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Array JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mengakses Nilai Variable Array&lt;/h1&gt;\n  \n  &lt;h3&gt;Cetak isi variable hewan ke dalam alert&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;variable hewan&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;variable hewan index ke-2&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;semua isi variable hewan&lt;/button&gt;\n\n&lt;script&gt;\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\n  function play1(){\n    alert(hewan);\n  }\n  function play2(){\n    alert(hewan[2]);\n  }\n  function play3(){\n    // looping pada setiap element array ke dalam alert \n    for (var i = 0; i &lt; hewan.length; i++){\n      alert(hewan[i]);\n    }\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Karakteristik Array</h3>\n\n<div class="wrapper-content">\n<h4>Property Length</h4>\n\n<p>Array memiliki property bawaan berupa <code>length</code> yang digunakan untuk menghitung jumlah element di dalam sebuah array.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Array JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Property Length pada Array&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;array.length&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    alert(hewan.length);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Multiple Data Type</h4>\n\n<p>Array bisa menampung nilai-nilai dengan tipe data yang berbeda sekaligus.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Array JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Value Array dengan tipe yang berbeda&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;array[0]&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;array[1]&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;array[2]&lt;/button&gt;\n  \n&lt;script&gt;\n  var orang = ["John",25,true];\n  function play1(){\n    alert(orang[0]);\n    alert(''tipenya ''+ typeof orang[0]);\n  }\n  function play2(){\n    alert(orang[1]);\n    alert(''tipenya ''+ typeof orang[1]);\n  }\n  function play3(){\n    alert(orang[2]);\n    alert(''tipenya ''+ typeof orang[2]);\n  }  \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Array of Object</h4>\n\n<p>Tidak seperti bahasa program lain yang umumnya menentukan bahwa array adalah sebuah tipe data sendiri, di JavaScript, array ini bertipe data Object.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Array JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Array JavaScript bertipe Object&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"];&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;typeof hewan&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    alert(''tipenya ''+ typeof hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Multidimensi Array</h4>\n\n<p>Kita bisa juga menyimpan array di dalam array atau yang bisa disebut sebagai multidimensi array. Perhatikan cara mengakses nilai array yang ada dalam array.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Array JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Multidimensi Array&lt;/h1&gt;\n  \n  &lt;h3&gt;orang = ["John",25,true,[3.14,2.13,3.00]];&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;orang[3]&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;orang[3][1]&lt;/button&gt;\n\n&lt;script&gt;\n  var orang = ["John",25,true,[3.14,2.13,3.00]];\n  function play1(){\n    alert(orang[3]);\n    alert(''tipenya ''+ typeof orang[3]);\n  }\n  function play2(){\n    alert(orang[3][1]); // mengakses nilai 2.13\n    alert(''tipenya ''+ typeof orang[3][1]);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 745, 1554171121, 1586191711),
(15, 'BAOmBpg', 'beginner', 17, 'JS Method Array', 'Method pada Data Array', 'tostring,join,pop,push,shift,unshift,splice,slice,sort,concat', 1, '<p>Seperti pada tipe data Number dan String, pada struktur data Array JavaScript juga terdapat method-method yang digunakan untuk mengolah atau memanipulasi data array. Berikut ini akan kita bahas beberapa method array yang sering digunakan dan menggolongkan berdasarkan fungsi kegunaannya.</p>\n\n<p>Pada dasarnya web browser akan menampilkan semua karakter dalam bentuk string meski sebenarnya data tersebut awalnya berupa array atau tipe data yang lain. Di dalam bahasa program lainnya, array ini umumnya tidak bisa langsung ditampilkan sebagai string tanpa dikonversi terlebih dahulu. Namun untuk JavaScript hal itu bisa dilakukan meski hanya menggunakan tampilan default.</p>\n\n<p>Untuk mengkonversi data yang semula berupa array menjadi tipe data string dengan tujuan untuk mencetak nilainya ke dalam layar, terdapat method berupa <code>toString()</code> dan method <code>join()</code>.</p>\n\n<h3>toString</h3>\n\n<div class="wrapper-content">\n<p>Method <code>toString()</code> ini dapat secara langsung mengubah atau mengkonversi sebuah array menjadi string.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method toString Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;hewan&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;hewan.toString()&lt;/button&gt;\n\n&lt;script&gt;\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\n  function play1(){\n    // data array\n    alert(hewan);\n    alert(''tipenya adalah '' + typeof hewan);\n  }\n  function play2(){\n    // konversi ke tipe data string\n    alert(hewan.toString());\n    alert(typeof hewan.toString());\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>join</h3>\n\n<div class="wrapper-content">\n<p>Kegunaan method ini sama seperti toString, namun di dalam penggunaan method <code>join()</code> ini, kita bisa menambahkan separator atau pemisah antar element yang ada di dalam array.</p>\n\n<pre class="line-numbers">\n<code>array.join(separator)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Join Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.join()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // default array\n    alert(hewan);\n    // array ditampilkan dengan tanda strip dan spasi sebagai separator\n    alert(hewan.join('' - ''));\n    // array ditampilkan dengan tanda bintang dan spasi sebagai separator\n    alert(hewan.join('' * ''));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Element di dalam Array bisa dimanipulasi seperti ditambah, diubah, atau dihapus. Method yang bisa digunakan antara lain <code>pop()</code>, <code>push()</code>, <code>shift()</code>, <code>unshift()</code> dan <code>splice()</code> serta <code>slice()</code>.</p>\n\n<h3>pop</h3>\n\n<div class="wrapper-content">\n<p>Method <code>pop()</code> digunakan untuk menghilangkan element terakhir dalam sebuah array. Method ini akan mengembalikan nilai berupa element yang dihilangkan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Pop Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.pop()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // menghilangkan elemen terakhir dari array yaitu "domba"\n    alert(hewan.pop());\n    // isi array setelah dilakukan method pop\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>push</h3>\n\n<div class="wrapper-content">\n<p>Method <code>push()</code> digunakan untuk menambahkan sebuah element baru ke dalam sebuah array yang secara default akan diletakkan pada element terakhir. Method ini akan mengembalikan nilai berupa <code>array.length</code> setelah dilakukan proses push. Kita juga bisa menambahkan isi array lebih dari satu element secara langsung dalam sekali method.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Push Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.push()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // isi array sebelum dilakukan method push\n    alert(hewan);\n    // menambahkan elemen baru ke dalam array pada index terakhir\n    hewan.push(''gajah'');\n    // isi array setelah dilakukan method push\n    alert(hewan);\n    // menambahkan lebih banyak elemen ke dalam array\n    hewan.push(''harimau'',''singa'');\n    // isi array setelah dilakukan method push lagi\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>shift</h3>\n\n<div class="wrapper-content">\n<p>Method <code>shift()</code> digunakan untuk menghilangkan element pertama dalam sebuah array. Mirip seperti method pop, method ini akan mengembalikan nilai berupa element yang dihilangkan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Shift Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.shift()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // menghilangkan elemen pertama dari array yaitu "kelinci"\n    alert(hewan.shift());\n    // isi array setelah dilakukan method shift\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>unshift</h3>\n\n<div class="wrapper-content">\n<p>Sedangkan untuk <code>unshift()</code> adalah untuk menambahkan sebuah element baru ke dalam sebuah array yang diletakkan pada awal element dari sebuah array.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h3&gt;Method Unshift Array&lt;/h3&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.unshift()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // isi array sebelum dilakukan method unshift\n    alert(hewan);\n    // menambahkan elemen baru ke dalam array pada index pertama / awal\n    hewan.unshift(''gajah'');\n    // isi array setelah dilakukan method unshift\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>splice</h3>\n\n<div class="wrapper-content">\n<p>Method ini fungsinya sama seperti keempat method di atas, namun pebedaannya adalah pada method <code>splice()</code>, kita bisa menyisipkan dan menghilangkan element di dalam array secara lebih spesifik.</p>\n\n<pre class="line-numbers">\n<code>array.splice(indexAwal,jumlahElementTarget,elementBaru)</code></pre>\n\n<ul>\n</ul>\n\n<p>Sebenarnya method ini hanya membutuhkan argument pertama saja untuk dapat dijalankan, argument kedua dan seterusnya bersifat optional atau bisa ditulis ataupun tidak tergantung dengan kebutuhan.</p>\n\n<h5>Splice untuk menyisipkan element baru</h5>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Menambah element dengan Splice&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;h3&gt;Tambahkan element "kuda" setelah element "koala"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.splice()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    // argument pertama : index posisi dimulainya eksekusi yaitu index ke 2\n    // argument kedua : tanpa menghapus elemen yang sudah ada dengan mengisi angka 0\n    // argument ketiga : elemen baru yang dimasukkan yaitu "kuda"\n    hewan.splice(2,0,''kuda'');\n    // isi array setelah dilakukan method splice\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h5>Splice untuk menghapus element yang ada</h5>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Menghapus element dengan Splice&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;h3&gt;Hapus element "koala" dan "kucing"&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.splice()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    \n    // argument pertama : index posisi dimulainya eksekusi yaitu index ke 1\n    // argument kedua : angka 2 berarti menghapus 2 elemen\n    // argument ketiga : dikosongkan/ tidak menambah elemen apapun\n    hewan.splice(1,2);\n    // isi array setelah dilakukan method splice\n    alert(hewan);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>slice</h3>\n\n<div class="wrapper-content">\n<p>Method <code>slice()</code> digunakan untuk memotong element dari sebuah array untuk dijadikan array baru.</p>\n\n<pre class="line-numbers">\n<code>array.slice(indexAwal,indexAkhir)</code></pre>\n\n<ul>\n</ul>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Slice Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.slice()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    alert(hewan);\n    // argument pertama : index posisi dimulainya pemotongan yaitu index ke 1\n    // argument kedua : index posisi akhir pemotongan yaitu 3 : "sapi"\n    // nilai pada parameter kedua akan selalu mengambil elemen sebelumnya\n    // dalam hal ini "sapi" tidak akan termasuk ke dalam eksekusi method\n    var hewan2 = hewan.slice(1,3);\n    // isi variable hewan2\n    alert(hewan2);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Yang perlu diperhatikan saat menggunakan method ini dengan dua argument, argument kedua selalu akan mengacu pada element sebelumnya. Sehingga jika ingin mendapatkan element dengan index ke 1 sampai dengan index ke 2, kita harus menuliskan index angka ke 3 sebagai argument kedua. Sedangkan jika hanya menuliskan satu argument saja, maka pemotongan element akan dimulai dari angka parameter tersebut dan akan berakhir pada element terakhir dari array.</p>\n</div>\n\n<h3>sort</h3>\n\n<div class="wrapper-content">\n<p>Method <code>sort()</code> umumnya digunakan untuk mengurutkan nilai-nilai di dalam array berdasarkan urutan abjad huruf pertamanya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Sort Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.sort()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    alert(hewan);\n    var hewan2 = hewan.sort();\n    alert(hewan2);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>concat</h3>\n\n<div class="wrapper-content">\n<p>Seperti hanya pada tipe data string, method <code>concat()</code> juga bisa digunakan pada data array. Fungsinya untuk menggabungkan sebuah array dengan array yang lainnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Concat Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;h3&gt;dan hewan2 = ["ayam","bebek","angsa"]&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.concat()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var hewan = ["kelinci","koala","kucing","sapi","domba"];\n    var hewan2 = ["ayam","bebek","angsa"];\n    \n    alert(hewan);\n    alert(hewan2);\n    alert(hewan.concat(hewan2));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li class="reff"><a href="https://www.w3schools.com/jsref/jsref_obj_array.asp" target="_blank">w3schools.com/jsref/jsref_obj_array.asp</a></li>\n	<li class="reff"><a href="https://developer.mozilla.org/id/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank">developer.mozilla.org/id/docs/Web/JavaScript/Reference/Global_Objects/Array</a></li>\n</ul>\n', 1088, 1554171121, 1595386666),
(35, 'IfNkZ6i', 'medium', 8, 'JS Errors', 'Menangani Error pada JavaScript', 'debugging,error handling,error object', 1, '<p>Error atau kesalahan akan selalu terjadi setiap kali kode pemrograman ditulis dan dijalankan untuk diuji kemampuannya. Kesalahan itu bisa terjadi baik kesalahan pada syntax penulisan atau logika program. Hal itu adalah murni kejadian yang akan selalu dialami oleh para programer baik yang masih pemula atau bahkan yang sudah mahir sekalipun.</p>\n\n<h3>Debugging</h3>\n\n<div class="wrapper-content">\n<p>Pada prakteknya, kesalahan yang terjadi pada beberapa bahasa program ada yang akan ditunjukkan secara jelas dan ada pula yang sulit untuk ditelusuri dimana letak kesalahan yang terjadi.</p>\n\n<p>Seringnya, ketika program dijalankan dan mendapatkakan error, tidak akan terjadi apapun baik itu pesan error ataupun pesan yang mengindikasikan terjadi error pada baris tertentu. Proses mencari kesalahan dan berusaha untuk memperbaikinya ini disebut sebagai proses debugging.</p>\n\n<p>Cara yang paling umum digunakan di dalam debugging JavaScript adalah dengan menggunakan method <code>console.log()</code> yang bisa dilihat hasilnya pada develooper tools dan juga dengan keyword <code>debugger</code>.</p>\n\n<p>Keyword debugger akan menghentikan sementara proses eksekusi kode JavaScript tepat pada baris mana keyword ini dituliskan dengan menampilkan semua informasi pada developer tools. Eksekusi baris kode selanjutnya akan dilakukan apabila kita menghendaki untuk melanjutkan (disediakan tombol untuk melanjutkan).</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Debugging JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Debugger&lt;/h1&gt;\n  &lt;h3 id="hasil"&gt;&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;debug&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var x = 10 * 5;\n    debugger; // eksekusi akan dihentikan di sini sebelum dilanjutkan\n    document.getElementById("hasil").innerHTML = x;\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  buka developer tools pada browser terlebih dahulu sebelum menekan tombol di atas.\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold">Letakkan keyword debugger pada setiap baris kode yang dirasa menyebabkan error program. Saat debugging dijalankan, proses penelusuran error akan lebih mudah karena kode akan sementara dihentikan pada keyword ini sebelum lanjut pada kode selanjutnya</p>\n</div>\n\n<h3>Error Handling</h3>\n\n<div class="wrapper-content">\n<p>Untuk menguji apakah sebuah kode program yang akan dijalankan mengalami error atau tidak, JavaScript menyediakan beberapa keyword untuk kebutuhan ini.</p>\n\n<ol>\n	<li><code>try</code> untuk menguji blok kode</li>\n	<li><code></code><code>catch</code> untuk menangani error yang terjadi</li>\n	<li><code>throw</code> untuk membuat pesan error</li>\n	<li><code>finally</code> untuk melanjutkan eksekusi kode setelah try dan catch tanpa mempedulikan apapun hasilnya</li>\n</ol>\n\n<pre>\n<code class="language-javascript">try {\n  // blok kode yang akan diuji\n}\ncatch(e) {\n  // blok kode untuk menangani jika terjadi error\n}\nfinally {\n  // blok kode yang akan dieksekusi setelah try dan catch\n}</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Debugging JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Validasi Input&lt;/h1&gt;\n  &lt;h3&gt;Masukkan angka antara 5 sampai 10&lt;/h3&gt;\n  &lt;input id="test" type="text"&gt;\n  &lt;button onclick="play()"&gt;Test Input&lt;/button&gt;\n  &lt;p id="hasil"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nfunction play() {\n  var input = document.getElementById("test").value;\n  var msg = document.getElementById("hasil");\n  msg.innerHTML = "";\n  try {\n    if(input == "") throw "input masih kosong";\n    if(isNaN(input)) throw "input bukan angka";\n    input = Number(input);\n    if(input &gt; 10) throw "input angka terlalu besar";\n    if(input &lt; 5) throw "input angka terlalu kecil";\n  }\n  catch(e) {\n    msg.innerHTML = "invalid : " + e ;\n  }\n  finally {\n    document.getElementById("test").value = "";\n  }\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Error Object</h3>\n\n<div class="wrapper-content">\n<p>Selain bisa membuat pesan error dengan menggunakan keyword throw, JavaScript juga telah menyediakan pesan error ini secara default dalam object. Object ini terdiri dari dua object penting yaitu <code>name</code> yang mengembalikan nilai nama error dan <code>message</code> yang mengembalikan pesan error dalam bentuk string.</p>\n\n<p>Berikut ini adalah beberapa property error name yang ada pada JavaScript.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">Error Name</th>\n			<th scope="col">Deskripsi</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td>RangeError</td>\n			<td>Error ketika number diluar jangkauan yang ditentukan</td>\n		</tr>\n		<tr>\n			<td>ReferenceError</td>\n			<td>Referensi ilegal (variable atau function yang digunakan sebelum didefinisikan)</td>\n		</tr>\n		<tr>\n			<td>SyntaxError</td>\n			<td>Error ketika terdapat syntax penulisan yang salah</td>\n		</tr>\n		<tr>\n			<td>TypeError</td>\n			<td>Error ketika penggunaan method tidak sesuai tipe data</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Debugging JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Error Name&lt;/h1&gt;\n  \n  &lt;p&gt;&lt;b id="nama"&gt;&lt;/b&gt; : &lt;span id="pesan"&gt;&lt;/span&gt;&lt;/p&gt;\n  \n  &lt;button onclick="play1()"&gt;RangeError&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;ReferenceError&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;SyntaxError&lt;/button&gt;\n  &lt;button onclick="play4()"&gt;TypeError&lt;/button&gt;\n  \n&lt;script&gt;\n  var nama = document.getElementById("nama");\n  var pesan = document.getElementById("pesan");\n  function cetakError(err){\n    nama.innerHTML = err.name; \n    pesan.innerHTML = err.message;\n  }\n  \n  function play1(){\n    var num = 1;\n    try { num.toPrecision(500); }\n    catch(err) { cetakError(err); }\n  }\n  function play2(){\n    var x = 1;\n    try { x = y + 1; }\n    catch(err) { cetakError(err); }\n  }\n  function play3(){\n    try { eval("alert(''hello world)"); }\n    catch(err) { cetakError(err); }\n  }\n  function play4(){\n    var num = 1;\n    try { num.toUpperCase(); }\n    catch(err) { cetakError(err); }\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 617, 1595387164, 1595480779);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(16, 'BUrIG1q', 'beginner', 20, 'JS Conditions', 'Struktur Pengkondisian JavaScript', 'struktur if,struktur else,struktur else if,struktur switch,break continue', 1, '<p>Pengkondisian atau percabangan seringkali dilakukan untuk membuat sebuah program dapat berperilaku dinamis sesuai dengan keadaan tertentu. Sifat dinamis ini akan memberikan respon yang berbeda terhadap logika input yang diberikan.</p>\n\n<p>Pengkondisian ini terbentuk dari blok kode yang ditandai dengan ditulisnya tanda kurung kurawal ( <code>{ ... }</code> ). Baris statement yang berada di dalam tanda ini merupakan satu blok kode yang akan dijalankan. Di dalam JavaScript, terdapat beberapa jenis pengkondisian yang bisa ditulis menggunakan keyword <code>if</code>, <code>else if</code>, <code>else</code> dan <code>switch</code>. Berikut ini adalah masing-masing penjelasannya.</p>\n\n<h3>Struktur If</h3>\n\n<div class="wrapper-content">\n<p>Struktur pengkodisian menggunakan keyword <code>if</code> biasanya digunakan untuk menjalankan sebuah blok kode jika sebuah kondisi yang diberikan bernilai true. Sedangkan jika kondisinya bernilai false maka blok kodenya tidak akan pernah dijalankan.</p>\n\n<p>Penggunaan keyword if wajib dituliskan di semua pengkondisian, baik itu menggunakan tambahan keyword else if atau else karena hanya keyword if saja yang akan menerima ekspresi kondisi.</p>\n\n<pre>\n<code class="language-javascript">if ( kondisi ) {\n  // blok kode yang akan dijalankan jika kondisi bernilai TRUE\n}</code></pre>\n\n<p>Statement if juga bisa ditulis dalam satu baris tanpa menggunakan kurung kurawal jika blok kode yang akan dieksekusi hanya satu baris saja.</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">if ( kondisi ) // blok kode jika kondisi bernilai TRUE</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Struktur Pengkondisian If&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var waktu = new Date(); // ambil waktu sekarang\n    var jam = waktu.getHours(); // ambil angka jam saat ini (0 sampai 23)\n    \n    if (jam &lt; 18) // kondisi yang diuji\n    {\n      alert(''Selamat Siang'');\n    }\n    \n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Struktur Else</h3>\n\n<div class="wrapper-content">\n<p>Pengkondisian yang menggunakan <code>else</code> harus dilakukan dengan keyword <code>if</code> secara bersamaan. Keyword else akan berperan jika kondisi bernilai false, maka statement yang berada di dalam keyword ini yang akan dijalankan.</p>\n\n<pre>\n<code class="language-javascript">if ( kondisi ) {\n  // blok kode yang akan dijalankan jika kondisi bernilai TRUE\n} else {\n  // blok kode yang akan dijalankan jika kondisi bernilai FALSE\n}</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Struktur Pengkondisian If Else&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var waktu = new Date(); // ambil waktu sekarang\n    var jam = waktu.getHours(); // ambil angka jam saat ini (0 sampai 23)\n    \n    if (jam &lt; 18) // kondisi yang diuji\n    {\n      alert(''Selamat Siang'');\n    }\n    else\n    {\n      alert(''Selamat Malam'');\n    }\n    \n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Struktur Else If</h3>\n\n<div class="wrapper-content">\n<p>Pengkondisian menggunakan <code>else if</code> dapat dilakukan sebagai pengkondisian lanjutan jika ingin menguji beberapa kondisi yang lain untuk menjalankan pilihan statement antara yang berada pada blok if (jika true) dan else (jika false). Di dalam keyword else if ini dapat dituliskan kondisi untuk pengujian seandainya kondisi pada if bernilai false sebelum masuk ke statement else.</p>\n\n<pre>\n<code class="language-javascript">if ( kondisi ) {\n  // blok kode yang akan dijalankan jika kondisi bernilai TRUE\n} else if ( kondisi kedua ) {\n  // kode yang akan dijalankan jika kondisi pertama FALSE\n  // dan kondisi kedua TRUE\n} else {\n  // blok kode yang akan dijalankan jika kondisi bernilai FALSE\n}</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Struktur If...Else If...Else&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var waktu = new Date(); // ambil waktu sekarang\n    var jam = waktu.getHours(); // ambil angka jam saat ini (0 sampai 23)\n    \n    if ( jam &lt; 10 )\n    {\n      // jika jam saat ini lebih kecil dari 10, maka..\n      alert("Selamat Pagi...");\n    } \n    else if ( jam &lt; 15 )\n    {\n      // jika jam saat ini lebih kecil dari 15, maka..\n      alert("Selamat Siang...");\n    } \n    else if ( jam &lt; 19 )\n    {\n      // jika jam saat ini lebih kecil dari 19, maka..\n      alert("Selamat Sore...");\n    } \n    else \n    {\n      // jika jam saat ini tidak ada yang cocok dengan semua kondisi, maka..\n      alert("Selamat Malam...");\n    }\n    \n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Struktur Switch</h3>\n\n<div class="wrapper-content">\n<p>Pengkondisian menggunakan <code>switch</code> lebih disarankan jika kondisi yang diuji ingin dicocokkan dengan beberapa klausa yang berbeda. Hal ini mirip seperti bentuk dari if dengan else if yang bisa dipergunakan untuk membuat pengkondisian yang lebih dari satu kondisi. Namun untuk switch perlu ditambahkan beberapa keyword lainnya agar dapat berfungsi. Dan berikut ini adalah keyword untuk membentuk struktur pengkondisian switch.</p>\n\n<ul>\n	<li><code>switch (ekspresi)</code> - ekspresi dituliskan di dalam tanda kurung yang nantinya akan diuji dengan beberapa klausa.</li>\n	<li><code>case</code> - klausa pencocokan atau pengujian. Objek akan diuji dengan beberapa klausa yang ditulis setelah penulisan keyword ini dan akan menghasilkan nilai boolean true atau false.</li>\n	<li><code>break</code> - menghentikan pengujian apabila telah ditemukan klausa yang bernilai true dan mengakhiri pengkondisian</li>\n	<li><code>default</code> - blok kode yang akan dijalankan jika pengujian objek dan klausa tidak ada yang menghasilkan nilai true.</li>\n</ul>\n\n<pre>\n<code class="language-javascript">switch (ekspresi) {\n  case klausa :\n  // kode yang akan dijalankan jika klausa bernilai true\n  break; // akhiri pengkondisian\n  \n  default :\n  // kode yang akan dieksekusi jika semua klausa tidak ada yang true\n}</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Struktur Pengkondisian Switch&lt;/h1&gt;\n  \n  &lt;h3&gt;Sekarang adalah hari &lt;u id="hasil"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;  \n\n&lt;script&gt;\n  function play(){\n    // getDay() untuk menampilkan hari (0 sampai 6)\n    // sesuai dengan jumlah hari dalam seminggu\n    var waktu = new Date().getDay();\n    switch ( waktu ) {\n    	case 0: // jika hari ini == 0, maka..\n    		hari = "Minggu";\n    		break;\n    	case 1: // jika hari ini == 1, maka..\n    		hari = "Senin";\n    		break;\n    	case 2: // jika hari ini == 2, maka..\n    		hari = "Selasa";\n    		break;\n    	case 3: // jika hari ini == 3, maka..\n    		hari = "Rabu";\n    		break;\n    	case 4: // jika hari ini == 4, maka..\n    		hari = "Kamis";\n    		break;\n    	case 5: // jika hari ini == 5, maka..\n    		hari = "Jum''at";\n    		break;\n    	case 6: // jika hari ini == 6, maka..\n    		hari = "Sabtu";\n    		break;\n    	default : // jika hari ini tidak ada yang cocok dengan semua case yang ada, maka...\n    		hari = "Mungkin sekarang adalah hari besar"; \n    }\n    document.getElementById(''hasil'').innerHTML = hari;  \n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Break Continue</h3>\n\n<div class="wrapper-content">\n<p>Selain digunakan pada struktur pengkondisian switch, statement menggunakan keyword <code>break</code> juga bisa digunakan pada pengulangan untuk menghentikan atau keluar dari sebuah kondisi pengulangan. Keyword ini akan melakukan perintah penghentian pengulangan dan segera melanjutkan kode (jika ada) selanjutnya setelah pengulangan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Statement Break&lt;/h1&gt;\n  &lt;h3&gt;Lakukan pengulangan sebanyak 3 kali&lt;/h3&gt;\n  &lt;div id="hasil"&gt;&lt;/div&gt;\n  &lt;button onclick="play()"&gt;break&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = '''';\n    for (var i = 1; i &lt; 10; i++) {\n      if (i == 4) { // ketika i == 4\n        break; // hentikan dan keluar dari pengulangan\n      }\n      text += "Pengulangan yang ke " + i + "&lt;br&gt;";\n    }\n    document.getElementById(''hasil'').innerHTML = text;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Seangkan untuk statement <code>continue</code> digunakan untuk melanjutkan pengulangan dengan melewatkan sebuah kondisi ekspresi tertentu saat digunakannya statement ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengkondisian JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Statement Continue&lt;/h1&gt;\n  &lt;h3&gt;Lakukan pengulangan dengan melewati angka 4&lt;/h3&gt;\n  &lt;div id="hasil"&gt;&lt;/div&gt;\n  &lt;button onclick="play()"&gt;continue&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = '''';\n    for (var i = 1; i &lt; 10; i++) {\n      if (i == 4) { // ketika i == 4\n        continue; // lewati pengulangan terhadap angka ini\n      }\n      text += "Pengulangan yang ke " + i + "&lt;br&gt;";\n    }\n    document.getElementById(''hasil'').innerHTML = text;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 1125, 1554171121, 1595475152),
(17, 'BulG4tB', 'beginner', 18, 'JS Array Iteration', 'Method Array Iterasi', 'foreach,map,every,some,filter,find,includes', 1, '<p>Di dalam array JavaScript terdapat yang disebut sebagai <strong>Array Iteration</strong>, yaitu method yang khusus digunakan untuk melakukan setiap aksi pada masing masing element di dalam array. Berikut ini adalah beberapa methodnya.</p>\n\n<h3>forEach</h3>\n\n<div class="wrapper-content">\n<p>Method <code>forEach()</code> digunakan untuk melakukan pengulangan pada setiap element di dalam sebuah array dan nilai yang dikembalikan oleh method ini berupa string.</p>\n\n<pre>\n<code class="language-javascript">array.forEach(function(element,index,array){\n\n  // isi dari callback\n\n});</code></pre>\n\n<p>Argument yang perlu dimasukkan ke dalam callback function nya adalah :</p>\n\n<ol>\n	<li>element atau value</li>\n	<li>index (optional)</li>\n	<li>array itu sendiri (optional)</li>\n</ol>\n\n<ul>\n</ul>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method forEach Array&lt;/h1&gt;\n  \n  &lt;h3&gt;Jika hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;h3&gt;Cetak setiap element dengan sebuah function&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;hewan.forEach()&lt;/button&gt;\n  &lt;p id="hasil"&gt;&lt;/p&gt;\n  \n&lt;script&gt;\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\n  function play(){\n    var cetak = '''';\n    hewan.forEach(function(element,index,array){ // argument element dan index\n      // untuk setiap element di dalam variable gabungkan sebagai string\n      // lalu masukkan ke dalam variable cetak\n      cetak += ''hewan yang ke ''+ index + '' adalah '' + element + '' | ''+ array +''&lt;br&gt;'';\n    });\n    // cetak variable hewan2 ke layar\n    document.getElementById(''hasil'').innerHTML = cetak;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>map</h3>\n\n<div class="wrapper-content">\n<p>Fungsinya sama persis seperti forEach, namun perbedaannya adalah pada method <code>map()</code> akan mengembalikan nilai baru dalam bentuk data array tanpa mengubah array utama sehingga jika ingin dilakukan pengolahan data lebih lanjut, hal itu masih memungkinkan.</p>\n\n<pre>\n<code class="language-javascript">array.map(function(element,index,array){\n\n  // isi dari callback\n\n});</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Map Array&lt;/h1&gt;\n  \n  &lt;h3&gt;angka = [1,3,9,5,8]&lt;/h3&gt;\n  &lt;h3&gt;Cetak ke layar masing-masing elemen dengan sebuah function&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;angka.map()&lt;/button&gt;\n  &lt;p id="hasil"&gt;&lt;/p&gt;\n  \n&lt;script&gt;\n  function play(){\n    var angka = [1,3,9,5,8];\n    var angka2 = [];\n    angka2 = angka.map(function(element,index,array){\n      // setiap elemen di dalam variable angka lakukan +1\n      // kemudian simpan di dalam variable angka2 sebagai array\n      return element + 1;\n    }); \n    // lalu cetak angka2 yang berupa array ke layar sebagai string \n    document.getElementById(''hasil'').innerHTML = angka2.join('' - '');\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>every</h3>\n\n<div class="wrapper-content">\n<p>Method <code>every()</code> digunakan untuk menguji semua element dalam sebuah array. Nilai yang dikembalikan method ini berupa boolean antara true atau false. </p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Every Array&lt;/h1&gt;\n  \n  &lt;h3&gt;angka = [42,28,20,73,58]&lt;/h3&gt;\n  &lt;h3&gt;Cek apakah ada element yang lebih kecil dari 10&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;angka.every()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var angka = [42,28,20,73,58];\n    var test = angka.every(function(element,index,array){\n      return element &lt; 10;\n    });\n    alert(test);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>some</h3>\n\n<div class="wrapper-content">\n<p>Method <code>some()</code> digunakan untuk menguji suatu element dalam sebuah array. Nilai yang dikembalikan method ini berupa boolean antara true atau false.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Some Array&lt;/h1&gt;\n  \n  &lt;h3&gt;angka = [42,28,2,73,58]&lt;/h3&gt;\n  &lt;h3&gt;Cek apakah ada element yang lebih kecil dari 10&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;angka.some()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var angka = [42,28,2,73,58];\n    var test = angka.some(function(element,index,array){\n      return element &lt; 10;\n    });\n    alert(test);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>filter</h3>\n\n<div class="wrapper-content">\n<p>Method <code>filter()</code> digunakan untuk mencari element di dalam array dan akan dikembalikan dalam bentuk array yang baru.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Filter Array&lt;/h1&gt;\n  \n  &lt;h3&gt;angka = [4,2,1,7,5,9,20,15,13]&lt;/h3&gt;\n  &lt;h3&gt;Cari angka yang lebih kecil dari 10&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;angka.filter()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var angka = [4,2,1,7,5,9,20,15,13];\n    var angka2 = angka.filter(function(element,index,array){\n      // pencarian nilai elemen yang nilainya &lt; 10\n      return element &lt; 10;\n    });\n    // variable angka2 berisi array hasil dari pencarian\n    alert(angka2.join('' - ''));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>find</h3>\n\n<div class="wrapper-content">\n<p>Method <code>find()</code> juga berfungsi untuk menemukan element di dalam array namun hanya akan mengembalikan nilai pertama yang ditemukan di dalam element array yang dicari.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Find Array&lt;/h1&gt;\n  \n  &lt;h3&gt;angka = [4,2,8,7,5,9,20,15,13]&lt;/h3&gt;\n  &lt;h3&gt;Cari angka yang lebih kecil dari 10&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;angka.find()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var angka = [4,2,8,7,5,9,20,15,13];\n    var angka2 = angka.find(function(element,index,array){\n      // pencarian nilai elemen yang nilainya &lt; 10\n      return element &lt; 10;\n    });\n    // variable angka2 berisi array hasil dari pencarian\n    // tetapi hanya akan menemukan nilai pertama yang ditemukan\n    alert(angka2);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>includes</h3>\n\n<div class="wrapper-content">\n<p>Method <code>includes()</code> digunakan untuk menguji apakah di dalam sebuah array terdapat sebuah element tertentu atau tidak. Nilai yang dikembalikan oleh method ini berupa boolean antara true dan false.</p>\n\n<pre class="line-numbers">\n<code>array.includes(elementYangDicari)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Method Array&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Includes Array&lt;/h1&gt;\n  \n  &lt;h3&gt;hewan = ["kelinci","koala","kucing","sapi","domba"]&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;hewan.includes(''kucing'')&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;hewan.includes(''gajah'')&lt;/button&gt;\n\n&lt;script&gt;\n  var hewan = ["kelinci","koala","kucing","sapi","domba"];\n  function play1(){\n    alert(hewan.includes(''kucing''));\n  }\n  function play2(){\n    alert(hewan.includes(''gajah''));    \n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://www.w3schools.com/js/js_array_iteration.asp" target="_blank">w3schools.com/js/js_array_iteration.asp</a></li>\n</ul>\n', 654, 1554171121, 1595432752),
(18, 'BRZuJEe', 'beginner', 24, 'JS Dates', 'Tampilan Waktu di JavaScript', 'date output,object date,method get,metode set,new date,numbers,milliseconds,string', 1, '<p>Di dalam dunia kita, waktu merupakan sebuah standard pengukuran sebuah peristiwa itu akan terjadi, sedang terjadi dan telah terjadi. Standard ini didefinisikan dengan tahun, bulan, hari, jam, menit, detik, dan milidetik.</p>\n\n<p>Bahasa program umumnya memiliki aturan standard pengelolaan waktu berdasarkan wilayah tertentu. JavaScript sendiri pun bisa melakukan manajemen waktu dengan format yang telah ditentukan sebagai standardnya sendiri.</p>\n\n<h3>Date Output</h3>\n\n<div class="wrapper-content">\n<p>Pada beberapa bahasa program, kita diharuskan untuk mengatur tempat dimana zona waktu yang akan dipakai saat itu. Hal itu karena setiap zona waktu memiliki selisih perbedaan waktu yang bisa saja sangat signifikan berdasarkan aturan standard dunia yaitu GMT (Greenwich Mean Time) atau UTC (Universal Time Coordinate). Namun untuk JavaScript berbeda, tanpa mengatur zona waktu yang spesifik, JavaScript akan menggunakan waktu pada browser yang sedang dipakai saat itu yang secara otomatis, browser juga akan memakai waktu yang telah tertanam pada operating system perangkat yang dipakai.</p>\n\n<p>Di bahasa program JavaScript secara default, waktu ditampilkan sebagai string. Caranya adalah dengan menggunakan function <code>Date()</code>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Format standard waktu JavaScript&lt;/h1&gt;\n  &lt;h3 id="time"&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  var now = Date();\n  document.querySelector(''#time'').innerHTML = now;\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Function &lt;code&gt;Date()&lt;/code&gt; akan menampilkan waktu saat ini dengan format :\n  "&lt;code&gt;Hari Bulan Tanggal Tahun Jam:Menit:Detik Zona Waktu&lt;/code&gt;"\n  berdasarkan waktu pada perangkat komputer yang sedang dipakai\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold">JavaScript memulai penghitungan waktu dalam satuan milidetik yang dimulai sejak <code>1 Januari 1970 00:00:00 UTC</code>. Istilah untuk waktu dimulainya penghitungan ini disebut sebagai <code>ZeroTime</code></p>\n</div>\n\n<h3>Object Date</h3>\n\n<div class="wrapper-content">\n<p>Waktu di dalam JavaScript bisa juga dibentuk menjadi data object melalui object constructor dengan keyword <code>new Date()</code>. Ada 4 cara yang bisa digunakan untuk membuat object waktu berdasarkan argument yang diberikan.</p>\n\n<ol>\n	<li>Tanpa Argument</li>\n	<li>Argument Number</li>\n	<li>Argument Milliseconds</li>\n	<li>Argument String</li>\n</ol>\n\n<p class="note" style="font-weight:bold">Waktu yang masih dalam bentuk non object pada komputer itu akan terus berjalan sedangkan waktu yang telah dibentuk menjadi object akan bersifat statis atau diam. Itu lah kenapa keyword <code>new</code> saat membetuk object Date sangat berpengaruh.</p>\n\n<h4>new Date</h4>\n\n<p>Constructor <code>new Date()</code> tanpa tambahan argument apapun di dalamnya akan mengembalikan nilai berupa data object yang berisi waktu saat ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object new Date&lt;/h1&gt;\n  \n  &lt;h3 id="time"&gt;&lt;/h3&gt;\n  \n&lt;script&gt;\n  var time = new Date();\n  document.querySelector(''#time'').innerHTML = time;\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>numbers</h4>\n\n<p>Constructor <code>new Date(numbers)</code> dengan argument beberapa angka di dalamnya dapat menghasilkan output waktu secara spesifik. Angka-angka sebagai argument ini akan mewakili spesifik nama waktu yang ditulis secara berurutan mulai dari tahun, bulan, hari, jam, menit, detik dan milidetik.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object new Date(Numbers)&lt;/h1&gt;\n  \n  &lt;h3&gt;Kapan peristiwa proklamasi kemerdekaan Indonesia ?&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;7 argument&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;6 argument&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;5 argument&lt;/button&gt;\n  &lt;button onclick="play4()"&gt;4 argument&lt;/button&gt;\n  &lt;button onclick="play5()"&gt;3 argument&lt;/button&gt;\n  &lt;button onclick="play6()"&gt;2 argument&lt;/button&gt;\n\n&lt;script&gt;\n  function play1(){\n    alert( new Date(1945,07,17,10,45,30,20) );\n  }\n  function play2(){\n    alert( new Date(1945,07,17,10,45,30) );\n  }\n  function play3(){\n    alert( new Date(1945,07,17,10,45) );\n  }\n  function play4(){\n    alert( new Date(1945,07,17,10) );\n  }\n  function play5(){\n    alert( new Date(1945,07,17) );\n  }\n  function play6(){\n    alert( new Date(1945,07) );\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Argument yang mewakili tahun dan bulan harus ditulis,\n  karena jika hanya menuliskan salah satunya saja\n  maka akan dianggap sebagai milliseconds.\n  JavaScript menghitung nama bulan mulai dari angka 0,\n  sehingga Januari = 0 sedangkan Desember = 11\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>milliseconds</h4>\n\n<p>Constructor <code>new Date(milliseconds)</code> akan menghasilkan output berupa <code>ZeroTime</code> + <code>milliseconds</code> yang ditulis sebagai argumentnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n  &lt;style&gt;\n    #time {\n      border: 1px solid red;\n      text-align: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object new Date(milliseconds)&lt;/h1&gt;\n  \n  &lt;h4&gt;Zero Time : &lt;span class="now"&gt;&lt;/span&gt;&lt;/h4&gt;\n  \n  &lt;h3 id="time"&gt;&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;new Date(86400000)&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;new Date(100000000000)&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;new Date(-100000000000)&lt;/button&gt;\n  \n&lt;script&gt;\n  document.querySelector(''.now'').innerHTML = new Date(0);\n  function play1(){\n    var time = new Date(86400000);\n    document.querySelector(''#time'').innerHTML = time; \n  }\n  function play2(){\n    var time = new Date(100000000000);\n    document.querySelector(''#time'').innerHTML = time; \n  }\n  function play3(){\n    var time = new Date(-100000000000);\n    document.querySelector(''#time'').innerHTML = time; \n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Sehari (24 jam) adalah 86 400 000 milliseconds\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>string</h4>\n\n<p>Constructor <code>new Date(string)</code> akan menghasilkan output waktu yang spesifik berdasarkan argument string yang dimasukkan. String Date yang dimasukkan memiliki beberapa variasi penulisan bergantung pada standard mana yang digunakan.</p>\n\n<p>Berikut ini adalah beberapa standard yang biasa kita temui dalam penulisan waktu (tanggal).</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">Tipe</th>\n			<th scope="col">Rumus</th>\n			<th scope="col">Contoh</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td>ISO Date</td>\n			<td>YYYY-MM-DD</td>\n			<td>&quot;1945-08-17&quot;</td>\n		</tr>\n		<tr>\n			<td>Short Date</td>\n			<td>MM/DD/YYY</td>\n			<td>&quot;08/17/1945&quot;</td>\n		</tr>\n		<tr>\n			<td>Long Date</td>\n			<td>MMM DD YYY</td>\n			<td>&quot;Aug 17 1945&quot; atau &quot;17 Aug 1945&quot;</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object new Date(String)&lt;/h1&gt;\n  \n  &lt;h3&gt;Kapan peristiwa proklamasi kemerdekaan Indonesia ?&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;ISO Standard&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;Short Date&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;Long Date&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    alert( new Date("1945-08-17") );\n  }\n  function play2(){\n    alert( new Date("08/17/1945") );\n    // urutan DD dengan MM yang terbalik akan invalid\n    alert( new Date("17/08/1945") );\n  }\n  function play3(){\n    alert( new Date("Aug 17 1945") );\n    alert( new Date("17 Aug 1945") );\n    // menuliskan nama bulan secara utuh dalam bahasa inggris\n    alert( new Date("17 August 1945") );\n  }\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Method Get</h3>\n\n<div class="wrapper-content">\n<p>Dengan menggunakan method get, mengatur format tampilan waktu bisa dilakukan sesuai dengan format yang diinginkan atau bisa juga disesuaikan menurut aturan format tanggal dan waktu yang dipakai dalam suatu negara.</p>\n\n<p>Berikut ini adalah beberapa method get yang biasa dipakai.</p>\n\n<div class="table-responsive">\n<table border="1" cellpadding="1" cellspacing="1" class="table table-bordered table-condensed table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">method</th>\n			<th scope="col">keterangan</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>getDay()</code></td>\n			<td>output hari (0 - 6)</td>\n		</tr>\n		<tr>\n			<td><code>getDate()</code></td>\n			<td>output tanggal (1 - 31)</td>\n		</tr>\n		<tr>\n			<td><code>getMonth()</code></td>\n			<td>output bulan (0 - 11)</td>\n		</tr>\n		<tr>\n			<td><code>getFullYear()</code></td>\n			<td>output tahun 4 digit (YYYY)</td>\n		</tr>\n		<tr>\n			<td><code>getHours()</code></td>\n			<td>output jam (0 - 23)</td>\n		</tr>\n		<tr>\n			<td><code>getMinutes()</code></td>\n			<td>output menit (0 - 59)</td>\n		</tr>\n		<tr>\n			<td><code>getSeconds()</code></td>\n			<td>output detik (0 - 59)</td>\n		</tr>\n		<tr>\n			<td><code>getMilliseconds()</code></td>\n			<td>output milidetik (0 - 999)</td>\n		</tr>\n		<tr>\n			<td><code>getTime()</code></td>\n			<td>output dalam milidetik sejak 1 Januari 1970</td>\n		</tr>\n		<tr>\n			<td><code>Date.now() </code></td>\n			<td>output dalam milidetik sejak 1 Januari 1970 (ES 5)</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Dates&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Method Get Dates&lt;/h1&gt;\n  \n  &lt;h3 id="now"&gt;&lt;/h3&gt;\n  &lt;button onclick="play1()"&gt;tahun&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;bulan&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;tanggal&lt;/button&gt;\n  &lt;button onclick="play4()"&gt;hari&lt;/button&gt;\n  &lt;button onclick="play5()"&gt;jam&lt;/button&gt;\n  &lt;button onclick="play6()"&gt;menit&lt;/button&gt;\n  &lt;button onclick="play7()"&gt;detik&lt;/button&gt;\n  &lt;button onclick="play8()"&gt;milidetik&lt;/button&gt;\n  &lt;button onclick="play9()"&gt;time milidetik&lt;/button&gt;\n  \n&lt;script&gt;\n  var now = new Date();\n  document.getElementById(''now'').innerHTML = now;\n  function play1(){\n    alert( now.getFullYear() );\n  }\n  function play2(){\n    alert( now.getMonth() );\n  }\n  function play3(){\n    alert( now.getDate() );\n  }\n  function play4(){\n    alert( now.getDay() );\n  }\n    function play5(){\n    alert( now.getHours() );\n  }\n  function play6(){\n    alert( now.getMinutes() );\n  }\n  function play7(){\n    alert( now.getSeconds() );\n  }\n  function play8(){\n    alert( now.getMilliseconds() );\n  }\n  function play9(){\n    alert( now.getTime() );\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  untuk output method &lt;code&gt;getMonth()&lt;/code&gt; dan &lt;code&gt;getDay()&lt;/code&gt; akan dimulai penghitungan mulai dari angka 0.\n  getMonth akan menghasilkan nilai 0 - 11 (12 bulan), 0 untuk January dan 11 untuk December.\n  getDay akan menghasilkan nilai 0 - 6 (7 hari), 0 untuk Sunday dan 6 untuk Saturday \n&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Metode Set</h3>\n\n<div class="wrapper-content">\n<p>Jika method get di atas digunakan untuk mendapatkan hasil waktu secara spesifik baik tahun jam bahkan detiknya, maka dengan method set, kita diperbolehkan untuk menuliskan waktu yang spesifik pula berdasarkan argument yang dimasukkan ke dalam method ini.</p>\n\n<p>Adapun beberapa methodnya adalah sebagai berikut.</p>\n\n<div class="table-responsive">\n<table border="1" cellpadding="1" cellspacing="1" class="table table-bordered table-condensed table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">method</th>\n			<th scope="col">keterangan</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>setDay()</code></td>\n			<td>set hari (0 - 6)</td>\n		</tr>\n		<tr>\n			<td><code>setDate()</code></td>\n			<td>set tanggal (1 - 31)</td>\n		</tr>\n		<tr>\n			<td><code>setMonth()</code></td>\n			<td>set bulan (0 - 11)</td>\n		</tr>\n		<tr>\n			<td><code>setFullYear()</code></td>\n			<td>set tahun</td>\n		</tr>\n		<tr>\n			<td><code>setHours()</code></td>\n			<td>set jam (0 - 23)</td>\n		</tr>\n		<tr>\n			<td><code>setMinutes()</code></td>\n			<td>set menit (0 - 59)</td>\n		</tr>\n		<tr>\n			<td><code>setSeconds()</code></td>\n			<td>set detik (0 - 59)</td>\n		</tr>\n		<tr>\n			<td><code>setMilliseconds()</code></td>\n			<td>set milidetik (0 - 999)</td>\n		</tr>\n		<tr>\n			<td><code>setTime()</code></td>\n			<td>set milidetik sejak 1 Januari 1970</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://www.w3schools.com/js/js_dates.asp" target="_blank">w3schools.com/js/js_dates.asp</a></li>\n</ul>\n', 1051, 1554171121, 1595327238),
(19, 'Bd0dgBm', 'beginner', 21, 'JS Looping', 'Struktur Pengulangan JavaScript', 'apa itu loop,pengulangan for,pengulangan for in,pengulangan while,pengulangan do while,infinity loop', 1, '<p>Pengulangan atau Looping di dalam bahasa program dilakukan untuk mengubah alur kendali sebuah program, yang umumnya dieksekusi berkelanjutan dari atas ke bawah menjadi &quot;<em>stuck</em>&quot; beberapa saat di dalam eksekusi baris statement dengan memanfaatkan sebuah kondisi tertentu sebelum melanjutkan baris statement selanjutnya. Dengan melakukan pengulangan, baris statement yang ingin dieksekusi lebih dari sekali dalam satu waktu sekaligus bisa dilakukan.</p>\n\n<h3>Apa itu Loop</h3>\n\n<div class="wrapper-content">\n<p>Konsep pengulangan atau looping ini akan memberikan kemudahan kepada para programer apabila ingin melakukan sesuatu konsep yang sama sebanyak apapun tanpa menulis ulang kode serupa sebanyak yang dibutuhkan.</p>\n\n<p>Seperti pada kasus untuk mengeluarkan isi dari data di dalam variable array yang memiliki 10 element di dalamnya. Jika ingin mencetak satu per satu elementnya ke dalam layar, kemungkinan kode yang akan ditulis akan seperti ini.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mencetak isi Array tanpa Loop&lt;/h1&gt;  \n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  &lt;p id="hasil"&gt;&lt;/p&gt;\n  \n&lt;script&gt;\n  function play(){\n    var cetak = '''';\n    var bilangan = ["satu","dua","tiga","empat","lima","enam","tujuh","delapan","sembilan","sepuluh"];\n    cetak += bilangan[0] + "&lt;br&gt;"; \n    cetak += bilangan[1] + "&lt;br&gt;"; \n    cetak += bilangan[2] + "&lt;br&gt;"; \n    cetak += bilangan[3] + "&lt;br&gt;"; \n    cetak += bilangan[4] + "&lt;br&gt;"; \n    cetak += bilangan[5] + "&lt;br&gt;";\n    cetak += bilangan[6] + "&lt;br&gt;"; \n    cetak += bilangan[7] + "&lt;br&gt;"; \n    cetak += bilangan[8] + "&lt;br&gt;"; \n    cetak += bilangan[9] + "&lt;br&gt;";\n    document.getElementById(''hasil'').innerHTML = cetak;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Kode di atas bisa ditulis secara manual selama data yang dikeluarkan masih sedikit, namun jika data yang perlu dikeluarkan ada ratusan atau ribuan, maka teknik copy paste saja tidak akan membantu efisiensi waktu dan manajemen memory. Untuk itulah kasus seperti di atas bisa diatasi dengan menggunakan teknik loop.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mencetak isi Array dengan Loop&lt;/h1&gt;  \n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  &lt;p id="hasil"&gt;&lt;/p&gt;\n  \n&lt;script&gt;\n  function play(){\n    var cetak = '''';\n    var bilangan = ["satu","dua","tiga","empat","lima","enam","tujuh","delapan","sembilan","sepuluh"];\n    \n    for (var i = 0; i &lt; bilangan.length; i++ ) {\n      cetak += bilangan[i] + "&lt;br&gt;";\n    }\n    \n    document.getElementById(''hasil'').innerHTML = cetak;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Di JavaScript, teknik looping ini terbagi menjadi 4 jenis yaitu menggunakan <code>for</code>, <code>for in</code>, <code>while</code> dan <code>do while</code>.</p>\n\n<h3>Pengulangan For</h3>\n\n<div class="wrapper-content">\n<p>Pengulangan menggunakan teknik <code>for</code> merupakan cara yang paling sering digunakan, karena penulisan dengan teknik ini cukup ringkas dan mudah dipahami.</p>\n\n<pre>\n<code class="language-javascript">for (statement 1; statement 2; statement 3) {\n  // kode yang akan dieksekusi\n}</code></pre>\n\n<p>statement 1 - berupa nilai awal sebelum dilakukan proses pengulangan.</p>\n\n<p>statement 2 - berupa kondisi terminasi atau batas jumlah pengulangan yang akan dilakukan. Statement ini harus bernilai true agar pengulangan dapat dilakukan. Saat statement ini bernilai false, maka pengulangan akan dihentikan.</p>\n\n<p>statement 3 - berupa nilai perpindahan setiap pengulangan dilakukan (increment / decrement).</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Loop For&lt;/h1&gt;  \n\n  &lt;h3&gt;Tampilkan alert sebanyak 5 kali&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    for ( var i = 1; i &lt;= 5; i++ ){\n      alert("ini adalah alert yang ke-" + i );\n    }\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Dari contoh di atas, maka dapat di jelaskan hal berikut ini.</p>\n\n<ul>\n	<li>Statement pertama berupa deklarasi variable <strong>i</strong> sebagai nilai awal pengulangan yaitu 1</li>\n	<li>Statement kedua berupa batas pengulangan yang diisi dengan ekspresi <strong>i &lt;= 5</strong>. Statement ini merupakan kondisi dimana loop akan dilakukan selama ekspresi ini nilainya adalah <strong>true</strong></li>\n	<li>Statement ketiga berupa increment <strong>i++</strong>, setiap pengulangan berhasil dilakukan, i akan ditambahkan dengan 1</li>\n	<li>Eksekusi alert dilakukan sebanyak 5 kali</li>\n</ul>\n</div>\n\n<ul>\n</ul>\n\n<h3>Pengulangan For In</h3>\n\n<div class="wrapper-content">\n<p>Pengulangan dengan teknik <code>for in</code> pada JavaScript khusus digunakan untuk mengeluarkan nilai dari data yang bertipe object. Tipe data object adalah sebuat data yang di dalamnya terdapat pasangan antara key dan value, yang antar masing-masing pasangan dipisahkan dengan tanda koma.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Loop For In&lt;/h1&gt;  \n\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var obj = {\n      nama: "kucing",\n      jenis: "karnivora",\n      kelas: "mamalia",\n      bunyi: "meong"\n    }\n    var n, text = "";\n    for ( n in obj ) {\n      text += obj[n] + '' | '';\n    }\n    alert(text);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Pengulangan While</h3>\n\n<p>Pengulangan dengan teknik <code>while</code> sebenarnya sama dengan for, perbedaannya hanya terletak pada penulisan nilai perpindahan setiap pengulangan berhasil dilakukan.</p>\n\n<pre>\n<code class="language-javascript">while ( kondisi ) {\n  // kode yang akan dieksekusi selama kondisi bernilai TRUE\n\n  increment/decrement;\n}</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Loop While&lt;/h1&gt;\n\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  &lt;div id="hasil"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = ''''; \n    var x = 1; // nilai awal pengulangan\n    while ( x &lt;= 10 ) { // selama kondisi bernilai true loop akan dilakukan \n      text += "ini adalah pengulangan yang ke- " + x + "&lt;br&gt;";\n      x++; // increment untuk menjadikan nilai x bertambah setiap kali loop\n    }\n    // mencetak output ke layar\n    document.getElementById(''hasil'').innerHTML = text;\n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h3>Pengulangan Do While</h3>\n\n<div class="wrapper-content">\n<p>Pengulangan <code>do while</code> merupakan bentuk lanjutan dari while dimana proses pengulangan akan tetap dilakukan minimal satu kali, baru setelahnya akan menguji kondisi yang diberikan untuk menentukan pengulangan dilanjutkan atau tidak.</p>\n\n<pre>\n<code class="language-javascript">do { \n  // kode yang akan dieksekusi minimal sekali\n  // tanpa melihat kondisi terlebih dulu\n}\nwhile ( kondisi )\n</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Pengulangan JavaScript&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Loop Do While&lt;/h1&gt;\n\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  &lt;div id="hasil"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n  function play(){\n    var text = ''''; \n    var x = 100; // nilai awal pengulangan\n    do { // lakukakan loop berikut\n      text += "ini adalah pengulangan yang ke- " + x + "&lt;br&gt;";\n      x++; // increment untuk menjadikan nilai x bertambah setiap kali loop\n    }\n    while ( x &lt;= 10 ) // kondisi harus bernilai true jika ingin loop tetap dilakukan\n    \n    // mencetak output ke layar\n    document.getElementById(''hasil'').innerHTML = text;\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Meskipun nilai x = 100, sedangkan syarat ( x &lt;= 10 ) bernilai false, pengulangan tetap dilakukan sekali.\n  Baru setelahnya pengulangan dihentikan setelah melihat syarat bernilai false\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Infinity Loop</h3>\n\n<div class="wrapper-content">\n<p>Infinity loop atau pengulangan tanpa batas adalah sebuah keadaan dimana pengulangan akan tetap berlanjut tanpa henti sampai mencapai batas kemampuan CPU komputer melakukan perintah tersebut. Keaadaan tersebut dapat terjadi apabila kita melakukan kesalahan dimana tidak memberikan kondisi terminasi atau kondisi pengulangan itu akan berhenti dengan benar.</p>\n\n<pre>\n<code class="language-javascript">var x = 1; // nilai awal pengulangan\nwhile ( x &lt;= 10 ) { // selama kondisi bernilai true loop akan dilakukan \n  console.log(''Hello World'');\n  \n  // di dalam blok ini x akan selalu bernilai 1\n  // karena tidak ada increment x++ dituliskan\n  // artinya infinity loop terjadi\n  // karena kondisi while akan selalu bernilai TRUE\n}</code></pre>\n\n<p class="note" style="font-weight:bold;">Setiap melakukan pengulangan, perhatikan kondisi terminasi ini jika tidak ingin mengalami crash pada browser karena menjalankan infinity loop</p>\n</div>\n', 1019, 1554171121, 1593525761),
(20, 'BPI6T7Y', 'beginner', 23, 'JS This', 'Konsep This pada JavaScript', 'this global,this function,this method,this event', 1, '<p>Konsep this pada JavaScript ini cukup membingungkan untuk dipahami. <code>this</code> merupakan sebuah keyword atau variable istimewa yang secara default nilainya akan diisikan oleh JavaScript. Nilai dari keyword this bisa berubah ubah tergantung dimana variable ini digunakan, baik itu penggunaan this pada scope global, function, method, atau event, akan tetapi kita tidak akan bisa mengubah nilainya karena this bukanlah variable.</p>\n\n<h3>This Global</h3>\n\n<div class="wrapper-content">\n<p>Menggunakan keyword this di dalam scope global akan mengembalikan nilai berupa object window. Object window adalah object terluar di dalam JavaScript dan selalu berada di global scope.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;This pada Scope Global&lt;/h1&gt;\n  \n  &lt;h3&gt;this nilainya adalah &lt;u id="hasil"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var x = this;\n  function play(){\n    document.getElementById(''hasil'').innerHTML = x;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>This Function</h3>\n\n<div class="wrapper-content">\n<p>Menggunakan keyword this di dalam function juga sama seperti pada this di scope global. Nilai yang akan dikembalikan berupa object window.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;This pada Function&lt;/h1&gt;\n  \n  &lt;h3&gt;this nilainya adalah &lt;u id="hasil"&gt;&lt;/u&gt;&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var y = this;\n    document.getElementById(''hasil'').innerHTML = y;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>This Method</h3>\n\n<div class="wrapper-content">\n<p>Meski method bentuknya sama-sama menggunakan keyword function, akan tetapi penggunaan this pada method akan mengembalikan nilai yang berbeda. Keyword this bukan lagi bernilai object window melainkan akan merujuk pada object &quot;<strong>pemilik</strong>&quot; dari method tersebut.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;This pada Method&lt;/h1&gt;\n  \n  &lt;h3&gt;this mengacu pada object pemilik method&lt;/h3&gt;\n  &lt;button onclick="nama.lengkap()"&gt;buka console kemudian klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  var nama = {\n    depan : ''John'',\n    belakang : ''Simon'',\n    lengkap : function(){\n      // this akan menggantikan variable object nama\n      // karena method lengkap() adalah milik object nama\n      var x = this.depan + " " + this.belakang;\n      // penulisan di atas sama artinya dengan :\n      // var x = nama.depan + " " + nama.belakang;\n      \n      console.log(x);\n      // this mengembalikan keseluruhan object yang bersangkutan\n      console.log(this);\n    }\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>This Event</h3>\n\n<div class="wrapper-content">\n<p>Penggunaan keyword this pada event ini mungkin akan lebih sering digunakan saat memanipulasi DOM, dimana nilai dari this akan mengacu pada element HTML yang sedang diberikan event.</p>\n\n<p>Dengan memanfaatkan keyword ini di dalam event, akan sangat memungkinkan untuk menelusuri element lainnya (traversal) yang berhubungan langsung dengan element yang sedang dikenai event.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;This pada Event (Handler)&lt;/h1&gt;\n  \n  &lt;h3&gt;this nilainya mengacu pada element mana yang sedang diberikan event&lt;/h3&gt;\n  &lt;h3&gt;buka Devtools untuk melihat nilai this&lt;/h3&gt;\n  \n  &lt;button onclick="console.log(this)"&gt;tombol 1&lt;/button&gt;\n  &lt;button onclick="console.log(this)"&gt;tombol 2&lt;/button&gt;\n  &lt;button onclick="console.log(this)"&gt;tombol 3&lt;/button&gt;\n  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 394, 1554171121, 1595471082);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(21, 'IgaTMbO', 'medium', 2, 'DOM Selection', 'Menyeleksi Element DOM', 'getelementbyid,getelementsbytagname,getelementsbyclassname,queryselector,queryselectorall,object document', 1, '<p>Pada kesempatan kali ini, kita akan mebahas tentang bagaimana cara JavaScript untuk memilih atau menyeleksi element-element yang ada di dalam DOM. Langkah penyeleksian ini merupakan langkah pertama yang harus dilakukan untuk kemudian dapat dilakukan manipulasi terhadap halaman web.</p>\n\n<p>Beberapa method yang bisa digunakan untuk menyeleksi element ini adalah sebagai berikut :</p>\n\n<div class="table-responsive">\n<table class="table table-condensed table-bordered table-hover" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">method</th>\n			<th scope="col">return</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>getElementById()</code></td>\n			<td>element</td>\n		</tr>\n		<tr>\n			<td><code>getElementsByTagName()</code></td>\n			<td>HTMLCollection</td>\n		</tr>\n		<tr>\n			<td><code>getElementsByClassName()</code></td>\n			<td>HTMLCollection</td>\n		</tr>\n		<tr>\n			<td><code>querySelector()</code></td>\n			<td>element</td>\n		</tr>\n		<tr>\n			<td><code>querySelectorAll()</code></td>\n			<td>NodeList</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Semua method tersebut disediakan oleh JavaScript untuk dapat digunakan sesuai dengan apa yang dibutuhkan di dalam penyeleksian element DOM dari source code yang kita buat. Jika dalam proses seleksi terhadap element yang ada di dalam DOM tidak dapat ditemukan satu element pun, maka masing-masing method ini akan mengembalikan nilai <code>null</code>.</p>\n\n<h3>getElementById</h3>\n\n<div class="wrapper-content">\n<p>Method ini merupakan method yang paling simpel dan paling sering digunakan untuk menyeleksi element HTML. Method <code>getElementById()</code> digunakan untuk menyeleksi element HTML berdasarkan attribut id. Dalam teorinya, pada setiap dokumen HTML, nilai dari attribute id tidak boleh ada yang kembar meski ada pada element yang berbeda. Method ini akan mengembalikan hasil berupa satu element tunggal berdasarkan id yang ditulis di dalam argument nya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Selector&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method getElementById&lt;/h1&gt;\n  &lt;h3 id="h3"&gt;Ini adalah text di dalam tag h3&lt;/h3&gt;\n  &lt;button onclick="play()"&gt;getElementById()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var h3 = document.getElementById(''h3'');\n    alert(h3.outerHTML);\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Property outerHTML digunakan untuk mengembalikan element lengkap dengan tag nya\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>getElementsByTagName</h3>\n\n<div class="wrapper-content">\n<p>Method <code>getElementsByTagName()</code> digunakan untuk menyeleksi atau mencari element berdasarkan nama tag yang ditulis sebagai argumentnya. Hasil yang akan dikembalikan oleh method ini berupa HTMLCollection atau kumpulan beberapa element HTML.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Selector&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method getElementsByTagName&lt;/h1&gt;\n  \n  &lt;h3&gt;Ubah warna background paragraf kedua&lt;/h3&gt;\n  &lt;p&gt;Ini adalah paragraf 1&lt;/p&gt;\n  &lt;p&gt;Ini adalah paragraf 2&lt;/p&gt;\n  &lt;p&gt;Ini adalah paragraf 3&lt;/p&gt;\n  &lt;button onclick="play()"&gt;getElementsByTagName()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var p = document.getElementsByTagName(''p'');\n    // buka console untuk melihat isi variable\n    console.log(p);\n    // memanipulasi element\n    p[1].style.backgroundColor = ''lime'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Karena yang dihasilkan oleh method ini kumpulan element dalam bentuk seperti array,\n  maka untuk memilih element secara spesifik harus dituliskan pula angka indexnya.\n  Buka DevTools tab console untuk mengetahui nilai yang dikembalikan oleh method ini \n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>getElementsByClassName</h3>\n\n<div class="wrapper-content">\n<p>Method ini digunakan untuk menyeleksi element di dalam DOM berdasarkan nama classnya. Sama seperti method sebelumnya, method <code>getElementsByClassName()</code> juga akan mengembalikan nilai berupa HTMLCollection.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Selector&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method getElementsByClassName&lt;/h1&gt;\n  \n  &lt;h3&gt;Ubah warna background element yang memiliki class txt&lt;/h3&gt;\n  &lt;p class="txt"&gt;Ini adalah paragraf 1&lt;/p&gt;\n  &lt;div class="txt"&gt;Ini adalah paragraf 2&lt;/div&gt;\n  &lt;p&gt;Ini adalah paragraf 3&lt;/p&gt;\n  &lt;button onclick="play()"&gt;getElementsByClassName()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var kelas = document.getElementsByClassName(''txt'');\n    // buka console untuk melihat isi variable\n    console.log(kelas);\n    // memanipulasi element\n    kelas[0].style.backgroundColor = ''lightblue'';\n    kelas[1].style.backgroundColor = ''lightgreen'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Buka DevTools tab console untuk mengetahui nilai yang dikembalikan method ini\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p class="note" style="font-weight:bold;">Penyeleksian element menggunakan method getElementsByTagName dan getElementsByClassName meskipun element yang berhasil terseleksi hanya ada satu element, penulisan angka index harus tetap dicantumkan dengan angka index <code>[0]</code>. Hal yang sama juga berlaku untuk method yang menghasilkan NodeList.</p>\n\n<p>Dengan ketiga method di atas sebenarnya sudah cukup untuk keperluan dalam penyeleksian element DOM. Akan tetapi JavaScript menambahkan method lainnya yang dikhususkan untuk menyeleksi element pada DOM menggunakan selector CSS.</p>\n\n<h3>querySelector</h3>\n\n<div class="wrapper-content">\n<p>Jika sebelumnya sudah memahami apa itu selector pada CSS, untuk menggunakan method <code>querySelector()</code> akan menjadi lebih mudah. Selector CSS yang dituliskan sebagai argument dari method ini akan menghasilkan element tunggal seperti pada method getElementById. Selector yang dimasukkan bisa berupa selector yang sederhana ataupun selector yang lebih spesifik.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Selector&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method querySelector&lt;/h1&gt;\n  \n  &lt;h3&gt;Seleksi element li yang ada pada urutan kedua&lt;/h3&gt;\n  &lt;main&gt;\n    &lt;ul class="list"&gt;\n      &lt;li&gt;ini adalah list pertama&lt;/li&gt;\n      &lt;li&gt;ini adalah list kedua&lt;/li&gt;\n      &lt;li&gt;ini adalah list ketiga&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;button onclick="play()"&gt;querySelector()&lt;/button&gt;\n  &lt;/main&gt;\n  \n&lt;script&gt;\n  function play(){\n    var select = document.querySelector(''main ul.list li'');\n    // buka console untuk melihat isi variable\n    console.log(select);\n    // memanipulasi element\n    select.innerHTML = ''element ini diubah dengan querySelector JavaScript'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Kita tidak bisa menyeleksi semua element li dengan querySelector karena\n  method ini hanya akan mengembalikan satu element yang pertama kali ditemukan saja.\n  Seperti jika kita menulis querySelector(main ul.list li),\n  maka yang akan tertarget adalah element li pertama yang ditemukan\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>querySelectorAll</h3>\n\n<div class="wrapper-content">\n<p>Dengan method <code>querySelectorAll()</code>, memungkinkan kita untuk menyeleksi semua element yang cocok, sesuai dengan yang ditulis di dalam query. Method ini akan mengembalikan kumpulan element dalam bentuk NodeList.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Selector&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method querySelectorAll&lt;/h1&gt;\n  &lt;main&gt;\n    &lt;ul class="list"&gt;\n      &lt;li&gt;ini adalah list pertama&lt;/li&gt;\n      &lt;li&gt;ini adalah list kedua&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;section&gt;\n      &lt;ul&gt;\n        &lt;li&gt;ini adalah list di dalam section&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/section&gt;\n    &lt;button onclick="play()"&gt;querySelectorAll()&lt;/button&gt;\n  &lt;/main&gt;\n  \n&lt;script&gt;\n  function play(){\n    var select = document.querySelectorAll(''li'');\n    // buka console untuk melihat isi variable\n    console.log(select);\n    // memanipulasi element\n    select[0].innerHTML = ''element ini diubah dari querySelector JavaScript'';\n    select[1].innerHTML = ''semua element li akan terkena seleksi'';\n    select[2].innerHTML = ''berdasarkan query yang ditulis dalam method'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Buka DevTools tab console untuk mengetahui nilai yang dikembalikan method ini\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Object Document</h3>\n\n<div class="wrapper-content">\n<p>Pada setiap contoh di atas, selalu ada object <code>document</code> yang dituliskan di sebelum nama method yang digunakan. Hal itu ditujukan agar object document digunakan sebagai scope pencarian object yang lainnya. Karena object document merupakan node root dari semua node yang lainnya atau yang merepresentasikan sebuah halaman web, maka root inilah yang dipakai sebagai scope dimana semua element HTML berada.</p>\n\n<p>Object document juga menyimpan object lain di dalamnya sebagai property yang bisa digunakan untuk berbagai keperluan seperti mendapatkan info tentang halaman web tersebut.</p>\n\n<p>Berikut ini adalah beberapa property yang bisa digunakan di dalam object document.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed table-hover" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">Property</th>\n			<th scope="col">return</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>document.body </code></td>\n			<td>mengembalikan semua element di dalam tag body</td>\n		</tr>\n		<tr>\n			<td><code>document.cookie </code></td>\n			<td>mengembalikan data semua cookie dalam bentuk string</td>\n		</tr>\n		<tr>\n			<td><code>document.forms </code></td>\n			<td>mengembalikan semua element form</td>\n		</tr>\n		<tr>\n			<td><code>document.head </code></td>\n			<td>mengembalikan semua element di dalam tag head</td>\n		</tr>\n		<tr>\n			<td><code>document.links </code></td>\n			<td>mengembalikan semua element a yang ada di dalam halaman</td>\n		</tr>\n		<tr>\n			<td><code>document.referrer </code></td>\n			<td>mengembalikan URL sebelumnya dari halaman aktif saat ini</td>\n		</tr>\n		<tr>\n			<td><code>document.scripts </code></td>\n			<td>mengembalikan semua element script yang ada di dalam halaman</td>\n		</tr>\n		<tr>\n			<td><code>document.title </code></td>\n			<td>mengembalikan isi dari element title</td>\n		</tr>\n		<tr>\n			<td><code>document.URL </code></td>\n			<td>mengembalikan URL yang sedang dibuka saat ini</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n', 922, 1583636916, 1593526011),
(22, 'IiOkByQ', 'medium', 3, 'DOM Element', 'Memanipulasi Element DOM', 'property innerhtml,property style,property attributes,property classlist,getattribute,setattribute,removeattribute,classlist.add,classlist.remove,classlist.toggle,classlist.item,classlist.contains,classlist.replace', 1, '<p>Setelah belajar menyeleksi element di dalam DOM dengan method yang sudah kita pelajari pada materi sebelumnya, kita akan lanjutkan lebih detail tentang materi memanipulasi element-element yang sudah berhasil terseleksi.</p>\n\n<p>JavaScript menyediakan banyak sekali property dan juga method untuk setiap element yang telah berhasil diseleksi pada DOM. Masih ingat kan apa perbedaan antara property dengan method ? Property dan method di dalam DOM ini memungkinkan kita untuk memanipulasi konten, attribute, class, dan style dari sebuah element.</p>\n\n<p>Berikut ini adalah beberapa peroperty dan method element DOM yang sering digunakan.</p>\n\n<h3>Property innerHTML</h3>\n\n<div class="wrapper-content">\n<p>Property <code>innerHTML</code> biasa digunakan untuk menuliskan apapun ke dalam element, baik itu berupa text biasa atau bahkan text yang lengkap dengan tag HTML sebagai pembungkusnya. Dengan property ini, kita juga bisa mendapatkan isi dari sebuah element yang sedang diseleksi.</p>\n\n<pre>\n<code class="language-javascript">  // innerHTML mengubah isi element (set)\n  element.innerHTML = ''isi element yang baru'';\n\n  // innerHTML mendapatkan isi element (get)\n  element.innerHTML;</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Property innerHTML&lt;/h1&gt;\n  \n  &lt;h3&gt;Sesuaikan element-element berikut dengan manipulasi innerHTML&lt;/h3&gt;\n  &lt;div id="box"&gt;\n    &lt;button&gt;Ini adalah text di dalam tag p&lt;/button&gt;\n  &lt;/div&gt;\n  &lt;p&gt;Ini adalah sebuah tombol dalam tag button&lt;/p&gt;\n  &lt;button onclick="play()"&gt;innerHTML&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var box = document.querySelector(''#box'');\n    var p = document.getElementsByTagName(''p'')[0];\n    \n    // mendapatkan isi dari element p\n    var pText = p.innerHTML;\n    // mengubah isi element #box\n    box.innerHTML = ''&lt;a href="#"&gt;Ini adalah link dalam tag a&lt;/a&gt; &lt;button&gt;''+pText+''&lt;/button&gt;'';\n    // mengubah isi element p[0]\n    p.innerHTML = ''Ini bukan tombol tapi ini adalah paragraf'';\n    \n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Dengan mengklik tombol, element yang tersedia saat itu (yang asal asalan)\n  akan dimanipulasi untuk disesuaikan antara text dan tag nya.\n  Lihat pula DevTools tab Elements (inspect element) untuk mengetahui proses dibalik layarnya\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Property Style</h3>\n\n<div class="wrapper-content">\n<p>Property <code>style</code> digunakan untuk mengubah style CSS pada sebuah element. Cara kerja metode ini yaitu akan menambahkan CSS secara <u>inline</u> (attribute style) di dalam sebuah element HTML.</p>\n\n<pre>\n<code>element.style.propertyCSS = ''nilaiPropertyCSS'';</code></pre>\n\n<p>Property pada CSS dituliskan setelah property style kemudian diisikan nilainya dengan menggunakan tanda sama dengan. Untuk penulisan property CSS yang terdiri dari dua kata, maka penulisannya diharuskan menggunakan penulisan camelCase, seperti <code>backround-color</code> pada CSS menjadi <code>backgroundColor</code> pada JavaScript.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n  &lt;style&gt;\n    h3 { border: 2px dashed yellow; }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1 id="judul"&gt;Property Style&lt;/h1&gt;\n  \n  &lt;h3&gt;Ini adalah text di dalam tag h3&lt;/h3&gt;\n  &lt;p&gt;Ini adalah text di dalam tag p&lt;/p&gt;\n  &lt;button onclick="play()"&gt;style&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var h1 = document.getElementById(''judul'');\n    var h3 = document.querySelector(''h3'');\n    var p = document.getElementsByTagName(''p'')[0];\n    \n    h1.style.backgroundColor = ''lightblue'';\n    h3.style.border = ''1px solid red'';\n    p.style.color = ''blue'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Lihat DevTools tab Elements (inspect element) untuk mengetahui proses dibalik layarnya.\n  Metode CSS secara inline memiliki prioritas utama untuk diterapkan meskipun element yang dimanipulasi\n  sebelumnya telah memiliki style melalui CSS internal\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Property Attributes</h3>\n\n<div class="wrapper-content">\n<p>Untuk pengelolaan attribute, beberapa property bisa digunakan untuk mendapatkan nama-nama attribute beserta nilai yang ada di dalamnya dari sebuah element.</p>\n\n<p>Dan berikut ini adalah method yang bisa digunakan untuk mengelola attribute dari sebuah element.</p>\n\n<h4>getAttribute</h4>\n\n<p>Method <code>getAttribute()</code> digunakan untuk mendapatkan nilai dari nama attribute yang dituliskan sebagai argumentnya.</p>\n\n<h4>setAttribute</h4>\n\n<p>Method <code>setAttribute()</code> digunakan untuk memberikan attribute baru ke dalam element. Argument pertama diisi dengan nama attribute sedangkan argument kedua diisi dengan nilai dari attribute nya. Apabila sudah terdapat attribut dengan nama yang sama dengan attribute yang akan dimasukkan, maka attribute yang ada akan ditimpa oleh method ini.</p>\n\n<h4>removeAttribute</h4>\n\n<p>Sesuai namanya, method <code>removeAttribute()</code> digunakan untuk menghapus attribute beserta nilai yang ada di dalamnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Property dan Method Attribute&lt;/h1&gt;\n  \n  &lt;img src="http://localhost/helloworld/assets/img/emo/hai.gif" width="120" height="120" alt="image"&gt;\n  &lt;br&gt;&lt;br&gt;\n  &lt;button onclick="play1()"&gt;Attributes&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;getAttribute()&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;setAttribute()&lt;/button&gt;\n  &lt;button onclick="play4()"&gt;removeAttribute()&lt;/button&gt;\n  \n&lt;script&gt;\n  var el = document.getElementsByTagName(''img'')[0];\n  function play1(){\n    var text = '''';\n    var arr = el.attributes;\n    for (var i = 0; i &lt; arr.length; i++) {\n      text += arr[i].name +" = "+ arr[i].value + "\\n";\n    }\n    // mencetak keseluruhan attribute yang dimiliki\n    alert(text);\n  }\n  function play2(){\n    // mendapatkan value dari attribute src\n    alert(el.getAttribute(''src''));\n  }\n  function play3(){\n    // mengubah nilai attribute src, width dan height\n    el.setAttribute(''src'',''http://localhost/helloworld/assets/img/emo/ok.gif'');\n    el.setAttribute(''width'',200);\n    el.setAttribute(''height'',200);\n  }\n  function play4(){\n    // menghapus attribute src\n    el.removeAttribute(''src'');\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Beberapa tombol di atas diisikan function yang masing masing mewakili\n  semua manipulasi attribute yang tersedia dari element img\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Property classList</h3>\n\n<div class="wrapper-content">\n<p>Untuk mengelola class di dalam element sebenarnya mirip seperti attribute, akan tetap JavaScript memiliki property yang disebut sebagai <code>classList</code> yang dapat digunakan secara khusus untuk mengelola class. Perilaku attribute class di dalam element berbeda dengan attribute yang lainnya, karena di dalam attribute class, nilainya bisa dituliskan lebih dari satu, dan masing-masing element bisa memiliki nilai attribute class yang sama.</p>\n\n<p>Method di dalam classList ini terbagi menjadi beberapa, yaitu :</p>\n\n<h4>classList.add</h4>\n\n<p>Method <code>classList.add()</code> digunakan untuk menambahkan class ke dalam element. Method ini akan sering dipakai dan biasanya akan membantu memanipulasi tampilan sebuah element yang desain pada CSSnya sudah disiapkan sebelumnya, tinggal menambahkan class ke dalam element untuk menerapkan desain yang telah dibuat.</p>\n\n<h4>classList.remove</h4>\n\n<p>Method <code>classList.remove()</code> digunakan untuk menghapus class di dalam element.</p>\n\n<h4>classList.toggle</h4>\n\n<p>Yang cukup unik adalah method <code>classList.toggle()</code>. Perilaku dari method ini adalah menambahkan class apabila di dalam sebuah element belum terdapat class yang dimaksud. Sedangkan jika di dalam element tersebut sudah terdapat nama class yang dimaksud maka akan dihapus.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;style&gt;\nimg { display: block; margin: 20px auto; transition: all 0.7s ease; }\n\n/*CSS yang telah disiapkan*/\n.latar {\n  background-color: aqua;\n  padding: 20px;\n}\n.putar {\n  transform: rotateY(180deg);\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;classList Method&lt;/h1&gt;\n  \n  &lt;img src="http://localhost/helloworld/assets/img/emo/hai.gif"&gt;\n  &lt;button onclick="play1()"&gt;classList.add()&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;classList.remove()&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;classList.toggle()&lt;/button&gt;\n\n&lt;script&gt;\n  var img = document.getElementsByTagName(''img'')[0];\n  function play1(){\n    // menambahkan class\n    img.classList.add(''latar'');\n  }\n  function play2(){\n    // menghapus class\n    img.classList.remove(''latar'');\n  }\n  function play3(){\n    // toggle class\n    img.classList.toggle(''putar'');\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Manipulasi style element yang paling umum digunakan adalah menggunakan metode ini.\n  Kelebihannya yaitu tidak terlalu banyak mengubah attribute element sehingga lebih efisien\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>classList.item</h4>\n\n<p>Method <code>classList.item()</code> digunakan untuk mengetahui isi dari daftar class pada sebuah element berdasarkan angka index yang ditulis sebagai argument pada method ini. Angka index dimulai dari angka 0, jika angka index yang dituliskan melebihi jumlah class yang ada maka akan dikembalikan nilai <code>null</code>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;style&gt;\nimg { display: block; margin: 20px auto; transition: all 0.7s ease; }\n\n/*CSS yang telah disiapkan*/\n.latar {\n  background-color: aqua;\n  padding: 20px;\n}\n.putar {\n  transform: rotateY(180deg);\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;classList.item Method&lt;/h1&gt;\n  \n  &lt;img class="latar putar" src="http://localhost/helloworld/assets/img/emo/hai.gif"&gt;\n  &lt;button onclick="play()"&gt;classList.item()&lt;/button&gt;\n\n&lt;script&gt;\n  var el = document.querySelector(''img'');\n  function play(){\n    alert(el.classList.item(1)); // putar\n    alert(el.classList.item(7)); // null\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>classList.contains</h4>\n\n<p>Method <code>classList.contains()</code> digunakan untuk mengecek di dalam sebuah element itu terdapat nama class yang dimaksud atau tidak. Method ini akan mengembalikan nilai boolean true ketika terdapat class, dan akan mengembalikan nilai false jika tidak terdapat class.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;style&gt;\nimg { display: block; margin: 20px auto; transition: all 0.7s ease; }\n\n/*CSS yang telah disiapkan*/\n.latar {\n  background-color: aqua;\n  padding: 20px;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;classList.contains Method&lt;/h1&gt;\n  \n  &lt;img class="latar" src="http://localhost/helloworld/assets/img/emo/hai.gif"&gt;\n  &lt;button onclick="play()"&gt;classList.contains()&lt;/button&gt;\n\n&lt;script&gt;\n  var el = document.querySelector(''img'');\n  function play(){\n    alert(el.classList.contains(''latar''));\n    alert(el.classList.contains(''halaman''));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>classList.replace</h4>\n\n<p>Method yang terakhir yaitu <code>classList.replace()</code> yang digunakan untuk mengganti nama class. Argument untuk method ini ada dua, yang pertama nama class yang akan diganti dan yang kedua nama class yang baru.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Element&lt;/title&gt;\n&lt;style&gt;\nimg { display: block; margin: 20px auto; padding: 20px; transition: all 0.7s ease; }\n\n/*CSS yang telah disiapkan*/\n.red {\n  background-color: red;\n}\n.yellow {\n  background-color: yellow;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;classList.replace Method&lt;/h1&gt;\n  \n  &lt;img class="red" src="http://localhost/helloworld/assets/img/emo/hai.gif"&gt;\n  &lt;button onclick="play()"&gt;classList.replace()&lt;/button&gt;\n\n&lt;script&gt;\n  var el = document.querySelector(''img'');\n  function play(){\n    if (el.classList.contains(''red'')){\n      el.classList.replace(''red'',''yellow'');\n    } else {\n      el.classList.replace(''yellow'',''red'');\n    }\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Untuk menghindari bentrok antar nama class dalam satu waktu saat tombol ditekan,\n  kita perlu menambahkan pengkondisian. \n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://www.w3schools.com/jsref/dom_obj_all.asp" target="_blank">w3schools.com/jsref/dom_obj_all.asp</a></li>\n</ul>\n', 1225, 1583637125, 1595422971),
(23, 'IOqrYAh', 'medium', 5, 'DOM Events', 'Konsep Event pada DOM', 'event handler,addeventlistener,daftar event,inline html,element method', 1, '<p>Konsep events pada DOM JavaScript ini juga sudah sering kita gunakan pada setiap contoh demonstrasi kode pada setiap materi di website ini. Dengan konsep ini, maka tujuan utama bahasa program JavaScript dibuat akan terbentuk, yaitu untuk membuat interaktifitas antara website dengan pengunjungnya.</p>\n\n<p>Events pada JavaScript adalah sebuah kejadian yang terjadi di dalam DOM. Kejadian tersebut bisa dilakukan oleh user website seperti event mouse dan keyboard (onclick, onmouseover, dll), atau bisa juga dilakukan otomatis browser seperti event onload.</p>\n\n<p>Event ini perlu dibuat dengan metode tertentu. Metode ini digunakan untuk memberikan perintah pada komputer (browser) agar &quot;mendengarkan&quot; ada kejadian apa yang terjadi kemudian respon apa yang akan diberikan terhadap kejadian tersebut. Untuk membuat events, JavaScript menyediakan 2 metode yang bisa dilakukan yaitu Event Handler dan addEventListener.</p>\n\n<h3>Event Handler</h3>\n\n<div class="wrapper-content">\n<p>Metode Event Handler merupakan cara lama yang digunakan JavaScript untuk membuat event pada DOM. Penggunaannya saat ini sudah mulai ditingggalkan karena ada beberapa kelemahan di dalamnya. Tata cara penulisannya terbagi menjadi 2, yaitu bisa menggunakan teknik inline HTML dan juga Element Method.</p>\n\n<h4>Inline HTML</h4>\n\n<p>Metode yang pertama ini adalah cara yang sering kita gunakan, meski sebenarnya ini adalah cara yang sangat tidak disarankan oleh para developer untuk digunakan. Hal itu karena kode HTML akan tercampur dengan JavaScript yang sebenarnya itu harusnya diminimalisir.</p>\n\n<p>Cara menggunakannya pun cukup mudah, kita tinggal memasukkan nama event sebagai nama attribute di dalam element mana yang dikehendaki. Penulisan nama attribute ini harus diawali dengan keyword <code>on</code>, kemudian diikuti nama eventnya tanpa menambahkan spasi.</p>\n\n<pre class="line-numbers">\n<code>&lt;tag onNamaEvent="kodeJavaScript"&gt; konten &lt;/tag&gt;</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Events&lt;/title&gt;\n  &lt;style&gt;h4, input { transition: all 0.7s ease }&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Event Handler (HTML Attribute)&lt;/h1&gt;\n\n  &lt;!-- event mouseenter dan mouseleave --&gt;\n  &lt;h3&gt;event mouseenter pada element h4&lt;/h3&gt;\n  &lt;h4 onmouseleave="this.style.borderColor =''transparent''" onmouseenter="this.style.border = ''2px solid blue''"&gt;\n    sebuah text di dalam yag h4\n  &lt;/h4&gt;\n\n  &lt;hr&gt;\n  &lt;!-- event focus dan blur --&gt;\n  &lt;h3&gt;event focus dan blur pada element input&lt;/h3&gt;\n  &lt;input type="text" onfocus="this.style.background = ''lightblue''" onblur="this.style.background = ''lightgreen''"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p class="note" style="font-weight:bold;">Keyword <code>this</code> pada masing masing event akan mengembalikan nilai berupa element yang sedang mengalami event</p>\n\n<h4>Element Method</h4>\n\n<p>Cara membuat event berikutnya yaitu dengan method. Meski sebenarnya fungsinya sama seperti pada contoh di atas, perbedaannya hanya terletak pada kode JavaScript dituliskan secara terpisah di dalam tag script sehingga tidak tercampur dengan kode HTML.</p>\n\n<pre class="line-numbers">\n<code>element.namaEvent = kodeJavaScript (callback function)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Events&lt;/title&gt;\n  &lt;style&gt;h4, input { transition: all 0.7s ease }&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Event Handler (method)&lt;/h1&gt;\n\n  &lt;!-- event mouseenter dan mouseleave --&gt;\n  &lt;h3&gt;event mouseenter pada element h4&lt;/h3&gt;\n  &lt;h4&gt;sebuah text di dalam yag h4&lt;/h4&gt;\n\n  &lt;hr&gt;\n  &lt;!-- event focus dan blur --&gt;\n  &lt;h3&gt;event focus dan blur pada element input&lt;/h3&gt;\n  &lt;input type="text" placeholder="input"&gt;\n\n&lt;script&gt;\n  var h4 = document.querySelector(''h4''),\n    input = document.querySelector(''input'');\n  \n  h4.onmouseenter = function(){\n    this.style.border = ''2px solid blue'';\n  }\n  h4.onmouseleave = function(){\n    this.style.borderColor =''transparent'';\n  }\n  input.onfocus = function(){\n    this.style.background = ''lightblue'';\n  }\n  input.onblur = function(){\n    this.style.background = ''lightgreen'';\n  }  \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Dengan menggunakan Element Method, penulisan events pada JavaScript menjadi lebih rapi jika dibandingkan metode inline HTML. Akan tetapi, cara ini pun memiliki kekurangan yaitu apabila sebuah element diberikan event yang sama secara bertumpukan, maka event yang terakhir kali dituliskan akan menimpa event sebelumnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Events&lt;/title&gt;\n  &lt;style&gt;input { transition: all 0.7s ease }&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Event Handler (method)&lt;/h1&gt;\n\n  &lt;h3&gt;event focus bertumpukan pada element input&lt;/h3&gt;\n  &lt;input type="text" placeholder="input"&gt;\n\n&lt;script&gt;\n  var input = document.querySelector(''input'');\n  input.onfocus = function(){\n    this.style.background = ''lightblue'';\n  }\n  input.onblur = function(){\n    this.style.background = ''lightgreen'';\n  }\n  input.onfocus = function(){\n    this.style.display = ''block'';\n    this.style.margin = ''20px auto'';\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Event focus untuk mengubah warna background tidak akan dijalankan\n  karena tertimpa oleh event focus untuk mengubah style display dan margin\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>AddEventListener</h3>\n\n<div class="wrapper-content">\n<p>Method <code>addEventListener()</code> merupakan metode yang lebih baru daripada event handler yang juga merupakan penyempurnaan dari metode yang telah ada sebelumnya.</p>\n\n<pre class="line-numbers">\n<code>element.addEventListener(namaEvent,kodeJavaScript (callback function))</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Events&lt;/title&gt;\n  &lt;style&gt;input { transition: all 0.7s ease }&lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;addEventListener&lt;/h1&gt;\n\n  &lt;input type="text" placeholder="input"&gt;\n\n&lt;script&gt;\n  var input = document.querySelector(''input'');\n  input.addEventListener(''focus'',function(){\n    this.style.background = ''lightblue'';\n  });\n  input.addEventListener(''blur'',function(){\n    this.style.background = ''lightgreen'';\n  });\n  // menambahkan function lain pada event focus\n  input.addEventListener(''focus'',function(){\n    this.style.display = ''block'';\n    this.style.margin = ''20px auto'';\n  });\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Event focus untuk mengubah warna background akan dijalankan\n  bersama event focus untuk mengubah style display dan margin,\n  meskipun ditulis pada statement yang berbeda\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Daftar Event</h3>\n\n<div class="wrapper-content">\n<p>Dengan HTML DOM Events, memungkinkan kita untuk membuat event pada element HTML. Event ini biasanya akan dikombinasikan dengan function yang baru akan dieksekusi ketika event sedang berlangsung.</p>\n\n<p>Ada begitu banyak event yang disediakan oleh JavaScript. Berikut ini adalah beberapa rangkuman event-event yang paling sering digunakan.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">Jenis</th>\n			<th scope="col">Nama</th>\n			<th scope="col">Keterangan</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td colspan="1" rowspan="6" style="vertical-align: middle;">Mouse Event</td>\n			<td>click</td>\n			<td>ketika tombol utama mouse diklik (klik kiri)</td>\n		</tr>\n		<tr>\n			<td>dblclick</td>\n			<td>ketika tombol utama mouse diklik 2 kali</td>\n		</tr>\n		<tr>\n			<td>mousedown</td>\n			<td>ketika tombol utama mouse ditekan</td>\n		</tr>\n		<tr>\n			<td>mouseup</td>\n			<td>ketika tombol utama mouse dilepaskan setelah ditekan</td>\n		</tr>\n		<tr>\n			<td>mouseenter</td>\n			<td>ketika pointer mouse diarahkan ke element tertentu tanpa menekan tombol mouse</td>\n		</tr>\n		<tr>\n			<td>mouseleave</td>\n			<td>ketika pointer mouse dikeluarkan dari element tertentu tanpa menekan tombol mouse</td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="3" style="vertical-align: middle;">Keyboard Event</td>\n			<td>keydown</td>\n			<td>ketika ada tombol apapun pada keyboard ditekan</td>\n		</tr>\n		<tr>\n			<td>keypress</td>\n			<td>ketika tombol keyboard ditahan pada posisi tekan</td>\n		</tr>\n		<tr>\n			<td>keyup</td>\n			<td>ketika tombool keyboard dilepas setelah ditekan</td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="2" style="vertical-align: middle;">Focus Event</td>\n			<td>focus</td>\n			<td>ketika sebuah element ada pada posisi terfokus</td>\n		</tr>\n		<tr>\n			<td>blur</td>\n			<td>ketika sebuah element kehilangan fokus</td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="2" style="vertical-align: middle;">View Event</td>\n			<td>resize</td>\n			<td>ketika tampilan document sedang diatur lebar dan tingginya</td>\n		</tr>\n		<tr>\n			<td>scroll</td>\n			<td>ketika document atau element sedang discroll</td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="2" style="vertical-align: middle;">Form Event</td>\n			<td>sumbit</td>\n			<td>ketika sebuah form sedang dilakukan submit baik lewat tombol sumbit ditekan atau melalui event lain</td>\n		</tr>\n		<tr>\n			<td>reset</td>\n			<td>ketika sebuah form direset</td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="2" style="vertical-align: middle;">Resource Event</td>\n			<td>load</td>\n			<td>ketika halaman web telah dimuat secara keseluruhan</td>\n		</tr>\n		<tr>\n			<td>unload</td>\n			<td>ketika halaman web ditutup (kebalikan dari load)</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://www.w3schools.com/jsref/dom_obj_event.asp" target="_blank">w3schools.com/jsref/dom_obj_event.asp</a></li>\n	<li><a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank">developer.mozilla.org/en-US/docs/Web/Events</a> </li>\n</ul>\n', 844, 1583637202, 1593526760),
(24, 'I69Prm2', 'medium', 6, 'DOM Traversal', 'Menelusuri Element pada DOM', '', 0, '<p></p>\n\n<p></p>\n\n<p></p>\n\n<p></p>\n\n<p></p>\n', 0, 1583637256, 1593503725),
(25, 'B1nKQSZ', 'beginner', 2, 'JS History', 'Sejarah JavaScript', 'awal mula,perkembangan netsacpe,perubahan nama javascript,perkembangan ecmascript,ecmascript atau javascript,es1,es2,es3,ajax dan es4,es5,es6,es7', 1, '<p>Tidak lengkap rasanya jika kita ingin belajar JavaScript tetapi namun tidak mengetahui sejarah atau cikal bakal adanya bahasa program JavaScript dengan perkembangannya sampai saat ini. Ulasan berikut akan menjelaskan tentang cerita dibalik awal mula JavaScript dibuat, dan kenapa namanya sedikit memiliki kesamaan dengan nama bahasa program lain yaitu JAVA.</p>\n\n<h3>Awal Mula</h3>\n\n<div class="wrapper-content">\n<p>Sejarah JavaScript bermula pada fasilitas riset di sebuah universitas di Amerika bernama <strong>NCSA</strong> (National Center Supercomputing Application). Para penelitinya berhasil membuat sebuah browser pada tahun 1992 yang diberi nama sebagai <strong>Mosaic Browser</strong>. Browser ini memang bukan browser yang pertama dan juga bukan browser yang terbaik, tetapi mampu menjadi yang paling populer pada saat itu karena mendukung dan bisa menampilkan gambar dengan tag <code class="language-html">&lt;img&gt;</code> secara inline. Meski hal itu melanggar aturan yang diberikan oleh W3C sebagai badan standard internasional yang menangani peraturan baku sebuah web browser.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/mosaic.png" title="browser mosaic" /></p>\n\n<p>Setelah mengalami puncak popularitas dari Mosaic, beberapa peneliti di universitas tersebut mendirikan perusahaan sendiri yaitu <strong>Netscape Communicator</strong> atau yang sekarang berkembang dan dikenal sebagai <strong>Mozilla</strong>. Netscape membuat browser yang lebih baik lagi daripada Mosaic yang dengan sengaja lebih tidak menghiraukan lagi aturan W3C. Browser ini diberikan nama <strong>Netscape Navigator</strong> yang memiliki fitur lebih baru dari browser lain, seperti menambahkan tag formating, scripting dan cookie.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/netscape.png" title="netscape navigator browser" /></p>\n</div>\n\n<h3>Perkembangan Netsacpe</h3>\n\n<div class="wrapper-content">\n<p>Di saat semua orang pada saat itu beralih menggunakan Netscape Navigator, perusahaan Netscape bermaksud untuk mengembangankan browsernya menjadi lebih baik lagi dengan menanamkan fitur interaktifitas di dalam halaman web, maka pada tahun 1995, seorang system enginering yang bernama <strong>Brendan Eich</strong> direkrut untuk melakukan pekerjaan tersebut.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/brendan-eich.jpg" title="brendan eich" /></p>\n\n<p>Brendan diminta untuk membuat bahasa scripting yang mirip dengan bahasa program terpopuler kala itu yaitu JAVA tetapi dikhususkan untuk web browser (client side). Kemudian Brendan Eich pun membuat bahasa baru yang menggabungkan fitur-fitur yang ada di dalam bahasa Java, Scheme dan Self menjadi satu yang kemudian diberi nama <strong>Mocha</strong>. Bahasa mocha ini berhasil diselesaikan hanya dalam waktu 10 hari karena harus segera dirilisnya Netscape Navigator versi 2.</p>\n\n<p>Dalam perkembangan selanjutnya, nama Mocha diubah menjadi <b>LiveScript</b> dengan alasan setiap produk software yang ada di Netscape umumnya memiliki nama awalan berupa Live. Akhirnya Netscape Navigator 2 telah dirilis dengan menanamkan bahasa LiveScript di dalamnya.</p>\n</div>\n\n<h3>Perubahan Nama JavaScript</h3>\n\n<div class="wrapper-content">\n<p>Karena kesuksesan browser Netscape Navigator, perusahaan Netscape pun memiliki ambisi untuk bisa mengalahkan <strong>Microsoft</strong> dengan Internet Explorernya, maka Netscape mengadakan kerjasama dengan perusahaan <strong>Sun Microsystems</strong> yang saat itu pemilik lisensi dari bahasa program JAVA. Sun menawarkan untuk memasukkan bahasa JAVA ke dalam Netscape Navigator, akan tetapi Netsacpe menolaknya karena browsernya sudah sangat optimal dengan LiveScript di dalamnya. Akhirnya keduanya sepakat untuk mengganti nama LiveScript menjadi <strong>JavaScript</strong> dengan tujuan agar orang mengira bahwa itu adalah JAVA yang digunakan untuk web browser. Keputusan ini murni hanya untuk tujuan marketing saja karena sebenarnya kedua bahasa program ini sangatlah berbeda. Lisensi nama JavaScript sepenuhnya menjadi milik Sun dan hanya Netscape yang boleh menggunakan nama Java sebagai kesepakatannya.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/js.png" title="javascript" /></p>\n\n<p>Melihat tindakan pesaingnya ini, Microsoft juga tak mau kalah. Microsoft akhirnya membuat ulang bahasa scripting yang mirip JavaScript untuk ditanamkan di dalam Internet Explorernya dan diberi nama <strong>JScript</strong>.</p>\n\n<p>JScript di dalam Internet Explorer membuat kalangan programmer bingung, karena terdapat 2 versi Script yaitu JavaScript di Netscape Navigator and JScript pada Internet Explorer. Hal ini semakin menambah kerumitan dalam pembuatan program. Permasalahan terjadi karena versi JavaScript tersebut memiliki perbedaan fitur. Kejadian ini sama seperti yang dialami oleh HTML dan CSS, dan kalangan programmer sepakat bahwa diperlukan sebuah standarisasi untuk JavaScript.</p>\n\n<p>Netscape menjadi khawatir bahwa JScript akan lebih sukses menjadi standard dibanding JavaScript miliknya. Netscape berusaha melakukan standarisasi ke W3C untuk mempatenkan standard Scriptnya. Akan tetapi, usaha ini ditolak oleh W3C karena alasan yang kurang begitu jelas. Akhirnya Netscape mencari badan standarisasi lainnya dan ditemukanlah <strong>ECMA</strong> (European Computer Manufacturers Association) yang mau membuatkan standard untuk JavaScript dengan salah satu syarat bahwa Netscape tidak boleh menggunakan nama JavaScript karena lisensi merk dagangnya masih dipegang oleh Sun. Maka namanya pun akhirnya diubah lagi menjadi <strong>ECMAScript</strong>.</p>\n</div>\n\n<h3>Perkembangan ECMAScript</h3>\n\n<div class="wrapper-content">\n<p>Proses standarisasi ini menjadi sangatlah penting agar nantinya browser lainnya juga bisa menggunakan bahasa scripting berdasarkan JavaScript. Setelah kesepakatan antara Netscape dan ECMA dibuat, berikut ini adalah kronologi perkembangan ECMAScript dari tahun ke tahun.</p>\n\n<h4>ES1</h4>\n\n<p>Pada pertengahan tahun 1997, JavaScript versi 1 resmi distandardkan untuk membuat sebuah standar bahasa pemograman script web browser. Atas dasar ini, dibentuklah sebuah komite dengan anggota yang terdiri dari programmer dari berbagai perusahaan internet pada saat itu, seperti Netscape, Sun, Microsoft, Borland, NOMBAS serta beberapa perusahaan lain yang tertarik dengan perkembangan JavaScript atau yang sudah berganti nama menjadi ECMAScript atau disingkat menjadi ES.</p>\n\n<h4>ES2</h4>\n\n<p>Tahun berikutnya di 1998, badan standarisasi ISO (International Organization for Standardization) juga mengadopsi ECMAScript sebagai standar. Sejak saat itu, semua web browser menjadikan ECMAScript sebagai standar acuan untuk JavaScript.</p>\n\n<h4>ES3</h4>\n\n<p>ECMAScript terus dikembangkan hingga mencapai versi 3 pada tahun 1999. Berita baiknya, hampir semua web browser saat itu, terutama Microsoft Internet Explorer 5.5 dan Netscape Navigator 6 telah mendukung ECMAScript versi 3. Namun berita buruknya, masing-masing web browser menerapkan standar dengan sedikit berbeda, sehingga masih terdapat kemungkinan tidak kompitable.</p>\n\n<h4>AJAX dan ES4</h4>\n\n<p>Setelah lama meredup dengan tidak adanya perkembangan standard baru, ECMAScript muncul dengan teknologi baru yaitu AJAX (Asynchronous JavaScript and XML) pada tahun 2005. JavaScript menjadi sangat populer kembali dengan teknologi baru yang sangat canggih ini.</p>\n\n<p>Namun pada tahun 2008, perkembangan ECMAScript versi 4 sengaja dilompati karena beberapa alasan ketidak cocokan beberapa browser tentang standard yang dibuat. ES4 ini kemudian dibuat ulang dengan nama ES Harmony untuk mengatasi perbedaan ini.</p>\n\n<h4>ES5</h4>\n\n<p>Pada tahun 2009 ECMAScript versi 5 dirilis. ES5 inilah yang sampai saat ini menjadi versi paling stabil dan terdapat di mayoritas web browser modern seperti Internet Explorer, Chrome, Firefox, Opera, dan Safari. Akan tetapi, perbedaan implementasi ECMAScript tetap ada di dalam web browser. Biasanya perbedaan ini terkait dengan fitur-fitur tambahan. Salah satu cara programmer untuk mengatasi masalah ini yaitu dengan mendeteksi web browser yang digunakan user, lalu menjalankan fungsi yang dirancang secara spesifik untuk web browser tersebut. Di tahun ini pula muncul library JavaScript yang dirancang untuk melapisi perbedaan ECMAScript ini, salah satunya adalah jQuery. jQuery menyediakan fungsi otomatis dalam mengatasi perbedaan implementasi ECMAScript di dalam web browser.</p>\n\n<h4>ES6</h4>\n\n<p>ECMAScript 6 dirilis pada bulan Juni 2015. Cukup banyak penambahan fitur baru pada versi ini, yang sebagian besar merupakan fitur lanjutan untuk membuat aplikasi yang memiliki kompleksitas tinggi, seperti penggunaan JavaScript di server menggunakan <strong>node.js</strong>. Fitur yang disuguhkan beberapa dantaranya adalah iterator baru, python-style generator, arrow function, binary data, typed arrays, collections (maps, sets and weak maps), promises untuk membuat asynchronous programming.</p>\n\n<p>Mulai dari ECMAScript 6 dan selanjutnya, penamaan ECMAScript akan menggunakan nama tahun saat standar tersebut dirilis, seperti ECMAScript 2015, ECMAScript 2016, dan seterusnya. Banyak perdebatan mengenai pilihan nama ini, sehingga masih sering disebut sebagai ECMAScript 6.</p>\n\n<h4>ES7</h4>\n\n<p>ECMAScript 7 atau nama resminya: ECMAScript 2016, diselesaikan pada Juni 2016. Fitur baru termasuk exponentiation operator (**) dan Array.prototype.includes. Karena relatif baru, belum banyak web browser yang menerapkan ECMAScript 7.</p>\n\n<p>Melihat dengan sangat pesatnya perkembangan teknologi ECMAScript, sampai saat artikel ini dibuat, versi JavaScript telah berada pada tahap <a href="https://en.wikipedia.org/wiki/ECMAScript" target="_blank">ES10</a> (ECMAScript 2019). Dan perkembangan ini tentunya masih akan terus berlanjut.</p>\n</div>\n\n<h3>ECMAScript atau JavaScript</h3>\n\n<div class="wrapper-content">\n<p>ECMAScript adalah versi standard dari JavaScript. Namun karena kepopuleran nama JavaScript, hampir semua kalangan dan para programmer menyebut ECMAScript dengan sebutan umum JavaScript. Merk dagang JavaScript saat ini dimiliki oleh perusahaan <strong>Oracle</strong> (yang mengakuisisi Sun Microsystem). Juga terdapat versi JavaScript 1.5 atau JavaScript 1.8. Versi JavaScript ini adalah versi yang diadopsi oleh browser Firefox dari Mozzilla (Netscape). JavaScript 1.5 sebenarnya adalah ECMAScript 3 dan JavaScript 1.8 merupakan versi ECMAScript dengan beberapa penambahan internal oleh Mozilla.</p>\n\n<p>Jika mengamati tentang perkembangan tentang JavaScript, maka selain versi ECMAScript yang digunakan, terdapat istilah JavaScript Engine atau dalam bahasa standarnya ECMAScript Engine. JavaScript Engine adalah mekanisme internal yang dimiliki oleh web browser. JavaScript Engine dapat diumpamakan dengan compiler dalam bahasa pemograman lain, yakni algoritma yang digunakan untuk menjalankan JavaScript. Semakin cepat sebuah web browser menjalankan JavaScript akan semakin baik. Biasanya disetiap rilis baru web browser seperti Google Chrome, Internet Explorer, maupun Firefox, juga diikuti rilis terbaru JavaScript Engine yang menawarkan kecepatan lebih baik.</p>\n</div>\n', 1283, 1554171121, 1593187560);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(26, 'BbZNoYE', 'beginner', 3, 'JS Intro', 'Karakteristik JavaScript', 'definisi javascript,karakteristik javascript,kemampuan javascript,website javascript,javascript gratis,tanpa instalasi,bersifat client side,tersedia console machine,high level language,bahasa program populer,client side development,server side development,desktop application,mobile application', 1, '<p>Dari sekian banyak bahasa pemrograman baik itu C, C++, Ruby, Phyton atau PHP, dan lain sebagainya, JavaScript memiliki alasan yang kuat kenapa harus dipilih sebagai bahasa pemrograman pertama yang harus dipelajari. Tentu saja setelah memahami terlebih dahulu materi tentang HTML dan CSS setidaknya pada level dasar. Berikut ini adalah hal yang paling mendasar dari bahasa program JavaScript.</p>\n\n<h3>Definisi JavaScript</h3>\n\n<div class="wrapper-content">\n<p>Mengutip dari <a href="https://en.wikipedia.org/wiki/JavaScript" target="_blank">Wikipedia</a>, <em>&quot;JavaScript is a <strong>high level</strong>, <strong>scripting</strong>, <strong>untyped</strong> programming language&quot;.</em></p>\n\n<p><strong>High Level</strong> berarti bahwa JavaScript termasuk dalam bahasa program yang syntax bahasanya mudah dimengerti oleh manusia karena hampir semuanya berbahasa Inggris.</p>\n\n<p><strong>Scripting</strong> berarti bahwa JavaScript adalah bahasa script yang dikhususkan untuk berinteraksi atau pembuatan aplikasi yang behubungan dengan website. Berbeda halnya dengan bahasa C, C++ atau JAVA yang lebih dominan untuk pembuatan aplikasi desktop di dalam sebuah operating system tertentu, baik itu Windows atau Linux. Istilah dari kata scripting ini untuk menunjukkan bahwa JavaScript itu bekerja di dalam sebuah aplikasi yang lebih besar yang di dalamnya telah tertanam suatu <em>machine</em> untuk menjalankan script ini. Satu macam script biasanya hanya akan bisa dijalankan dalam aplikasi tertentu saja seperti ActionScript pada aplikasi Flash, VBScript pada aplikasi MS Office dan JavaScript pada aplikasi Web Browser.</p>\n\n<p>Sedangkan untuk istilah <strong>untyped</strong> adalah JavaScript miliki aturan bahwa sebuah variable bisa diisikan nilai secara dinamis tanpa mempengaruhi nama variable tersebut. Misalkan variable <strong>A</strong> pada mulanya berisi nilai angka, kemudian diubah lagi nilainya menjadi karakter huruf. Di JavaScript, hal seperti ini akan tetap berjalan normal dan tidak akan mendapati error.</p>\n</div>\n\n<h3>Karakteristik JavaScript</h3>\n\n<div class="wrapper-content">\n<p>Sebelum lebih lanjut untuk mempelajari syntax JavaScript, ada beberapa pengetahuan dasar tentang karakteristik dari bahasa program ini.</p>\n\n<p>JavaScript merupakan bahasa pemrograman murni, tidak seperti HTML atau CSS. JavaScript memiliki tingkat kompleksitas yang lebih tinggi dibandingkan dengan HTML yang sebenarnya hanya sebagai bahasa markup atau CSS yang identik dengan desain tata letak dan warna warni halaman. JavaScript adalah bahasa program yang digunakan untuk mendukung penyempurnaan interface dari sebuah halaman website.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/html-css-js.png" title="HTML CSS JS" /></p>\n\n<p>Beberapa keunggulan dalam belajar JavaScript sebagai bahasa pemrograman yang bersahabat khususnya untuk pemula, di antaranya adalah sebagai berikut.</p>\n\n<h4>JavaScript Gratis</h4>\n\n<p>JavaScript bisa dipelajari oleh siapapun yang ingin mempelajarinya tanpa harus mengeluarkan biaya seperti untuk membeli lisensi software atau lainnya. Ada banyak sekali dokumentasi tentang bahasa program JavaScript yang bertebaran di internet sehingga memudahkan bagi siapapun yang berkeinginan untuk mempelajarinya, termasuk di website ini. Bahkan dalam era perkembangan teknologi yang sangat pesat ini, media belajar tidak terbatas hanya pada perangkat komputer saja, smartphone pun sekarang juga sudah bisa menjadi media praktek belajar.</p>\n\n<h4>Tanpa Instalasi</h4>\n\n<p>Jika dibandingkan dengan bahasa pemrograman lain seperti PHP yang mengharuskan untuk menginstal aplikasi <em>server</em> agar program berjalan, JavaScript hanya membutuhkan web browser saja sebagai peralatan utama yang dibutuhkan dan juga kode editor untuk menulis programnya. Hal ini tidaklah sulit mengingat setiap perangkat komputer sudah dipastikan memiliki aplikasi web browser tanpa harus mengisntal aplikasi tambahan lainnya. Kami merekomendasikan untuk menggunakan web browser <strong>Chrome</strong> yang sampai saat ini tetap menjadi yang terpopuler karena performanya dibanding browser lain.</p>\n\n<h4>Bersifat Client Side</h4>\n\n<p>JavaScript merupakan bahasa pemrograman web yang termasuk dalam <strong>Client Side Programming Language</strong>. Yang artinya<strong></strong> proses eksekusi barisan kode JavaScript dijalankan di sisi client atau komputer pengguna. Berbeda dengan bahasa program <strong>Server Side</strong>, yang menjalankan barisan kodenya di komputer server.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/client-server.jpg" title="server dan client" /></p>\n\n<h4>Tersedia Console Machine</h4>\n\n<p>Dalam sebuah web browser seperti Chrome, Firefox dan lainnya, telah dibekali mesin dari JavaScript. Mesin ini biasa disebut <strong>Console JavaScript</strong> yang letaknya berada di dalam Developer Tools pada sebuah browser. Di dalam console ini, kita bisa langsung praktek menulis kode JavaScript atau bisa juga mengetahui letak error program apabila melakukan kesalahan penulisan syntax kode JavaScript.</p>\n\n<p>Cara untuk mengakses console ini ada bermacam-macam, bisa tergantung pada operating system atau browser yang sedang dipakai. Jika menggunakan OS Windows, bisa menekan tombol hotkey <kbd>f12</kbd> pada keyboard kemudian pilih tab console.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/console.png" title="developer tools chrome" /></p>\n\n<h4>High Level Language</h4>\n\n<p>Semua bahasa program ditunjukkan untuk berinteraksi dengan hardware CPU komputer. Dari perkembangan bahasa program yang ada sampai saat ini, maka dapat digolongkan tingkatan bahasanya. Tingkatan ini didasarkan pada syntax istilah atau kosa kata yang digunakan. Jika semakin mendekati bahasa manusia (bahasa Inggris) maka tingkatannya semakin tinggi.</p>\n\n<p>Jika dibandingkan dengan beberapa bahasa program lainnya, JavaScript termasuk ke dalam bahasa yang memiliki urutan teratas sebagai bahasa yang mudah dimengerti oleh manusia.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/computer-languages.png" title="tingkat bahasa program" /></p>\n\n<h4>Bahasa Program Populer</h4>\n\n<p>JavaScript merupakan bahasa program yang sangat cepat perkembangannya. Fitur-fitur yang ditambahkan di dalamnya juga semakin banyak dan semakin powerfull untuk mempermudah penggunaannya dalam mencapai tujuan yang diinginkan.</p>\n\n<p>Searah dengan jalannya perkembangan JavaScript, juga diikuti oleh bermunculnya berbagai library dan framework pendukung yang dikembangkan dari JavaScript seperti yang paling populer yaitu, AngularJS, ReactJS, dan VueJS yang mempermudah dan mempercepat pembuatan sebuah program.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/framework-js.png" title="framework javascript" /></p>\n</div>\n\n<h3>Kemampuan JavaScript</h3>\n\n<div class="wrapper-content">\n<p>Pada awal perkembangannya, JavaScript adalah bahasa program yang murni digunakan untuk keperluan <strong>front-end development</strong> seperti memanipulasi tampilan element HTML dan mempadukannya dengan keindahan CSS. JavaScript mengambil objek dari HTML kemudian diolah dan ditampilkan kembali sesuai perintah yang dituliskan, dan bisa dijalankan pada event-event yang telah ditentukan.</p>\n\n<p>JavaScript pada awal perkembangannya berfungsi untuk membuat interaksi antara user dengan situs web menjadi lebih cepat tanpa harus menunggu pemrosesan di web server.</p>\n\n<p>Sebelum JavaScript ada, setiap interaksi website dari sisi client harus diproses melalui web server terlebih dahulu sebelum diterima kembali oleh client. Sehingga, dapat dibayangkan ketika kita mengisi sebuah formulir registrasi untuk pendaftaran di sebuah situs web, lalu men-klik tombol submit, kemudian menunggu sekitar 10 detik untuk website memproses isian formulir tersebut, kemudian mendapati halaman yang menyatakan bahwa terdapat inputan form yang masih belum diisi.</p>\n\n<p>Untuk keperluan seperti itulah JavaScript dikembangkan. Pemrosesan untuk mengecek apakah seluruh form telah terisi atau tidak, bisa dipindahkan dari sisi server ke dalam sisi client.</p>\n\n<p>Berikut ini adalah beberapa poin tentang hal apa saja yang bisa dilakukan oleh JavaScript.</p>\n\n<h4>Client Side Development</h4>\n\n<p>Sesuai dengan tujuan awal dibuatnya JavaScript, kita bisa membuat aplikasi web yang berjalan di sisi komputer client atau komputer pengguna tanpa melibatkan komputer server yang tentunya membutuhkan waktu pemrosesan lebih lama.</p>\n\n<p>Dalam perkembangannya, JavaScript sekarang tidak hanya berguna untuk validasi form, namun bisa juga untuk berbagai keperluan yang lebih modern. Berbagai animasi untuk mempercantik halaman web, fitur chatting, efek-efek modern, games, semuanya bisa dibuat menggunakan JavaScript.</p>\n\n<p>Untuk bisa membuat aplikasi web, kita bisa menggunakan apa yang disebut sebagai <strong>Vanilla JavaScript</strong> atau JavaScript murni. Atau bisa juga menggunakan library yang terpopuler pada masanya yaitu <strong>Jquery</strong>, meski saat ini popularitasnya mulai menurun dengan hadirnya berbagai framework yang lebih baru dan terupdate.</p>\n\n<h4>Server Side Development</h4>\n\n<p>Dengan berkembangnya JavaScript sebagai bahasa program untuk web, saat ini JavaScript sudah bisa untuk membuat aplikasi yang juga dapat dijalankan dari sisi server (<strong>back-end development</strong>). Untuk keperluan ini, kita bisa menggunakan library utamanya yang dikenal sebagai <strong>NodeJS</strong>.</p>\n\n<h4>Desktop Application</h4>\n\n<p>JavaScript juga mampu digunakan untuk membuat aplikasi berbasis desktop dengan menggunakan beberapa library atau framework pendukung seperti <strong>Electron</strong> dan <strong>AppJS</strong>.</p>\n\n<h4>Mobile Application</h4>\n\n<p>Membuat aplikasi mobile seperti pada perangkat smartphone juga bisa dilakukan oleh JavaScript dengan bantuan library <strong>JqueryMobile</strong>.</p>\n</div>\n\n<h3>Website JavaScript</h3>\n\n<div class="wrapper-content">\n<p>Dari penjelasan di atas, terdapat banyak hal yang bisa dilakukan dengan JavaScript. Hal paling utama yang akan kita pelajari di sini adalah tentang membuat seluruh tampilan website agar lebih menarik dan penuh interaktifitas. Untuk skala website, selain karena konten di dalamnya sesuai dengan apa yang sedang diminati pengunjung, fitur-fitur yang modern dapat kita berikan di dalamnya agar website memiliki nilai lebih di hadapan pengunjungnya.</p>\n\n<p>Berikut ini adalah contoh sederhana sebuah kode JavaScript memanipulasi element HTML untuk tujuan memberikan interaksi antar element saat user menekan sebuah tombol.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript Introduction&lt;/title&gt;\n&lt;style&gt;\nbutton {\n  margin: 10px auto;\n  display: block;\n  font-size: 18px;\n}\nimg { \n  margin: 30px auto;\n  display: block;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Interaksi Element HTML&lt;/h1&gt;\n  \n  &lt;img id="lampu" src="http://localhost/helloworld/assets/img/lamp_off.gif"&gt;\n  &lt;button id="btn"&gt;klik untuk nyalakan lampu&lt;/button&gt;\n\n&lt;script&gt;\n  var on, off, tombol, lampu;\n  on  = "http://localhost/helloworld/assets/img/lamp_on.gif";\n  off = "http://localhost/helloworld/assets/img/lamp_off.gif"; \n  tombol = document.getElementById(''btn'');\n  lampu = document.getElementById(''lampu'');\n  \n  tombol.onclick = function(){\n    tombol.classList.toggle(''menyala'');\n    if(tombol.classList.contains(''menyala'')){\n      lampu.src = on;\n      tombol.innerHTML = ''klik lagi untuk padamkan lampu'';\n    } else {\n      lampu.src = off;\n      tombol.innerHTML = ''klik untuk nyalakan lampu'';      \n    }\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Jangan terlalu khawatir jika syntax kode JavaScript di atas belum terlalu familiar dengan apa yang sudah dipelajari sebelumnya tentang HTML dan CSS. Yang perlu diperhatikan adalah bagaimana memasukkan logika kita ke dalam program, sehingga program bisa dijalankan sebagaimana yang diinginkan.</p>\n\n<p>Dalam contoh sederhana di atas, tujuan yang ingin dicapai adalah :</p>\n\n<p><em><strong>&quot;Bagaimana dengan sebuah tombol dapat memicu lampu menyala dan lampu padam?&quot;</strong></em></p>\n\n<p>Maka, alur logika sederhana yang bisa digunakan adalah sebagai berikut :</p>\n\n<ol>\n	<li>menyiapkan 2 buah gambar berbeda untuk representasi menyala dan padamnya lampu</li>\n	<li>memasukkan event klik pada sebuah tombol</li>\n	<li>mengatur agar satu tombol dengan event klik dapat memicu dua hasil kejadian yang berbeda yaitu menyalakan lampu dan memadamkannya.</li>\n</ol>\n\n<p>Jika alur logika sudah didapatkan maka langkah selanjutnya adalah menulisnya dalam bahasa markup HTML kemudian mendesain tampilannya dengan CSS dan terakhir menulis programnya dalam syntax bahasa JavaScript, seperti <code>function</code>, <code>classList</code>, atau <code>innerHTML</code>.</p>\n\n<p>Begitulah sederhananya dalam membuat sebuah program. Di materi selanjutnya, kita akan membahas satu per satu tentang apa saja yang bisa kita pelajari dan juga bagaimana menulis kode di dalam bahasa JavaScript.</p>\n</div>\n\n<p class="note" style="font-weight:bold;">Setiap demonstrasi contoh kode pada masing-masing materi akan menggunakan syntax function dan demo kode akan dijalankan pada event klik. Hal itu dilakukan agar setiap contoh kode JavaScript di dalam kode editor tidak akan lansung dijalankan sebelum tombol diklik.</p>\n', 1450, 1554171121, 1593193014),
(27, 'BDN8rit', 'beginner', 25, 'Uyfuf', 'Mengenal Syntax JSON', NULL, 0, '', 0, 1582035249, 1582035249),
(28, 'BHztSL0', 'beginner', 22, 'JS Object', 'Tipe Data Object JavaScript', 'definisi object,object literal,object function,object constructor,mengakses object,property,method,manfaat object,mengakses property,mengakses method', 1, '<p>Di dalam bahasa program JavaScript, hampir semua struktur yang ada adalah object termasuk di dalamnya juga ada array yang tipe datanya juga object. Jika kita memahami tentang bagaimana object di JavaScript, kita akan lebih mudah memahami struktur dasar atau inti konsep yang digunakan oleh bahasa program JavaScript.</p>\n\n<h3>Definisi Object</h3>\n\n<div class="wrapper-content">\n<p>Untuk memahami tipe data object, kita akan mengulang materi tentang array. Array biasa disebut sebagai sebuah variable yang bisa menampung banyak nilai sekaligus dan masing-masing nilainya akan selalu memiliki nomor index yang dimulai dari angka 0.</p>\n\n<pre>\n<code class="language-javascript">// array JavaScript\nvar arr = [''kucing'',''mamalia'',''karnivora''];</code></pre>\n\n<p>Sedangkan untuk object pun hampir sama dengan array, tetapi khusus pada tipe data object, masing-masing nilainya tidak memiliki angka index melainkan memiliki nama. Sehingga object bisa disebut sebagai sebuah variable yang bisa menampung banyak nilai sekaligus yang nilainya berupa pasangan antara <strong>name</strong> dan <strong>value</strong>.</p>\n\n<pre>\n<code class="language-javascript">// object JavaScript\nvar obj = {\n  nama : ''kucing'',\n  jenis : ''mamalia'',\n  kelompok : ''karnivora''\n};</code></pre>\n\n<p>Perbedaan yang paling terlihat dari array dengan object di JavaScript ini adalah index yang ada pada array tidak lagi menggunakan angka jika ditulis di dalam bentuk tipe data object, melainkan nama yang secara langsung bisa lebih spesifik dalam menandai setiap nilainya. Hal ini mirip seperti array associative di dalam bahasa PHP. Namun, untuk object JavaScript bisa lebih dari itu.</p>\n\n<p>Dalam kehidupan sehari-hari, setiap benda bisa disebut sebagai object dan setiap object bisa memiliki perilaku yang berbeda antara satu dengan yang lainnya. Sekarang, kita ambil contoh ilustrasi sebuah object berupa hewan <strong>kucing</strong></p>\n\n<div class="table-responsive">\n<table class="table table-bordered" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col" style="text-align: center;">Object</th>\n			<th scope="col" style="text-align: center;">Property</th>\n			<th scope="col" style="text-align: center;">Method</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td colspan="1" rowspan="4" style="text-align:center"><img alt="" src="http://localhost/helloworld/assets/img/kucing.jpg" style="height:169px; width:300px" /></td>\n			<td><code>hewan.nama : kucing </code></td>\n			<td><code>hewan.main() </code></td>\n		</tr>\n		<tr>\n			<td><code>hewan.jenis : mamalia</code></td>\n			<td><code>hewan.tidur() </code></td>\n		</tr>\n		<tr>\n			<td><code>hewan.kelompok : karnivora</code></td>\n			<td><code>hewan.suara() </code></td>\n		</tr>\n		<tr>\n			<td><code>hewan.warna : merah </code></td>\n			<td><code>hewan.makan() </code></td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Setiap hewan hampir pasti memiliki ciri-ciri yang bisa digunakan untuk membedakan antara hewan yang satu dengan yang lainnya atau di dalam object JavaScript hal ini disebut sebagai <strong>property</strong>. Selain memiliki property, setiap hewan juga memiliki perilaku berbeda pada setiap waktu atau di dalam object JavaScript hal ini disebut sebagai <strong>method</strong>.</p>\n\n<h4>Property</h4>\n\n<p>Property pada tipe data object disebut juga sebagai nama yang mengasosiasikan setiap identitas yang ada dari sebuah object. Dari contoh object hewan di atas, <code>nama</code>, <code>kelompok</code>, <code>jenis</code>, dan <code>warna</code> adalah merupakan property yang masing-masing memiliki nilai sendiri. Property ini bisa diubah, ditambahkan, atau dihapus dari setiap object.</p>\n\n<h4>Method</h4>\n\n<p>Sedangkan method di dalam object JavaScript bisa juga diartikan perilaku dari sebuah object yang ditulis dalam bentuk function. Sehingga, jika diambil contoh object hewan, mereka bisa melakukan perilaku yang berbeda, dari cara makan, bermain, atau suara yang dikeluarkan. Penulisan method ini selalu dituliskan dengan diakhiri tanda kurung karena method ini bentuknya adalah function.</p>\n\n<p class="note" style="font-weight:bold">Mulai dari sini, kita seharusnya sudah mulai memahami tentang bagaimana method built in di dalam setiap tipe data yang telah dipelajari sebelumnya seperti <code>string.toLowerCase()</code> yang perilakunya digunakan untuk mengkonversi string menjadi format huruf kecil.</p>\n\n<h4>Manfaat Object</h4>\n\n<p>Melihat dari contoh di atas, kita tahu bahwa untuk membuat data yang diharuskan menampung nama-nama hewan beserta perilakunya akan sangat banyak sekali menghabiskan resource jika semua datanya ditulis di dalam variable biasa.</p>\n\n<p>Jika ditulis di dalam bentuk array pun tetap akan memiliki keterbatasan, karena array hanya memiliki angka index sebagai key. JavaScript tidak akan bisa membedakan setiap elementnnya itu termasuk nama, kelompok atau warna.</p>\n\n<p>Maka dari itu, menggunakan object JavaScript untuk menampung semua property dan perilaku dari object yang ada adalah solusi yang paling tepat.</p>\n</div>\n\n<p>Untuk membuat object, JavaScript menyediakan beberapa cara penulisan yaitu dengan metode literal, function declaration, dan constructor.</p>\n\n<h3>Object Literal</h3>\n\n<div class="wrapper-content">\n<p>Dengan menggunakan object literal, keseluruhan object harus dituliskan ke dalam tanda kurung kurawal ( <code>{ }</code> ) yang isinya berupa pasangan antara <strong>name</strong> dan <strong>value</strong> yang antar pasangannya dipisahkan dengan tanda titik dua ( <code>:</code> ). Karakter spasi dan baris baru akan diabaikan, dan antar setiap pasangan harus dipisahkan dengan tanda koma ( <code>,</code> ). Penulisan object dengan metode ini adalah yang paling umum digunakan, dan juga lebih mudah dipahami bagi pemula.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object Literal&lt;/h1&gt;\n  \n  &lt;h3&gt;Buka DevTools untuk memastikan object berhasil dibuat&lt;/h3&gt;\n  &lt;h3&gt;Ketik nama variable object pada tab console&lt;/h3&gt;\n  \n&lt;script&gt;\n  var orang = {\n    nama : ''John'',\n    umur : 28,\n    profesi : ''programmer'',\n    intro : function(){\n      alert(''Saya ''+this.nama+'' bekerja sebagai '' + this.profesi);\n    }\n  };\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Object Function</h3>\n\n<div class="wrapper-content">\n<p>Cara selanjutnya untuk membuat object yaitu dengan menggunakan metode function declaration. Sama seperti membuat function pada umumnya, namun untuk hal ini, function dibuat untuk tujuan membuat object yang memiliki property atau method yang sama.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Object Function&lt;/h1&gt;\n  \n  &lt;h3&gt;Buka DevTools untuk memastikan object berhasil dibuat&lt;/h3&gt;\n  &lt;h3&gt;Ketik nama variable object pada tab console&lt;/h3&gt;\n  \n&lt;script&gt;\n// deklarasi function\n  function buatObject(nama,umur,prof){\n    var orang = {};\n    orang.nama = nama;\n    orang.umur = umur;\n    orang.profesi = prof;\n    return orang;\n  }\n// pemanggilan function\n  var orang2 = buatObject(''Simon'',38,''direktur'');\n  var orang3 = buatObject(''Spiderman'',18,''superhero'');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Untuk pembuatan beberapa object agar lebih efisien, cara ini bisa lebih meringkas penulisan object. Dengan menggunakan function, kode <em>blueprint</em> cukup ditulis sekali dan bisa dipakai untuk membuat object serupa tanpa menuliskan lagi nama-nama property atau methodnya berulangkali, cukup hanya memanggil nama function dengan mengganti argument di dalamnya.</p>\n</div>\n\n<h3>Object Constructor</h3>\n\n<div class="wrapper-content">\n<p>Metode object Constructor sebenarnya mirip dengan metode function declaration, bahkan constructor ini adalah merupakan function yang didesain khusus untuk membuat object. Perbedaannya terletak pada penggunaan keyword <code>this</code> sebagai pengganti object yang berada di depan nama property atau nama method, kemudian tidak diperlukannya lagi keyword <code>return</code>. Sedangkan untuk menggunakannya perlu ditambahkan keyword <code>new</code> kemudian baru diikuti nama functionnya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Membuat Object (Constructor)&lt;/h1&gt;\n  \n  &lt;h3&gt;Buka DevTools untuk memastikan object berhasil dibuat&lt;/h3&gt;\n  &lt;h3&gt;Ketik nama variable object pada tab console&lt;/h3&gt;\n  \n&lt;script&gt;\n// deklarasi function Constructor\n  function BuatObjectBaru(nama,umur,prof){\n    this.nama = nama;\n    this.umur = umur;\n    this.profesi = prof;\n    this.intro = function(){\n      alert(''Saya ''+this.nama+'' bekerja sebagai '' + this.profesi);\n    }\n  }\n\n// pemanggilan function\n  var orang4 = new BuatObjectBaru(''Kamidi'',23,''sineman'');\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Menggunakan metode constructor ini memiliki kelebihan yang bisa digunakan untuk membuat object yang lebih kompleks lagi, namun penggunaan metode ini memerlukan pemahaman dalam tingkat yang lebih jika dibanding menggunakan metode literal atau metode function biasa. Yang perlu diperhatikan bahwa dalam penulisan constructor, keyword <code>this</code> akan selalu digunakan dan keyword <code>new</code> pada saat pemanggilan function. Penjelasan tentang keyword ini ada di bagian akhir materi ini.</p>\n</div>\n\n<h3>Mengakses Object</h3>\n\n<div class="wrapper-content">\n<p>Jika di dalam data array, element yang ada di dalamnya bisa diakses dengan bantuan angka index, lain halnya dengan type data object. Di dalam type data object cara mengakses elementnya terbagi menjadi 2 karena yang diakses adalah property dan juga method.</p>\n\n<h4>Mengakses Property</h4>\n\n<p>Untuk mengakses sebuah property di dalam object, cukup menuliskan variablenya dan nama property nya yang dipisahkan dengan tanda titik seperti <span face="monospace" style="color:#e83e8c">object.namaProperty</span>. Dan bisa juga dengan menggunakan nama property nya sebagai pengganti angka index jika menggunakan penulisan array seperti <code>object[&#39;namaProperty&#39;]</code>.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mengakses Object Property&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\nfunction play(){\n  // object literal\n  var orang = { nama: ''John'', profesi : ''programmer'', umur : 28 };\n  \n  alert(''Nama saya adalah '' + orang.nama);\n  alert(''Umur saya sekarang '' + orang.umur + '' tahun'');\n  alert(''Saya bekerja sebagai '' + orang[''profesi'']);\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Mengakses Method</h4>\n\n<p>Sedangkan untuk mengakses method di dalam object yaitu dengan menulis nama objectnya lalu dipisahkan dengan tanda titik kemudian diikuti nama methodnya dan diakhiri dengan tanda buka tutup kurung seperti <code>object.namaMethod()</code>. Tanda kurung digunakan untuk menjalankan method atau blok kode yang ada di dalam method tersebut. Apabila tidak dituliskan tanda kurungnya maka yang akan dikembalikan adalah berupa definisi dari method tersebut tanpa menjalankannya.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Object&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Mengakses Object Method&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\nfunction play(){\n  // object literal\n  var orang = { \n    nama : ''John'', \n    profesi : ''programmer'', \n    umur : 28, \n    sapa : function(){\n      alert(''Hai, saya ''+this.nama+'', bekerja sebagai ''+this.profesi+'''');\n    }\n  };\n  \n  orang.sapa();\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 1234, 1570480062, 1595470251),
(29, 'BK2zSIV', 'beginner', 19, 'JS Boolean', 'Tipe Data Boolean JavaScript', 'boolean function,truthy dan falsy,control flow,pengkondisian,pengulangan', 1, '<p>Dalam bahasa pemrograman, konsep boolean ini sudah sejak lama dipakai bahka sebelum bahasa JavaScript diciptakan. Boolean ini digunakan untuk merepresentasikan logika antara <strong>true</strong> dan <strong>false</strong>. Pemahaman tentang konsep boolean ini akan sangat berguna ketika sudah menyangkut materi tentang pengkondisian dan pengulangan.</p>\n\n<h3>Boolean Function</h3>\n\n<div class="wrapper-content">\n<p>Di JavaScript menyediakan function <code>Boolean()</code> yang bisa digunakan untuk menguji sebuah nilai atau sebuah ekspresi itu bernilai true atau bernilai false. Sebuah ekspresi yang biasa direpresentasikan dengan operator logika atau operator perbandingan selalu akan menghasilkan nilai boolean.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Tipe Data Boolean&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Function Boolean&lt;/h1&gt;\n  \n  &lt;button onclick="play1()"&gt;10 &lt; 20&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;string kosong&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;Number 11&lt;/button&gt;\n  \n&lt;script&gt;\n  function play1(){\n    alert(Boolean(10 &lt; 20));\n  }\n  function play2(){\n    alert(Boolean(''''));\n  }\n  function play3(){\n    alert(Boolean(11));\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Truthy dan Falsy</h3>\n\n<div class="wrapper-content">\n<p>Setiap nilai dan ekspresi di JavaScript akan selalu menyimpan nilai truthy dan nilai falsy. Nilai ini diberikan secara otomatis kepada setiap tipe data. Setiap nilai yang berisi nilai &quot;nyata&quot; maka nilainya adalah true, sedangkan setiap nilai yang berisi nilai &quot;tidak nyata&quot; maka nilainya adalah false.</p>\n\n<p>Berikut ini adalah tabel perbandingan nilai apa saja yang masuk ke dalam nilai truthy dan juga nilai falsy.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover table-condensed" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">truthy</th>\n			<th scope="col">falsy</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td>true</td>\n			<td>false</td>\n		</tr>\n		<tr>\n			<td>selain angka 0</td>\n			<td>angka 0</td>\n		</tr>\n		<tr>\n			<td>&quot;string&quot;</td>\n			<td>&quot;&quot; (string kosong)</td>\n		</tr>\n		<tr>\n			<td>object</td>\n			<td>undefined</td>\n		</tr>\n		<tr>\n			<td>array</td>\n			<td>null</td>\n		</tr>\n		<tr>\n			<td>function</td>\n			<td>NaN</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n</div>\n\n<h3>Control Flow</h3>\n\n<div class="wrapper-content">\n<p>Berbekal pemahaman tentang data boolean, maka nantinya akan bisa digunakan sebagai kendali dari alur statement yang akan dieksekusi dari sebuah program.</p>\n\n<p>Dalam kondisi normal, baris statement yang telah ditulis di dalam source code akan dieksekusi berurutan dari atas ke bawah. Namun ada kondisi lain dimana bahwa sebuah statement dari source code akan dieksekusi berdasarkan sebuah kondisi yang diberikan. Kondisi yang lain dari normal ini terjadi karena adanya konsep yang disebut sebagai pengkodisian dan juga pengulangan.</p>\n\n<h4>Pengkondisian</h4>\n\n<p>Pengkondisian dalam bahasa program adalah konsep dimana akan ada sebuah statement yang diuji nilai booleannya, apakah bernilai true atau false. Jika sebuah kondisi menghasilkan nilai true, maka ada sebuah statement yang dipersiapkan untuk dijalankan. Sedangkan jika kondisi menghasillkan nilai false, maka statement lainnya yang akan dikerjakan. Dalam setiap konsep pengkodisian, selalu akan ada bagian dari statement yang akan dikerjakan dan ada bagian statement lainnya yang akan diabaikan, tergantung dari sebuah kondisi yang diberikan.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Control Flow&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Pengkondisian&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var waktu = new Date(); // ambil waktu sekarang\n    var jam =  waktu.getHours(); // ambil jam sekarang (0 sampai 23)    \n    var ucapan;\n    // kondisi yang akan diuji untuk membentuk kondisi true atau false\n    if (jam &lt; 18) {  \n      // statement yang dijalankan jika kondisi bernilai true\n      ucapan = "Selamat Pagi atau Selamat Siang";\n    } else {\n      // statement yang dijalankan jika kondisi bernilai false\n      ucapan = "Selamat Sore atau Selamat Malam";\n    }\n    // tampilkan hasilnya ke layar\n    alert(ucapan);\n  }\n&lt;/script&gt;  \n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<h4>Pengulangan</h4>\n\n<p>Di dalam konsep pengulangan atau yang biasa dikenal sebagai <strong>looping</strong>, akan ada sebuah statement yang dijalankan lebih dari satu kali dalam sekali eksekusi (diulang). Hal itu akan terjadi selama sebuah kondisi syarat yang telah ditentukan bernilai true.</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Control Flow&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Pengulangan&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;klik saya&lt;/button&gt;\n\n&lt;script&gt;\nfunction play() {\n\n  for ( var i = 1; i &lt; 5; i++ ){\n    \n    alert("ini adalah pengulangan yang ke-" + i);\n  \n    \n  }\n  alert(''Pengulangan telah selesai'');\n\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n', 506, 1570680451, 1593525255),
(30, 'AFbQcwt', 'advance', 2, 'Advanced Iki', 'he deloken tah', NULL, 0, '', 0, 1583761549, 1583761549),
(31, 'Ild3JcM', 'medium', 1, 'DOM Intro', 'Mengenal Konsep DOM', 'definisi dom,dom tree,struktur dom,html dom,node,nodelist,htmlcollection,rootnode,parentnode,childnode,siblings', 1, '<p>Setelah mempelajari tentang JavaScript Dasar, kita akan melanjutkan materi belajar JavaScript tentang apa yang disebut sebagai DOM. Dengan mempelajari tentang DOM, nantinya kita bisa secara langsung berinteraksi dengan halaman web dengan memasukkan hasil proses dari JavaScript ke dalam layar web.</p>\n\n<p>Sebenarnya konsep dari DOM ini sudah berulang kali digunakan beberapa diantaranya pada demonstrasi contoh kode pada materi mengenai JavaScript Dasar. Namun untuk kali ini, kita akan membahas lebih lanjut tentang konsep DOM yang sebenarnnya. Dan seperti biasanya, kami mengingatkan bahwa untuk belajar tentang JavaScript terutama DOM ini, kita harus paham dulu tentang HTML dan CSS, minimal pada tingkat paling dasar.</p>\n\n<h3>Definisi DOM</h3>\n\n<div class="wrapper-content">\n<p>DOM merupakan singkatan dari <strong>Document Object Model</strong> yang secara umum dapat diartikan bahwa DOM adalah aturan standard web browser dalam menerjemahkan source code yang telah kita tulis pada text editor menjadi sekumpulan object. Selain menampilkan halaman web dari source code, browser juga akan menyimpan source code tadi dalam bentuk model object. Untuk melihat hal ini, dapat dilakukan dengan cara membuka Developer Tools dan pilih tab Elements.</p>\n\n<p>Di dalam sebuah aplikasi web browser baik itu chrome, firefox dan yang lainnya, DOM ini juga bisa diakses melalui console dengan mengetikkan keyword <code>document</code>. Keyword document akan mengembalikan struktur HTML dalam presentasi model object dari halaman web yang sedang aktif tersebut.</p>\n\n<p style="text-align: center;"><img alt="image" class="wide" src="http://localhost/helloworld/assets/img/console-dom.png" title="console DOM" /></p>\n\n<p>Itulah kenapa disebut dengan istilah <strong>document</strong> dalam singkatan DOM. DOM akan merepresentasikan seluruh struktur halaman web ke dalam model yang berbentuk object. Object document ini juga berada di dalam object yang lebih besar lagi yaitu object window yang merupakan object utama atau object terluar dari apa yang bisa diakses oleh JavaScript dalam berinteraksi dengan web browser. Jika digambarkan dalam bentuk tabel, maka struktur object pada browser akan terlihat seperti di bawah ini.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered" style="width: 100%;">\n	<thead>\n		<tr>\n			<th colspan="7" scope="col">web browser</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td colspan="7" style="text-align: center;"><strong><code>window</code></strong></td>\n		</tr>\n		<tr>\n			<td colspan="1" rowspan="5" style="text-align: center; vertical-align: middle;"><strong>history</strong></td>\n			<td colspan="1" rowspan="5" style="text-align: center; vertical-align: middle;"><strong>location</strong></td>\n			<td colspan="5" rowspan="1" style="text-align: center;"><strong><code>document</code></strong></td>\n		</tr>\n		<tr>\n			<td colspan="5" rowspan="1" style="text-align: center;"><strong><code>&lt;html&gt;</code></strong></td>\n		</tr>\n		<tr>\n			<td colspan="2" rowspan="1" style="text-align: center;"><strong><code>&lt;head&gt;</code></strong></td>\n			<td colspan="3" rowspan="1" style="text-align: center;"><strong><code>&lt;body&gt;</code></strong></td>\n		</tr>\n		<tr>\n			<td colspan="1" style="text-align: center;"><strong><code>&lt;title&gt;</code></strong></td>\n			<td colspan="1" style="text-align: center;"><strong><code>&lt;meta&gt;</code></strong></td>\n			<td style="text-align: center;"><strong><code>&lt;div&gt;</code></strong></td>\n			<td style="text-align: center;"><strong><code>&lt;h1&gt;</code></strong></td>\n			<td style="text-align: center;"><strong><code>&lt;p&gt;</code></strong></td>\n		</tr>\n		<tr>\n			<td colspan="2" rowspan="1" style="text-align: center;"><strong>tag meta lainnya</strong></td>\n			<td colspan="3" rowspan="1" style="text-align: center;"><strong>tag HTML lainnya</strong></td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Materi tentang DOM hanya sebatas pada pengelolaan object document beserta object yang ada di dalamnya saja, sedangkan untuk object history dan location akan kami bahas pada materi lain yang lebih khusus lagi yaitu tentang <strong>Browser Object Model</strong>.</p>\n</div>\n\n<h3>DOM Tree</h3>\n\n<div class="wrapper-content">\n<p>Struktur dasar pada bentuk DOM ini dikenal sebagai istilah DOM Tree atau pohon hirarki DOM. DOM diilustrasikan menjadi struktur dari sebuah pohon terbalik dimana ada akar dan beberapa cabang di dalamnya.</p>\n\n<p>Jika sebuah halaman web sederhana atau dokumen HTML ditulis seperti di bawah ini,</p>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;JavaScript DOM&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Ini Judul&lt;/h1&gt;\n  &lt;p&gt;Ini adalah paragraf&lt;/p&gt;\n  &lt;a href="test.html"&gt;Ini adalah link&lt;/a&gt;\n  &lt;ul&gt;\n    &lt;li&gt;ini list pertama&lt;/li&gt;\n    &lt;li&gt;ini list kedua&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Maka struktur DOM Tree nya jika ditulis ke dalam tabel akan berbentuk seperti ini.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed" style="width: 100%;">\n	<tbody>\n		<tr>\n			<td colspan="10" style="text-align: center;"><strong>root utama</strong><br />\n			#document</td>\n		</tr>\n		<tr>\n			<td colspan="10" style="text-align: center;"><strong>root element</strong><br />\n			<code class="language-html">&lt;html&gt;</code></td>\n		</tr>\n		<tr>\n			<td colspan="2" rowspan="1" style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;head&gt;</code></td>\n			<td colspan="8" rowspan="1" style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;body&gt;</code></td>\n		</tr>\n		<tr>\n			<td colspan="2" style="text-align: center;"><b>element</b><br />\n			<code class="language-html">&lt;title&gt;</code></td>\n			<td colspan="2" style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;h1&gt;</code></td>\n			<td style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;p&gt;</code></td>\n			<td colspan="2" rowspan="1" style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;a&gt;</code></td>\n			<td colspan="2" rowspan="1" style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;ul&gt;</code></td>\n		</tr>\n		<tr>\n			<td colspan="2" rowspan="2" style="text-align: center; vertical-align: middle;"><strong>text</strong><br />\n			JavaScript DOM</td>\n			<td colspan="2" rowspan="2" style="text-align: center; vertical-align: middle;"><strong>text</strong><br />\n			Ini Judul</td>\n			<td colspan="1" rowspan="2" style="text-align: center; vertical-align: middle;"><strong>text</strong><br />\n			ini adalah paragraf</td>\n			<td style="text-align: center;"><strong>attribute</strong><br />\n			<span style="color:#2ecc71;">href</span></td>\n			<td colspan="1" rowspan="2" style="text-align: center; vertical-align: middle;"><strong>text</strong><br />\n			Ini adalah link</td>\n			<td style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;li&gt;</code></td>\n			<td style="text-align: center;"><strong>element</strong><br />\n			<code class="language-html">&lt;li&gt;</code></td>\n		</tr>\n		<tr>\n			<td style="text-align: center;"><strong>value</strong><br />\n			<span style="color:#f1c40f;">test.html</span></td>\n			<td style="text-align: center;"><strong>text</strong><br />\n			ini list pertama</td>\n			<td style="text-align: center;"><strong>text</strong><br />\n			ini list kedua</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Ada 3 istilah yang dipakai untuk penyebutan beberapa komponen yang harus dipahami dari tabel DOM Tree di atas.</p>\n\n<h4>Node</h4>\n\n<p>Setiap sel pada tabel DOM Tree di atas disebut sebagai istilah simpul atau <strong>Node</strong> dan masing-masing node itu akan memiliki tipe yaitu <strong>document</strong>, <strong>element</strong>, <strong>text</strong>, dan <strong>attribute</strong>. Khusus untuk tipe node attribute tidak akan dipakai lagi karena sudah termasuk ke dalam tipe node element.</p>\n\n<h4>NodeList</h4>\n\n<p>NodeList merupakan kumpulan dari beberapa node yang ada di dalamnya. Sekumpulan node itu akan disebut sebagai NodeList tidak peduli node itu bertipe element atau text.</p>\n\n<h4>HTMLCollection</h4>\n\n<p>Sedangkan kumpulan node yang isinya hanya bertipe element (tag) maka akan disebut sebagai HTMLCollection.</p>\n\n<p>Kumpulan node-node baik itu NodeList atau HTMLCollection ini bentuknya mirip dengan array, sehingga dapat dilakukan loop berdasarkan angka indexnya. Tetapi juga bukan sepenuhnya array karena kumpulan node ini tidak akan bisa diperlakukan dengan method yang ada pada array seperti <code>join()</code>, <code>pop()</code>, <code>shift()</code> dan lainnya.</p>\n</div>\n\n<h3>Struktur DOM</h3>\n\n<div class="wrapper-content">\n<p>Bentuk struktur DOM juga sama seperti silsilah di dalam keluarga dimana akan selalu ada hubungan dari orang tua, anak, dan semua keturunan yang ada di bawahnya. Beberapa istilah dalam struktur DOM yang digunakan untuk menamai bagian-bagian node ini di antaranya adalah sebagai berikut.</p>\n\n<h4>RootNode</h4>\n\n<p>RootNode adalah node yang merupakan sumber dari semua node yang lainnya di dalam DOM, yang dalam hal ini, default dari root node adalah <code>document</code>.</p>\n\n<h4>ParentNode</h4>\n\n<p>Saat masuk ke dalam konsep parent dan child, hal ini tergantung dari perspektif mana sebuah node itu menjadi parent atau menjadi child. parentNode adalah node yang berada satu tingkat di atas node yang bersangkutan. Sehingga jika diambil contoh pada tabel DOM Tree di atas, maka node <code class="language-html">&lt;body&gt;</code> disebut sebagai parent node dari node <code class="language-html">&lt;h1&gt;</code>, <code class="language-html">&lt;p&gt;</code>, <code class="language-html">&lt;a&gt;</code>, dan <code class="language-html">&lt;ul&gt;</code>.</p>\n\n<h4>ChildNode</h4>\n\n<p>Sedangkan untuk childNode adalah kebalikan dari parent node yaitu node yang berada satu tingkat di bawah node yang bersangkutan. Dari DOM Tree di atas, node element <code class="language-html">&lt;h1&gt;</code> merupakan child node dari node <code class="language-html">&lt;body&gt;</code>.</p>\n\n<p>Dalam konsep child ini nantinya akan dibagi lagi menjadi dua istilah yaitu, <code>firstChild</code> dan <code>lastChild</code>.</p>\n\n<ul>\n	<li>\n	<h5>firstChild</h5>\n	</li>\n</ul>\n\n<p>FirstChild merupakan child pertama dari sebuah node, dalam hal ini, node element <code>h1</code> juga disebut sebagai firstChild dari <code>body</code>.</p>\n\n<ul>\n	<li>\n	<h5>lastChild</h5>\n	</li>\n</ul>\n\n<p>LastChild merupakan child terakhir dari sebuah node, dalam hal ini, node element <code>ul</code> disebut sebagai lastChild dari <code>body</code>.</p>\n\n<h4>Siblings</h4>\n\n<p>Siblings atau saudara kandung ini juga istilah yang cukup penting untuk dipahami. Siblings merupakan sekumpulan node yang memiliki parent yang sama. Element <code class="language-html">&lt;h1&gt;</code>, <code class="language-html">&lt;p&gt;</code>, <code class="language-html">&lt;a&gt;</code>, dan <code class="language-html">&lt;ul&gt;</code> bisa disebut sebagai siblings antar sesamanya karena memiliki parent yang sama yaitu <code>body</code>.</p>\n</div>\n\n<h3>HTML DOM</h3>\n\n<div class="wrapper-content">\n<p>Setelah dokumen HTML (source code) dijalankan di dalam browser dan dimodelkan ke dalam bentuk object, hal itu akan sangat memungkinkan agar JavaScript bisa mengontrol sepenuhnya terhadap object yang ada di dalam DOM untuk membuat HTML yang lebih dinamis.</p>\n\n<p>Jika sebelumnya kita sudah memahami konsep tentang tipe data Object di dalam JavaScript, untuk memahami konsep dasar dari HTML DOM akan menjadi lebih mudah. HTML DOM dapat diartikan menjadi seperti ini.</p>\n\n<ol>\n	<li>semua element yang ada adalah <strong>object</strong></li>\n	<li>semua object selalu memiliki <strong>property</strong></li>\n	<li>semua object juga akan selalu berkaitan dengan <strong>method</strong></li>\n	<li>semua element juga bisa diberikan <strong>event</strong></li>\n</ol>\n\n<p>Sehingga HTML DOM dapat disimpulkan menjadi cara JavaScript dalam mengelola object untuk<strong> mendapatkan, mengubah, menambahkan, </strong>ataupun<strong> menghapus </strong>element HTML secara dinamis.</p>\n\n<p>Dengan DOM, kontrol penuh JavaScript terhadap dokumen HTML ini bisa meliputi banyak hal, seperti :</p>\n\n<ol>\n	<li>mengubah semua element HTML</li>\n	<li>mengubah attribute di dalam element HTML</li>\n	<li>mengubah style setiap element HTML</li>\n	<li>menambahkan element baru berikut dengan attribute nya</li>\n	<li>menghapus element HTML manapun</li>\n	<li>membuat sekaligus merespon semua event yang terjadi terhadap element HTML</li>\n</ol>\n\n<p>Setelah kita mengetahui tentang konsep dasar dari DOM ini, maka pada materi selanjutnya, kita akan belajar tentang hal apa saja yang harus dilakukan untuk mengelola DOM dengan JavaScript.</p>\n</div>\n\n<ol>\n</ol>\n', 975, 1582057085, 1593525884),
(32, 'AhZQSo6', 'advance', 1, 'Lanjutan Bro', 'broo lanjutan iki', NULL, 0, '', 0, 1582057229, 1582057229);
INSERT INTO `materi` (`id`, `les_id`, `les_level`, `les_order`, `les_title`, `les_slug`, `les_key`, `les_publish`, `les_content`, `les_length`, `les_upload`, `les_update`) VALUES
(33, 'Ifn3bBM', 'medium', 4, 'DOM Node', 'Memanipulasi Node DOM', 'manipulasi node,createelement,createtextnode,appendchild,insertbefore,removechild,replacechild', 1, '<p>Manipulasi pada DOM tidak hanya terbatas pada element saja, tetapi bisa juga dilakukan terhadap node. Manipulasi node memungkinkan untuk menambahkan element baru, mengubah element yang ada dan juga menghapusnya. Hal ini mirip dengan fungsi property set dari innerHTML pada materi sebelumnya, tetapi khusus untuk manipulasi node ini, kita bisa lakukan lebih spesifik terhadap node yang akan dibuat dan dimana akan diletakkan element tersebut.</p>\n\n<h3>Manipulasi Node</h3>\n\n<div class="wrapper-content">\n<p>Masih ingat kan apa yang disebut sebagai node? Node adalah sebuah simpul di dalam DOM Tree yang di di dalamnya terdapat beberapa komponen seperti element, konten/ text, dan juga attribute jika ada. Untuk membuat sebuah node, dalam prakteknya, JavaScript akan membagi prosesnya menjadi beberapa bagian, untuk kemudian bisa menjadi satu node utuh dan bisa ditampilkan di halaman web.</p>\n\n<p style="text-align: center;"><img alt="image" src="http://localhost/helloworld/assets/img/element.png" title="node" /></p>\n\n<p>Berikut ini adalah urutan dalam proses membuat sebuah node pada JavaScript.</p>\n\n<ol>\n	<li>membuat sebuah tag sebagai pembungkusnya</li>\n	<li>membuat konten dari tag</li>\n	<li>memasukkan konten ke dalam tag</li>\n	<li>menempatkan tag yang telah berisi konten ke dalam dokumen</li>\n</ol>\n\n<p>Adapun beberapa method yang disediakan oleh JavaScript dan sering digunakan untuk melakukan seperti pada proses urutan di atas adalah sebagai berikut.</p>\n</div>\n\n<h3>createElement</h3>\n\n<div class="wrapper-content">\n<p>Method <code>createElement()</code> digunakan untuk membuat element baru yang khusus untuk membuat tag pembungkus berupa tag pembuka dan tag penutupnya.</p>\n\n<pre class="line-numbers">\n<code>document.createElement(tag)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method createElement&lt;/h1&gt;\n  \n  &lt;button onclick="play()"&gt;createElement()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var tag = document.createElement(''h3'');\n    alert(tag.outerHTML);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>createTextNode</h3>\n\n<div class="wrapper-content">\n<p>Method <code>createTextNode()</code> digunakan untuk membuat text yang nantinya akan dimasukkan sebagai konten dari element yang telah dibuat dengan createElement. Method ini hampir sama seperti fungsi dari property innerText.</p>\n\n<pre class="line-numbers">\n<code>document.createTextNode(text)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method createTextNode&lt;/h1&gt;\n  &lt;button onclick="play()"&gt;createTextNode()&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var content = document.createTextNode(''ini konten dari DOM Node JavaScript'');\n    alert(content);\n    console.log(content);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>appendChild</h3>\n\n<div class="wrapper-content">\n<p>Method <code>appendChild()</code> digunakan untuk memasukkan atau menambahkan sebuah node ke dalam node lainnya. Node yang dimasukkan nantinya akan diletakkan sebagai child / anak paling terakhir dari sebuah node (node element).</p>\n\n<p>Melanjutkan contoh demo sebelumnya, kedua node yaitu node element (tag) dan node text (konten) merupakan dua hal yang terpisah dan tidak ada hubungannya sama sekali. Baru akan ada hubungan jika konten telah dimasukkan ke dalam element tag sehingga menjadi element yang utuh.</p>\n\n<pre class="line-numbers">\n<code>parentNode.appendChild(node)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n  &lt;style&gt;\n    .satu {\n      border: 1px solid blue;\n    }\n    .dua {\n      border: 1px solid red;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method appendChild&lt;/h1&gt;\n  \n  &lt;h3&gt;Buat element baru dan masukkan ke setiap element div&lt;/h3&gt;\n\n  &lt;div class="satu"&gt;&lt;/div&gt;\n  &lt;button onclick="play1()"&gt;appendChild ke div.satu&lt;/button&gt;\n\n  &lt;div class="dua"&gt;\n    &lt;p&gt;ini paragraf pertama&lt;/p&gt;\n    &lt;p&gt;ini paragraf kedua&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;button onclick="play2()"&gt;appendChil ke div.dua&lt;/button&gt;\n\n&lt;script&gt;\n  var satu = document.querySelector(''.satu'');\n  var dua = document.querySelector(''.dua'');\n  function play1(){\n    var h3 = document.createElement(''h3'');\n    var contentH3 = document.createTextNode(''ini konten di dalam tag h3'');\n    \n    // memasukkan node text ke dalam node element\n    h3.appendChild(contentH3);\n    // memasukkan node element ke dalam node element pada document \n    satu.appendChild(h3);\n  }\n  function play2(){\n    var pNew = document.createElement(''p'');\n    var contentP = document.createTextNode(''ini konten di dalam tag p'');\n\n    pNew.appendChild(contentP);\n    dua.appendChild(pNew);\n  }  \n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>insertBefore</h3>\n\n<div class="wrapper-content">\n<p>Dengan method <code>insertBefore()</code>, kita bisa lebih spesifik untuk menempatkan node yang telah dibuat ke dalam document. Untuk menggunakan method ini, hal utama yang harus dilakukan adalah menyeleksi node parent (element) kemudian menyeleksi element yang berada pada setelah node yang dimaksud untuk diletakkan.</p>\n\n<pre>\n<code>parentNode.insertBefore(nodeBaru,nodeSebelumnya)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method insertBefore&lt;/h1&gt;\n  \n  &lt;h3&gt;Tambahkan element li yang ketiga&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list nomor 1&lt;/li&gt;\n    &lt;li&gt;list nomor 2&lt;/li&gt;\n    \n    &lt;li&gt;list nomor 4&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;button onclick="play()"&gt;insertBefore&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var ul = document.getElementsByTagName(''ul'')[0];\n    var li4 = document.querySelector(''li:nth-child(3)''); // list nomor 4\n    \n    var li3 = document.createElement(''li'');\n    var contentLi = document.createTextNode(''ini list nomor 3 yang baru'');\n    li3.appendChild(contentLi);\n    \n    ul.insertBefore(li3,li4);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>removeChild</h3>\n\n<div class="wrapper-content">\n<p>Method <code>removeChild()</code> digunakan untuk menghapus node yang terseleksi.</p>\n\n<pre>\n<code>parentNode.removeChild(nodeTarget)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method removeChild&lt;/h1&gt;\n  \n  &lt;h3&gt;hapus element li yang ke 4&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list nomor 1&lt;/li&gt;\n    &lt;li&gt;list nomor 2&lt;/li&gt;\n    &lt;li&gt;list nomor 3&lt;/li&gt;\n    &lt;li&gt;list nomor 4 (yang akan dihapus)&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;button onclick="play()"&gt;removeChild()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var ul = document.getElementsByTagName(''ul'')[0]; // ambil parent nya\n    var li4 = document.querySelector(''li:nth-child(4)''); // list nomor 4\n    \n    ul.removeChild(li4);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>replaceChild</h3>\n\n<div class="wrapper-content">\n<p>Method <code>replaceChild()</code> digunakan untuk megubah sebuah node dengan node baru.</p>\n\n<pre>\n<code>parentNode.replaceChild(nodeBaru,nodeTarget)</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;DOM Node&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;h1&gt;Method replaceChild&lt;/h1&gt;\n  \n  &lt;h3&gt;Ubah element li yang kedua dengan span&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list nomor 1&lt;/li&gt;\n    &lt;li&gt;list nomor 2&lt;/li&gt;\n    &lt;li&gt;list nomor 3&lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;button onclick="play()"&gt;replaceChild()&lt;/button&gt;\n  \n&lt;script&gt;\n  function play(){\n    var ul = document.getElementsByTagName(''ul'')[0];\n    var li2 = document.querySelector(''li:nth-child(2)''); // list nomor 2\n    \n    var span = document.createElement(''span'');\n    var content = document.createTextNode(''ini text di dalam span'');\n    span.appendChild(content);\n    \n    ul.replaceChild(span,li2);\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<p>Itulah tadi beberapa method JavaScript yang sering digunakan untuk memanipulasi DOM. Berikut ini adalah method lain yang beberapa di antaranya merupakan pembaruan dari method yang telah dijelaskan di atas.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-condensed table-hover" style="width: 100%;">\n	<thead>\n		<tr>\n			<th scope="col">Method Baru</th>\n			<th scope="col">keterangan</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td><code>parentNode.append() </code></td>\n			<td>menambahkan node ke dalam node (sebagai child terakhir)</td>\n		</tr>\n		<tr>\n			<td><code>parentNode.prepend() </code></td>\n			<td>menambahkan node ke dalam node (sebagai child pertama)</td>\n		</tr>\n		<tr>\n			<td><code>childNode.after() </code></td>\n			<td>menambahkan node setelah node target</td>\n		</tr>\n		<tr>\n			<td><code>childNode.before() </code></td>\n			<td>menambahkan node sebelum node target</td>\n		</tr>\n		<tr>\n			<td><code>childNode.remove() </code></td>\n			<td>menghapus node target</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p>Referensi :</p>\n\n<ul>\n	<li><a href="https://www.w3schools.com/jsref/dom_obj_document.asp" target="_blank">w3schools.com/jsref/dom_obj_document.asp</a></li>\n</ul>\n', 765, 1583636462, 1593526583),
(36, 'IDtreqH', 'medium', 9, 'JS Hoisting', 'Konsep Hoisting pada JavaScript', NULL, 0, '', 0, 1595387217, 1595387217),
(37, 'IRGCsvQ', 'medium', 11, 'JS JSON', 'Memahami apa itu JSON', NULL, 0, '', 0, 1595387277, 1595387277),
(38, 'I1ewaIs', 'medium', 12, 'JS Timing', 'Mengatur Timing pada JavaScript', NULL, 0, '', 0, 1595432942, 1595432942),
(39, 'IMQ4tbK', 'medium', 10, 'JS Variable', 'Perbedaan Keyword Variable', NULL, 0, '', 0, 1595433030, 1595433030),
(34, 'I9DGYMf', 'medium', 7, 'JS RegExp', 'Regular Expression JavaScript', 'definisi,modifier,bracket,metacharacter', 1, '<p>Pada materi JavaScript dasar tentang method pada tipe data string ada beberapa method yang argumentnya bisa diisi dengan Regular Expression. Seperti contohnya pada method <code>search()</code>, <code>replace()</code> atau <code>match()</code>. Pada materi ini, kita akan bahas lebih lanjut tentang apa yang disebut dengan Regular Expression atau biasa disebut <code>RegExp</code>.</p>\n\n<h3>Definisi</h3>\n\n<div class="wrapper-content">\n<p>RegExp adalah urutan karakter yang terstruktur yang akan membentuk sebuah pattern atau pola khusus. Dengan pola khusus ini, memungkinkan untuk melakukan pencarian karakter atau text yang sesuai dengan pola yang dimaksud. RegExp bisa terdiri dari satu karakter atau bisa juga terdapat beberapa karakter yang disusun sekompleks mungkin dan akan membentuk pola sesuai yang diinginkan.</p>\n\n<pre>\n<code class="language-javascript">// bentuk simpel regular expression \n/pattern/modifiers;\n\n// atau regular expression dalam bentuk object \nnew RegExp(pattern,modifiers);</code></pre>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Regular Expression&lt;/title&gt;\n  &lt;style&gt; \n  span { background: yellow; border: 1px inset; } \n  #str { font-size: 18px; line-height: 2; border: 1px solid red; } \n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;RegExp untuk mengubah string&lt;/h1&gt;\n  &lt;p id="str"&gt;\n    Java merupakan bahasa pemrograman murni.\n    Tidak seperti HTML &amp; CSS, java memiliki\n    tingkat kompleksitas yang lebih tinggi.\n    Tahun 2020, JavA masuk 5 besar\n    sebagai bahasa program terpopuler.\n  &lt;/p&gt;\n  &lt;button onclick="play()"&gt;RegExp&lt;/button&gt;\n\n&lt;script&gt;\n  function play(){\n    var str = document.getElementById(''str'').innerHTML;\n    var pattern = /java/ig; // RegExp dengan modifier i dan g\n    var hasil = str.replace(pattern,''&lt;span&gt;JavaScript&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n\n<p>Ada beberapa bagian di dalam membuat pola regular expression yang harus dipahami.</p>\n\n<ol>\n	<li>Modifier</li>\n	<li>Bracket</li>\n	<li>Metacharacter</li>\n	<li>Quantifier</li>\n</ol>\n\n<p>Kamu bisa kunjungi situs <a href="https://regexr.com/" target="_blank">regexr.com</a> untuk belajar dan bereksperimen  lebih lanjut tentang regular expression.</p>\n</div>\n\n<h3>Modifier</h3>\n\n<div class="wrapper-content">\n<p>Modifier digunakan untuk melakukan pola pencarian berdasarkan bentuk sifat case-sensitif, hasil global dan multiline.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">modifier</th>\n			<th scope="col">deskripsi</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code>i</code></td>\n			<td>menemukan kecocokan yang mengabaikan sifat case-sensitif</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>g</code></td>\n			<td>menemukan kecocokan pola dari semua pola yang ditemukan (tidak hanya satu) </td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>m</code></td>\n			<td>menemukan kecocokan yang melibatkan multiline </td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Regular Expression&lt;/title&gt;\n  &lt;style&gt; \n  span { background: yellow; border: 1px inset; } \n  #str { font-size: 18px; line-height: 2; border: 1px solid red; } \n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;RegExp Modifiers&lt;/h1&gt;\n  &lt;pre id="str"&gt;&lt;/pre&gt;\n  &lt;button onclick="play1()"&gt;modifier i&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;modifier g&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;modifier m&lt;/button&gt;\n\n&lt;script&gt;\n  var str = '''', hasil;\n  str += `JavaScript merupakan bahasa pemrograman murni.\\n`;\n  str += `Tidak seperti HTML &amp; CSS, javascript memiliki\\n`;\n  str += `tingkat kompleksitas yang lebih tinggi.\\n`;\n  str += `Tahun 2020, JavaScript masuk 5 besar\\n`;\n  str += `sebagai bahasa program terpopuler.\\n`;\n  document.getElementById(''str'').innerHTML = str;\n\n  // mencari string JavASCriPt tanpa mempedulikan case-sensitif\n  var modifier_i = new RegExp(''JavASCriPt'',''i'');\n  // mencari string em sebanyak apapun yang ditemukan\n  var modifier_g = new RegExp(''em'',''g'');\n  // mencari string i. yang diakhiri baris baru (\\n)\n  var modifier_m = new RegExp(''i.$'',''m'');\n  \n  function play1(){\n    var hasil = str.replace(modifier_i,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n  function play2(){\n    var hasil = str.replace(modifier_g,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n  function play3(){\n    var hasil = str.replace(modifier_m,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n&lt;/script&gt;\n\n&lt;p class="explain"&gt;\n  Penggunaan modifiers i, g, dan m biasanya akan digunakan secara bersamaan,\n  untuk membentuk pola yang sesuai\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Bracket</h3>\n\n<div class="wrapper-content">\n<p>Bracket atau tanda kurung digunakan untuk mencari pola karakter yang ada di dalam rentang karakter kurung ini.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">Contoh</th>\n			<th scope="col">Deskripsi</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code>[abc]</code></td>\n			<td>mencari yang ada di dalam bracket (semua karakter)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>[^abc]</code></td>\n			<td>mencari SELAIN yang ada di dalam bracket (semua karakter)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>[0-9]</code></td>\n			<td>mencari karakter yang ada di dalam (semua digit angka)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>[^0-9]</code></td>\n			<td>mencari karakter SELAIN yang ada di dalam (karakter non angka)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>(x|y)</code></td>\n			<td>mencari karakter alternatif sesuai dengan karakter di antara tanda |</td>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<pre class="line-numbers">\n<code class="language-html">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Regular Expression&lt;/title&gt;\n  &lt;style&gt; \n  span { background: yellow; border: 1px inset; } \n  #str { font-size: 18px; line-height: 2; border: 1px solid red; } \n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;RegExp Bracket&lt;/h1&gt;\n  &lt;pre id="str"&gt;&lt;/pre&gt;\n  &lt;button onclick="play1()"&gt;[aiuoe]&lt;/button&gt;\n  &lt;button onclick="play2()"&gt;[A-Z]&lt;/button&gt;\n  &lt;button onclick="play3()"&gt;(e|i|o)&lt;/button&gt;\n  &lt;button onclick="play4()"&gt;[0-9]&lt;/button&gt;\n\n&lt;script&gt;\n  var str = '''', hasil;\n  str += `JavaScript merupakan bahasa pemrograman murni.\\n`;\n  str += `Tidak seperti HTML &amp; CSS, javascript memiliki\\n`;\n  str += `tingkat kompleksitas yang lebih tinggi.\\n`;\n  str += `Tahun 2020, JavaScript masuk 5 besar\\n`;\n  str += `sebagai bahasa program terpopuler.\\n`;\n  document.getElementById(''str'').innerHTML = str;\n\n  var bracket_1 = new RegExp(''[aiuoe]'',''g'');\n  var bracket_2 = new RegExp(''[A-Z]'',''g'');\n  var bracket_3 = new RegExp(''(e|i|o)'',''g'');\n  var bracket_4 = new RegExp(''[0-9]'',''g'');\n  \n  function play1(){\n    hasil = str.replace(bracket_1,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n  function play2(){\n    hasil = str.replace(bracket_2,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n  function play3(){\n    hasil = str.replace(bracket_3,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n  function play4(){\n    hasil = str.replace(bracket_4,''&lt;span&gt;$&amp;&lt;/span&gt;'');\n    document.getElementById(''str'').innerHTML = hasil;\n  }\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n</div>\n\n<h3>Metacharacter</h3>\n\n<p>Metacharacter adalah karakter alphabet yang memiliki arti khusus di dalam JavaScript.</p>\n\n<div class="table-responsive">\n<table class="table table-bordered table-hover" style="width:100%">\n	<thead>\n		<tr>\n			<th scope="col">Metacharacter</th>\n			<th scope="col">Description</th>\n		</tr>\n	</thead>\n	<tbody>\n		<tr>\n			<td style="text-align:center"><code>.</code></td>\n			<td>mencari per karakter apapun, kecuali new line (baris baru)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\w</code></td>\n			<td>mencari karakter yang termasuk huruf dan angka</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\W</code></td>\n			<td>mencari karakter SELAIN huruf dan angka</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\d</code></td>\n			<td>mencari karakter digit angka</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\D</code></td>\n			<td>mencari karakter SELAIN digit angka</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\s</code></td>\n			<td>mencari karakter spasi (whitespace)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\S</code></td>\n			<td>mencari karakter SELAIN spasi (whitespace)</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\b</code></td>\n			<td>mencari karakter yang diawali atau diakhiri dengan suatu karakter, seperti awalan me : <code>\\bme</code> atau akhiran an : <code>an\\b</code></td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\B</code></td>\n			<td>mencari karakter yang TIDAK diawali atau diakhiri dengan suatu karakter/kata</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\0</code></td>\n			<td>mencari karakter <code>NULL</code> </td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\n</code></td>\n			<td>mencari karakter new line</td>\n		</tr>\n		<tr>\n			<td style="text-align:center"><code>\\t</code></td>\n			<td>mencari karakter tab</td>\n		</tr>\n		<tr>\n		</tr>\n	</tbody>\n</table>\n</div>\n\n<p></p>\n\n<p>Quantifier</p>\n', 726, 1586536859, 1595515553);

-- --------------------------------------------------------

--
-- Table structure for table `quiz`
--

CREATE TABLE IF NOT EXISTS `quiz` (
  `id` int(11) NOT NULL,
  `q_order` int(11) NOT NULL,
  `q_rel` varchar(128) NOT NULL,
  `q_active` int(11) NOT NULL DEFAULT '0',
  `q_level` varchar(128) NOT NULL,
  `q_question` text NOT NULL,
  `q_answer` text NOT NULL,
  `q_correct` text NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `quiz`
--

INSERT INTO `quiz` (`id`, `q_order`, `q_rel`, `q_active`, `q_level`, `q_question`, `q_answer`, `q_correct`) VALUES
(1, 1, 'BOG5lsN', 1, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var foo = [''satu'',''dua'',3,true,false];\nvar len = foo.length;</code></pre>\n\n<p>isi dari variable <code>len</code> adalah ...</p>\n', 'object,array,5,6', '3'),
(27, 3, 'B9PemM9', 0, 'beginner', '<p>Perhatikan snippet ini ! </p>\n\n<pre class="line-numbers">\n<code class="language-javascript">function foo(a,b) {\n  arguments[1] = 2;\n  alert(b);\n}\nfoo(1);</code></pre>\n\n<p>yang akan ditampilkan oleh pop up alert adalah ...</p>\n', '2,1,undefined,ReferenceError', '3'),
(3, 1, 'ByTc2dL', 1, 'beginner', '<p>Function JavaScript yang berfungsi untuk memunculkan pop up box pada browser adalah ...</p>\n', 'innerHTML,alert(),getElementById(),querySelector()', '2'),
(7, 2, 'BykFmUK', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var foo;\nfoo = ''kupu'';\nfoo += '' kupu'';</code></pre>\n\n<p>Jika variable <code>foo</code> di cetak ke layar maka hasilnya adalah ...</p>\n', 'kupu kupu,kupukupu,undefined,kupu', '1'),
(15, 3, 'BSi5Anl', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var foo;\nalert(foo);\nfoo = ''hello world'';\nfoo = 1;</code></pre>\n\n<p>nilai yang akan ditampilkan di dalam pop up alert adalah ...</p>\n', '1,hello world,null,undefined', '4'),
(10, 2, 'BDMJggi', 0, 'beginner', '<p>Cara memanggil file JavaScript yang bernama <code>file.js</code> ke dalam dokumen HTML adalah ...</p>\n', '&amp;lt;script name=&amp;quot;file.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;,&amp;lt;script src=&amp;quot;file.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;,&amp;lt;script&amp;gt;file.js&amp;lt;/script&amp;gt;,&amp;lt;script href=&amp;quot;file.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;', '2'),
(24, 1, 'Ild3JcM', 0, 'medium', '<p>nanana</p>\n', 'nana,na,n,nanana', '2'),
(12, 3, 'BykFmUK', 0, 'beginner', '<p>Expression yang menghasilkan nilai boolean <code>true</code> adalah ...</p>\n', '1 != 2,1 &amp;gt; 2,x += 20,&amp;quot;angka&amp;quot; === &amp;quot;Angka&amp;quot;', '1'),
(13, 4, 'BykFmUK', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var foo = (4 % 2 == 0) ? ''benar'' : ''salah'';</code></pre>\n\n<p>maka isi dari variable <code>foo</code> adalah ...</p>\n', 'true,benar,false,salah', '2'),
(17, 2, 'BpMkfuO', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">function helloWorld(){\n  console.log(''Hello World'');\n}</code></pre>\n\n<p>dari function di atas, agar text &quot;Hello World&quot; muncul pada console, maka cara menjalankannya adalah ...</p>\n', 'helloWorld(),console.log(''Hello World''),function(),function helloWorld()', '1'),
(25, 2, 'BpMkfuO', 0, 'beginner', '<p>Manakah di antara function berikut ini yang merupakan <code>user-defined</code> function ...</p>\n', 'alert(),hello(),substr(),push()', '2'),
(26, 1, 'Bsi6Z4d', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var foo = undefined;\nfoo = ''Hello World'';\n\n(function(){\n  var foo = false;\n  alert(foo);\n  foo = window.foo;\n  alert(foo);\n})();</code></pre>\n\n<p>urutan pop up alert yang akan ditampilkan adalah ...</p>\n', 'undefined - undefined,&amp;quot;Hello World&amp;quot; - undefined,false - &amp;quot;Hello World&amp;quot;,false - undefined', '3'),
(19, 1, 'B9PemM9', 0, 'beginner', '<p>Perhatikan snippet ini !</p>\n\n<pre class="line-numbers">\n<code class="language-javascript">var a = 10, b = 3;\n\nfunction foo(a,b){\n  return a * b;\n}\n\nvar bar = foo(a,b);</code></pre>\n\n<p>isi dari variable <code>bar</code> adalah ...</p>\n', '10,function,undefined,30', '4'),
(20, 1, 'Bq0ug2s', 0, 'beginner', '<p>Penulisan nama variable JavaScript yang benar adalah ...</p>\n', '123namaVariable,nama Variable,namaVariable,#namaVariable', '3'),
(28, 1, 'IgaTMbO', 0, 'medium', '<p>wkwkwk</p>\n', '1,2,3,4', '4'),
(29, 1, 'IiOkByQ', 0, 'medium', '<p>huaaa</p>\n', '1,2,3,4', '4');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL,
  `u_id` varchar(11) NOT NULL,
  `u_provider` enum('local','facebook') NOT NULL DEFAULT 'local',
  `u_role` int(1) NOT NULL,
  `u_username` varchar(128) NOT NULL,
  `u_email` varchar(128) NOT NULL,
  `u_password` varchar(255) NOT NULL,
  `u_active` int(1) NOT NULL,
  `u_register` int(11) NOT NULL,
  `u_modified` int(11) NOT NULL,
  `u_image` varchar(256) NOT NULL,
  `u_name` varchar(256) NOT NULL,
  `u_gender` enum('Laki-laki','Perempuan') NOT NULL,
  `u_bio` text NOT NULL,
  `u_web` varchar(256) NOT NULL,
  `u_isNew` int(11) NOT NULL DEFAULT '1'
) ENGINE=MyISAM AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `u_id`, `u_provider`, `u_role`, `u_username`, `u_email`, `u_password`, `u_active`, `u_register`, `u_modified`, `u_image`, `u_name`, `u_gender`, `u_bio`, `u_web`, `u_isNew`) VALUES
(1, '322184916', 'local', 2, 'ngadiono', 'ngadiono@gmail.com', '$2y$10$WzgezMuEvZdBmefxKfMznOs1lEiHATxW79Ch1W5C.My63ZW6lZngq', 1, 1553255356, 1567259063, 'hello.gif', 'raden ngadionox', 'Laki-laki', '', 'http://helloworlds.epizy.com', 1),
(2, '406080404', 'local', 1, 'superadmin', 'adm@gmail.com', '$2y$10$y8AEjroE5z3xyn68b.nkteUrONKp5Rav57AS/y5tLWUc3QuPd4GoO', 1, 1554512644, 1581519314, 'hello.gif', 'superman', 'Laki-laki', 'suka jajan dan tidur', 'https://google.com', 1);

-- --------------------------------------------------------

--
-- Table structure for table `user_cookie`
--

CREATE TABLE IF NOT EXISTS `user_cookie` (
  `id` int(11) NOT NULL,
  `email` varchar(256) NOT NULL,
  `token` varchar(256) NOT NULL,
  `expired` varchar(128) NOT NULL
) ENGINE=MyISAM AUTO_INCREMENT=31 DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_cookie`
--

INSERT INTO `user_cookie` (`id`, `email`, `token`, `expired`) VALUES
(30, 'adm@gmail.com', '8867b06d04169e9b509b985429d196525062abbbe3b37a9bb6c703477b6397a4', '1595866281');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `access`
--
ALTER TABLE `access`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `boards`
--
ALTER TABLE `boards`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `level`
--
ALTER TABLE `level`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `materi`
--
ALTER TABLE `materi`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `quiz`
--
ALTER TABLE `quiz`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `user_cookie`
--
ALTER TABLE `user_cookie`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `access`
--
ALTER TABLE `access`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `boards`
--
ALTER TABLE `boards`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=23;
--
-- AUTO_INCREMENT for table `level`
--
ALTER TABLE `level`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=4;
--
-- AUTO_INCREMENT for table `materi`
--
ALTER TABLE `materi`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=40;
--
-- AUTO_INCREMENT for table `quiz`
--
ALTER TABLE `quiz`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=30;
--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) unsigned NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=33;
--
-- AUTO_INCREMENT for table `user_cookie`
--
ALTER TABLE `user_cookie`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT,AUTO_INCREMENT=31;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
